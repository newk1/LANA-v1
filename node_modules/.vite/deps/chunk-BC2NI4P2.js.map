{
  "version": 3,
  "sources": ["../../@project-serum/sol-wallet-adapter/node_modules/bs58/index.js", "../../@project-serum/sol-wallet-adapter/src/index.ts"],
  "sourcesContent": ["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", "import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n"],
  "mappings": "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",
  "names": ["EventEmitter", "bs58"]
}
