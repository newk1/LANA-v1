{
  "version": 3,
  "sources": ["../../@solana/wallet-standard-util/src/signMessage.ts", "../../@solana/wallet-standard-util/src/signIn.ts", "../../@solana/wallet-standard-util/src/commitment.ts", "../../@solana/wallet-standard-util/src/endpoint.ts"],
  "sourcesContent": ["import { ed25519 } from '@noble/curves/ed25519';\nimport type { SolanaSignMessageInput, SolanaSignMessageOutput } from '@solana/wallet-standard-features';\nimport { bytesEqual } from './util.js';\n\n/**\n * TODO: docs\n */\nexport function verifyMessageSignature({\n    message,\n    signedMessage,\n    signature,\n    publicKey,\n}: {\n    message: Uint8Array;\n    signedMessage: Uint8Array;\n    signature: Uint8Array;\n    publicKey: Uint8Array;\n}): boolean {\n    // TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md\n    return bytesEqual(message, signedMessage) && ed25519.verify(signature, signedMessage, publicKey);\n}\n\n/**\n * TODO: docs\n */\nexport function verifySignMessage(input: SolanaSignMessageInput, output: SolanaSignMessageOutput): boolean {\n    const {\n        message,\n        account: { publicKey },\n    } = input;\n    const { signedMessage, signature } = output;\n    return verifyMessageSignature({ message, signedMessage, signature, publicKey });\n}\n", "import type { SolanaSignInInput, SolanaSignInOutput } from '@solana/wallet-standard-features';\nimport { verifyMessageSignature } from './signMessage.js';\nimport { arraysEqual } from './util.js';\n\n/**\n * TODO: docs\n */\nexport function verifySignIn(input: SolanaSignInInput, output: SolanaSignInOutput): boolean {\n    const {\n        signedMessage,\n        signature,\n        account: { publicKey },\n    } = output;\n    const message = deriveSignInMessage(input, output);\n    return !!message && verifyMessageSignature({ message, signedMessage, signature, publicKey });\n}\n\n/**\n * TODO: docs\n */\nexport function deriveSignInMessage(input: SolanaSignInInput, output: SolanaSignInOutput): Uint8Array | null {\n    const text = deriveSignInMessageText(input, output);\n    if (!text) return null;\n    return new TextEncoder().encode(text);\n}\n\n/**\n * TODO: docs\n */\nexport function deriveSignInMessageText(input: SolanaSignInInput, output: SolanaSignInOutput): string | null {\n    const parsed = parseSignInMessage(output.signedMessage);\n    if (!parsed) return null;\n\n    if (input.domain && input.domain !== parsed.domain) return null;\n    if (input.address && input.address !== parsed.address) return null;\n    if (input.statement !== parsed.statement) return null;\n    if (input.uri !== parsed.uri) return null;\n    if (input.version !== parsed.version) return null;\n    if (input.chainId !== parsed.chainId) return null;\n    if (input.nonce !== parsed.nonce) return null;\n    if (input.issuedAt !== parsed.issuedAt) return null;\n    if (input.expirationTime !== parsed.expirationTime) return null;\n    if (input.notBefore !== parsed.notBefore) return null;\n    if (input.requestId !== parsed.requestId) return null;\n    if (input.resources) {\n        if (!parsed.resources) return null;\n        if (!arraysEqual(input.resources, parsed.resources)) return null;\n    } else if (parsed.resources) return null;\n\n    return createSignInMessageText(parsed);\n}\n\n/**\n * TODO: docs\n */\nexport type SolanaSignInInputWithRequiredFields = SolanaSignInInput &\n    Required<Pick<SolanaSignInInput, 'domain' | 'address'>>;\n\n/**\n * TODO: docs\n */\nexport function parseSignInMessage(message: Uint8Array): SolanaSignInInputWithRequiredFields | null {\n    const text = new TextDecoder().decode(message);\n    return parseSignInMessageText(text);\n}\n\n// TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md\nconst DOMAIN = '(?<domain>[^\\\\n]+?) wants you to sign in with your Solana account:\\\\n';\nconst ADDRESS = '(?<address>[^\\\\n]+)(?:\\\\n|$)';\nconst STATEMENT = '(?:\\\\n(?<statement>[\\\\S\\\\s]*?)(?:\\\\n|$))??';\nconst URI = '(?:\\\\nURI: (?<uri>[^\\\\n]+))?';\nconst VERSION = '(?:\\\\nVersion: (?<version>[^\\\\n]+))?';\nconst CHAIN_ID = '(?:\\\\nChain ID: (?<chainId>[^\\\\n]+))?';\nconst NONCE = '(?:\\\\nNonce: (?<nonce>[^\\\\n]+))?';\nconst ISSUED_AT = '(?:\\\\nIssued At: (?<issuedAt>[^\\\\n]+))?';\nconst EXPIRATION_TIME = '(?:\\\\nExpiration Time: (?<expirationTime>[^\\\\n]+))?';\nconst NOT_BEFORE = '(?:\\\\nNot Before: (?<notBefore>[^\\\\n]+))?';\nconst REQUEST_ID = '(?:\\\\nRequest ID: (?<requestId>[^\\\\n]+))?';\nconst RESOURCES = '(?:\\\\nResources:(?<resources>(?:\\\\n- [^\\\\n]+)*))?';\nconst FIELDS = `${URI}${VERSION}${CHAIN_ID}${NONCE}${ISSUED_AT}${EXPIRATION_TIME}${NOT_BEFORE}${REQUEST_ID}${RESOURCES}`;\nconst MESSAGE = new RegExp(`^${DOMAIN}${ADDRESS}${STATEMENT}${FIELDS}\\\\n*$`);\n\n/**\n * TODO: docs\n */\nexport function parseSignInMessageText(text: string): SolanaSignInInputWithRequiredFields | null {\n    const match = MESSAGE.exec(text);\n    if (!match) return null;\n    const groups = match.groups;\n    if (!groups) return null;\n\n    return {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        domain: groups.domain!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        address: groups.address!,\n        statement: groups.statement,\n        uri: groups.uri,\n        version: groups.version,\n        nonce: groups.nonce,\n        chainId: groups.chainId,\n        issuedAt: groups.issuedAt,\n        expirationTime: groups.expirationTime,\n        notBefore: groups.notBefore,\n        requestId: groups.requestId,\n        resources: groups.resources?.split('\\n- ').slice(1),\n    };\n}\n\n/**\n * TODO: docs\n */\nexport function createSignInMessage(input: SolanaSignInInputWithRequiredFields): Uint8Array {\n    const text = createSignInMessageText(input);\n    return new TextEncoder().encode(text);\n}\n\n/**\n * TODO: docs\n */\nexport function createSignInMessageText(input: SolanaSignInInputWithRequiredFields): string {\n    // ${domain} wants you to sign in with your Solana account:\n    // ${address}\n    //\n    // ${statement}\n    //\n    // URI: ${uri}\n    // Version: ${version}\n    // Chain ID: ${chain}\n    // Nonce: ${nonce}\n    // Issued At: ${issued-at}\n    // Expiration Time: ${expiration-time}\n    // Not Before: ${not-before}\n    // Request ID: ${request-id}\n    // Resources:\n    // - ${resources[0]}\n    // - ${resources[1]}\n    // ...\n    // - ${resources[n]}\n\n    let message = `${input.domain} wants you to sign in with your Solana account:\\n`;\n    message += `${input.address}`;\n\n    if (input.statement) {\n        message += `\\n\\n${input.statement}`;\n    }\n\n    const fields: string[] = [];\n    if (input.uri) {\n        fields.push(`URI: ${input.uri}`);\n    }\n    if (input.version) {\n        fields.push(`Version: ${input.version}`);\n    }\n    if (input.chainId) {\n        fields.push(`Chain ID: ${input.chainId}`);\n    }\n    if (input.nonce) {\n        fields.push(`Nonce: ${input.nonce}`);\n    }\n    if (input.issuedAt) {\n        fields.push(`Issued At: ${input.issuedAt}`);\n    }\n    if (input.expirationTime) {\n        fields.push(`Expiration Time: ${input.expirationTime}`);\n    }\n    if (input.notBefore) {\n        fields.push(`Not Before: ${input.notBefore}`);\n    }\n    if (input.requestId) {\n        fields.push(`Request ID: ${input.requestId}`);\n    }\n    if (input.resources) {\n        fields.push(`Resources:`);\n        for (const resource of input.resources) {\n            fields.push(`- ${resource}`);\n        }\n    }\n    if (fields.length) {\n        message += `\\n\\n${fields.join('\\n')}`;\n    }\n\n    return message;\n}\n", "import type { SolanaTransactionCommitment } from '@solana/wallet-standard-features';\n\n// Copied from @solana/web3.js\ntype Commitment = 'processed' | 'confirmed' | 'finalized' | 'recent' | 'single' | 'singleGossip' | 'root' | 'max';\n\n/**\n * TODO: docs\n */\nexport function getCommitment(commitment?: Commitment): SolanaTransactionCommitment | undefined {\n    switch (commitment) {\n        case 'processed':\n        case 'confirmed':\n        case 'finalized':\n        case undefined:\n            return commitment;\n        case 'recent':\n            return 'processed';\n        case 'single':\n        case 'singleGossip':\n            return 'confirmed';\n        case 'max':\n        case 'root':\n            return 'finalized';\n        default:\n            return undefined;\n    }\n}\n", "import type { SolanaChain } from '@solana/wallet-standard-chains';\nimport {\n    SOLANA_DEVNET_CHAIN,\n    SOLANA_LOCALNET_CHAIN,\n    SOLANA_MAINNET_CHAIN,\n    SOLANA_TESTNET_CHAIN,\n} from '@solana/wallet-standard-chains';\n\n/** TODO: docs */\nexport const MAINNET_ENDPOINT = 'https://api.mainnet-beta.solana.com';\n/** TODO: docs */\nexport const DEVNET_ENDPOINT = 'https://api.devnet.solana.com';\n/** TODO: docs */\nexport const TESTNET_ENDPOINT = 'https://api.testnet.solana.com';\n/** TODO: docs */\nexport const LOCALNET_ENDPOINT = 'http://localhost:8899';\n\n/**\n * TODO: docs\n */\nexport function getChainForEndpoint(endpoint: string): SolanaChain {\n    if (endpoint.includes(MAINNET_ENDPOINT)) return SOLANA_MAINNET_CHAIN;\n    if (/\\bdevnet\\b/i.test(endpoint)) return SOLANA_DEVNET_CHAIN;\n    if (/\\btestnet\\b/i.test(endpoint)) return SOLANA_TESTNET_CHAIN;\n    if (/\\blocalhost\\b/i.test(endpoint) || /\\b127\\.0\\.0\\.1\\b/.test(endpoint)) return SOLANA_LOCALNET_CHAIN;\n    return SOLANA_MAINNET_CHAIN;\n}\n\n/**\n * TODO: docs\n */\nexport function getEndpointForChain(chain: SolanaChain, endpoint?: string): string {\n    if (endpoint) return endpoint;\n    if (chain === SOLANA_MAINNET_CHAIN) return MAINNET_ENDPOINT;\n    if (chain === SOLANA_DEVNET_CHAIN) return DEVNET_ENDPOINT;\n    if (chain === SOLANA_TESTNET_CHAIN) return TESTNET_ENDPOINT;\n    if (chain === SOLANA_LOCALNET_CHAIN) return LOCALNET_ENDPOINT;\n    return MAINNET_ENDPOINT;\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA;;;ACmEA,IAAM,SAAS;AACf,IAAM,UAAU;AAChB,IAAM,YAAY;AAClB,IAAM,MAAM;AACZ,IAAM,UAAU;AAChB,IAAM,WAAW;AACjB,IAAM,QAAQ;AACd,IAAM,YAAY;AAClB,IAAM,kBAAkB;AACxB,IAAM,aAAa;AACnB,IAAM,aAAa;AACnB,IAAM,YAAY;AAClB,IAAM,SAAS,GAAG,GAAG,GAAG,OAAO,GAAG,QAAQ,GAAG,KAAK,GAAG,SAAS,GAAG,eAAe,GAAG,UAAU,GAAG,UAAU,GAAG,SAAS;AACtH,IAAM,UAAU,IAAI,OAAO,IAAI,MAAM,GAAG,OAAO,GAAG,SAAS,GAAG,MAAM,OAAO;AAgCrE,SAAU,oBAAoB,OAA0C;AAC1E,QAAM,OAAO,wBAAwB,KAAK;AAC1C,SAAO,IAAI,YAAW,EAAG,OAAO,IAAI;AACxC;AAKM,SAAU,wBAAwB,OAA0C;AAoB9E,MAAI,UAAU,GAAG,MAAM,MAAM;;AAC7B,aAAW,GAAG,MAAM,OAAO;AAE3B,MAAI,MAAM,WAAW;AACjB,eAAW;;EAAO,MAAM,SAAS;;AAGrC,QAAM,SAAmB,CAAA;AACzB,MAAI,MAAM,KAAK;AACX,WAAO,KAAK,QAAQ,MAAM,GAAG,EAAE;;AAEnC,MAAI,MAAM,SAAS;AACf,WAAO,KAAK,YAAY,MAAM,OAAO,EAAE;;AAE3C,MAAI,MAAM,SAAS;AACf,WAAO,KAAK,aAAa,MAAM,OAAO,EAAE;;AAE5C,MAAI,MAAM,OAAO;AACb,WAAO,KAAK,UAAU,MAAM,KAAK,EAAE;;AAEvC,MAAI,MAAM,UAAU;AAChB,WAAO,KAAK,cAAc,MAAM,QAAQ,EAAE;;AAE9C,MAAI,MAAM,gBAAgB;AACtB,WAAO,KAAK,oBAAoB,MAAM,cAAc,EAAE;;AAE1D,MAAI,MAAM,WAAW;AACjB,WAAO,KAAK,eAAe,MAAM,SAAS,EAAE;;AAEhD,MAAI,MAAM,WAAW;AACjB,WAAO,KAAK,eAAe,MAAM,SAAS,EAAE;;AAEhD,MAAI,MAAM,WAAW;AACjB,WAAO,KAAK,YAAY;AACxB,eAAW,YAAY,MAAM,WAAW;AACpC,aAAO,KAAK,KAAK,QAAQ,EAAE;;;AAGnC,MAAI,OAAO,QAAQ;AACf,eAAW;;EAAO,OAAO,KAAK,IAAI,CAAC;;AAGvC,SAAO;AACX;;;AC/KM,SAAU,cAAc,YAAuB;AACjD,UAAQ,YAAY;IAChB,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACD,aAAO;IACX,KAAK;AACD,aAAO;IACX,KAAK;IACL,KAAK;AACD,aAAO;IACX,KAAK;IACL,KAAK;AACD,aAAO;IACX;AACI,aAAO;;AAEnB;;;ACjBO,IAAM,mBAAmB;AAW1B,SAAU,oBAAoB,UAAgB;AAChD,MAAI,SAAS,SAAS,gBAAgB;AAAG,WAAO;AAChD,MAAI,cAAc,KAAK,QAAQ;AAAG,WAAO;AACzC,MAAI,eAAe,KAAK,QAAQ;AAAG,WAAO;AAC1C,MAAI,iBAAiB,KAAK,QAAQ,KAAK,mBAAmB,KAAK,QAAQ;AAAG,WAAO;AACjF,SAAO;AACX;",
  "names": []
}
