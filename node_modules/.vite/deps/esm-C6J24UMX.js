import {
  init_tslib_es6,
  tslib_es6_exports
} from "./chunk-Y5RNN4BP.js";
import {
  require_elliptic,
  require_hash,
  require_isarray
} from "./chunk-XVLJ2III.js";
import "./chunk-YR6NA55Z.js";
import {
  require_crypto
} from "./chunk-PVOWFSIG.js";
import {
  require_dijkstra
} from "./chunk-HVX2K7ZM.js";
import {
  require_bs58
} from "./chunk-SL7GPBGA.js";
import {
  require_events
} from "./chunk-XAZ6AATU.js";
import {
  PublicKey,
  Transaction,
  init_index_browser_esm,
  require_base64_js,
  require_buffer2 as require_buffer,
  require_ieee754
} from "./chunk-XJHJSLOP.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-MVEJMUOB.js";

// node_modules/@walletconnect/browser-utils/node_modules/@walletconnect/window-metadata/node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@walletconnect/browser-utils/node_modules/@walletconnect/window-metadata/node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow3(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow3;
    function getFromWindowOrThrow3(name2) {
      const res = getFromWindow3(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow3;
    function getDocumentOrThrow3() {
      return getFromWindowOrThrow3("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow3;
    function getDocument3() {
      return getFromWindow3("document");
    }
    exports.getDocument = getDocument3;
    function getNavigatorOrThrow3() {
      return getFromWindowOrThrow3("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow3;
    function getNavigator3() {
      return getFromWindow3("navigator");
    }
    exports.getNavigator = getNavigator3;
    function getLocationOrThrow3() {
      return getFromWindowOrThrow3("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow3;
    function getLocation3() {
      return getFromWindow3("location");
    }
    exports.getLocation = getLocation3;
    function getCryptoOrThrow3() {
      return getFromWindowOrThrow3("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow3;
    function getCrypto3() {
      return getFromWindow3("crypto");
    }
    exports.getCrypto = getCrypto3;
    function getLocalStorageOrThrow3() {
      return getFromWindowOrThrow3("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow3;
    function getLocalStorage3() {
      return getFromWindow3("localStorage");
    }
    exports.getLocalStorage = getLocalStorage3;
  }
});

// node_modules/@walletconnect/browser-utils/node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/browser-utils/node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs();
    function getWindowMetadata2() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e4) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i6 = 0; i6 < links.length; i6++) {
          const link = links[i6];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i6 = 0; i6 < metaTags.length; i6++) {
          const tag = metaTags[i6];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata2;
  }
});

// node_modules/@walletconnect/browser-utils/node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/browser-utils/node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow3(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow3;
    function getFromWindowOrThrow3(name2) {
      const res = getFromWindow3(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow3;
    function getDocumentOrThrow3() {
      return getFromWindowOrThrow3("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow3;
    function getDocument3() {
      return getFromWindow3("document");
    }
    exports.getDocument = getDocument3;
    function getNavigatorOrThrow3() {
      return getFromWindowOrThrow3("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow3;
    function getNavigator3() {
      return getFromWindow3("navigator");
    }
    exports.getNavigator = getNavigator3;
    function getLocationOrThrow3() {
      return getFromWindowOrThrow3("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow3;
    function getLocation3() {
      return getFromWindow3("location");
    }
    exports.getLocation = getLocation3;
    function getCryptoOrThrow3() {
      return getFromWindowOrThrow3("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow3;
    function getCrypto3() {
      return getFromWindow3("crypto");
    }
    exports.getCrypto = getCrypto3;
    function getLocalStorageOrThrow3() {
      return getFromWindowOrThrow3("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow3;
    function getLocalStorage3() {
      return getFromWindow3("localStorage");
    }
    exports.getLocalStorage = getLocalStorage3;
  }
});

// node_modules/@walletconnect/browser-utils/node_modules/detect-browser/es/index.js
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua) {
  return ua !== "" && userAgentRules.reduce(function(matched, _a) {
    var browser = _a[0], regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua) {
  var matchedRule = matchUserAgent(ua);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
    }
  } else {
    versionParts = [];
  }
  var version12 = versionParts.join(".");
  var os = detectOS(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version12, os, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version12, os);
}
function detectOS(ua) {
  for (var ii2 = 0, count = operatingSystemRules.length; ii2 < count; ii2++) {
    var _a = operatingSystemRules[ii2], os = _a[0], regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode3 = typeof process !== "undefined" && process.version;
  return isNode3 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii2 = 0; ii2 < count; ii2++) {
    output.push("0");
  }
  return output;
}
var __spreadArrays, BrowserInfo, NodeInfo, SearchBotDeviceInfo, BotInfo, ReactNativeInfo, SEARCHBOX_UA_REGEX, SEARCHBOT_OS_REGEX, REQUIRED_VERSION_PARTS, userAgentRules, operatingSystemRules;
var init_es = __esm({
  "node_modules/@walletconnect/browser-utils/node_modules/detect-browser/es/index.js"() {
    __spreadArrays = function() {
      for (var s5 = 0, i6 = 0, il = arguments.length; i6 < il; i6++) s5 += arguments[i6].length;
      for (var r6 = Array(s5), k7 = 0, i6 = 0; i6 < il; i6++)
        for (var a5 = arguments[i6], j5 = 0, jl = a5.length; j5 < jl; j5++, k7++)
          r6[k7] = a5[j5];
      return r6;
    };
    BrowserInfo = /** @class */
    /* @__PURE__ */ function() {
      function BrowserInfo3(name2, version12, os) {
        this.name = name2;
        this.version = version12;
        this.os = os;
        this.type = "browser";
      }
      return BrowserInfo3;
    }();
    NodeInfo = /** @class */
    /* @__PURE__ */ function() {
      function NodeInfo3(version12) {
        this.version = version12;
        this.type = "node";
        this.name = "node";
        this.os = process.platform;
      }
      return NodeInfo3;
    }();
    SearchBotDeviceInfo = /** @class */
    /* @__PURE__ */ function() {
      function SearchBotDeviceInfo3(name2, version12, os, bot) {
        this.name = name2;
        this.version = version12;
        this.os = os;
        this.bot = bot;
        this.type = "bot-device";
      }
      return SearchBotDeviceInfo3;
    }();
    BotInfo = /** @class */
    /* @__PURE__ */ function() {
      function BotInfo3() {
        this.type = "bot";
        this.bot = true;
        this.name = "bot";
        this.version = null;
        this.os = null;
      }
      return BotInfo3;
    }();
    ReactNativeInfo = /** @class */
    /* @__PURE__ */ function() {
      function ReactNativeInfo3() {
        this.type = "react-native";
        this.name = "react-native";
        this.version = null;
        this.os = null;
      }
      return ReactNativeInfo3;
    }();
    SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
    SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
    REQUIRED_VERSION_PARTS = 3;
    userAgentRules = [
      ["aol", /AOLShield\/([0-9\._]+)/],
      ["edge", /Edge\/([0-9\._]+)/],
      ["edge-ios", /EdgiOS\/([0-9\._]+)/],
      ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
      ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
      ["samsung", /SamsungBrowser\/([0-9\.]+)/],
      ["silk", /\bSilk\/([0-9._-]+)\b/],
      ["miui", /MiuiBrowser\/([0-9\.]+)$/],
      ["beaker", /BeakerBrowser\/([0-9\.]+)/],
      ["edge-chromium", /EdgA?\/([0-9\.]+)/],
      [
        "chromium-webview",
        /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
      ],
      ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
      ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
      ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
      ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
      ["fxios", /FxiOS\/([0-9\.]+)/],
      ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
      ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
      ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
      ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
      ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
      ["ie", /MSIE\s(7\.0)/],
      ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
      ["android", /Android\s([0-9\.]+)/],
      ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
      ["safari", /Version\/([0-9\._]+).*Safari/],
      ["facebook", /FBAV\/([0-9\.]+)/],
      ["instagram", /Instagram\s([0-9\.]+)/],
      ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
      ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
      ["searchbot", SEARCHBOX_UA_REGEX]
    ];
    operatingSystemRules = [
      ["iOS", /iP(hone|od|ad)/],
      ["Android OS", /Android/],
      ["BlackBerry OS", /BlackBerry|BB10/],
      ["Windows Mobile", /IEMobile/],
      ["Amazon OS", /Kindle/],
      ["Windows 3.11", /Win16/],
      ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
      ["Windows 98", /(Windows 98)|(Win98)/],
      ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
      ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
      ["Windows Server 2003", /(Windows NT 5.2)/],
      ["Windows Vista", /(Windows NT 6.0)/],
      ["Windows 7", /(Windows NT 6.1)/],
      ["Windows 8", /(Windows NT 6.2)/],
      ["Windows 8.1", /(Windows NT 6.3)/],
      ["Windows 10", /(Windows NT 10.0)/],
      ["Windows ME", /Windows ME/],
      ["Open BSD", /OpenBSD/],
      ["Sun OS", /SunOS/],
      ["Chrome OS", /CrOS/],
      ["Linux", /(Linux)|(X11)/],
      ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
      ["QNX", /QNX/],
      ["BeOS", /BeOS/],
      ["OS/2", /OS\/2/]
    ];
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/browser.js
function detectEnv(userAgent) {
  return detect(userAgent);
}
function detectOS2() {
  const env = detectEnv();
  return env && env.os ? env.os : void 0;
}
function isAndroid() {
  const os = detectOS2();
  return os ? os.toLowerCase().includes("android") : false;
}
function isIOS() {
  const os = detectOS2();
  return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
}
function isMobile() {
  const os = detectOS2();
  return os ? isAndroid() || isIOS() : false;
}
function isNode() {
  const env = detectEnv();
  const result = env && env.name ? env.name.toLowerCase() === "node" : false;
  return result;
}
function isBrowser() {
  const result = !isNode() && !!getNavigator2();
  return result;
}
function getClientMeta() {
  return windowMetadata.getWindowMetadata();
}
var windowMetadata, windowGetters, getFromWindow2, getFromWindowOrThrow2, getDocumentOrThrow2, getDocument2, getNavigatorOrThrow2, getNavigator2, getLocationOrThrow2, getLocation2, getCryptoOrThrow2, getCrypto2, getLocalStorageOrThrow2, getLocalStorage2;
var init_browser = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/browser.js"() {
    windowMetadata = __toESM(require_cjs2());
    windowGetters = __toESM(require_cjs3());
    init_es();
    getFromWindow2 = windowGetters.getFromWindow;
    getFromWindowOrThrow2 = windowGetters.getFromWindowOrThrow;
    getDocumentOrThrow2 = windowGetters.getDocumentOrThrow;
    getDocument2 = windowGetters.getDocument;
    getNavigatorOrThrow2 = windowGetters.getNavigatorOrThrow;
    getNavigator2 = windowGetters.getNavigator;
    getLocationOrThrow2 = windowGetters.getLocationOrThrow;
    getLocation2 = windowGetters.getLocation;
    getCryptoOrThrow2 = windowGetters.getCryptoOrThrow;
    getCrypto2 = windowGetters.getCrypto;
    getLocalStorageOrThrow2 = windowGetters.getLocalStorageOrThrow;
    getLocalStorage2 = windowGetters.getLocalStorage;
  }
});

// node_modules/@walletconnect/browser-utils/node_modules/@walletconnect/safe-json/dist/esm/index.js
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSON.parse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSON.stringify(value);
}
var init_esm = __esm({
  "node_modules/@walletconnect/browser-utils/node_modules/@walletconnect/safe-json/dist/esm/index.js"() {
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/json.js
var safeJsonParse2, safeJsonStringify2;
var init_json = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/json.js"() {
    init_esm();
    safeJsonParse2 = safeJsonParse;
    safeJsonStringify2 = safeJsonStringify;
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/local.js
function setLocal(key2, data) {
  const raw = safeJsonStringify2(data);
  const local = getLocalStorage2();
  if (local) {
    local.setItem(key2, raw);
  }
}
function getLocal(key2) {
  let data = null;
  let raw = null;
  const local = getLocalStorage2();
  if (local) {
    raw = local.getItem(key2);
  }
  data = raw ? safeJsonParse2(raw) : raw;
  return data;
}
function removeLocal(key2) {
  const local = getLocalStorage2();
  if (local) {
    local.removeItem(key2);
  }
}
var init_local = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/local.js"() {
    init_json();
    init_browser();
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/mobile.js
function formatIOSMobile(uri, entry) {
  const encodedUri = encodeURIComponent(uri);
  return entry.universalLink ? `${entry.universalLink}/wc?uri=${encodedUri}` : entry.deepLink ? `${entry.deepLink}${entry.deepLink.endsWith(":") ? "//" : "/"}wc?uri=${encodedUri}` : "";
}
function saveMobileLinkInfo(data) {
  const focusUri = data.href.split("?")[0];
  setLocal(mobileLinkChoiceKey, Object.assign(Object.assign({}, data), { href: focusUri }));
}
function getMobileRegistryEntry(registry, name2) {
  return registry.filter((entry) => entry.name.toLowerCase().includes(name2.toLowerCase()))[0];
}
function getMobileLinkRegistry(registry, whitelist) {
  let links = registry;
  if (whitelist) {
    links = whitelist.map((name2) => getMobileRegistryEntry(registry, name2)).filter(Boolean);
  }
  return links;
}
var mobileLinkChoiceKey;
var init_mobile = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/mobile.js"() {
    init_local();
    mobileLinkChoiceKey = "WALLETCONNECT_DEEPLINK_CHOICE";
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/registry.js
function getWalletRegistryUrl() {
  return API_URL + "/api/v2/wallets";
}
function getDappRegistryUrl() {
  return API_URL + "/api/v2/dapps";
}
function formatMobileRegistryEntry(entry, platform = "mobile") {
  var _a;
  return {
    name: entry.name || "",
    shortName: entry.metadata.shortName || "",
    color: entry.metadata.colors.primary || "",
    logo: (_a = entry.image_url.sm) !== null && _a !== void 0 ? _a : "",
    universalLink: entry[platform].universal || "",
    deepLink: entry[platform].native || ""
  };
}
function formatMobileRegistry(registry, platform = "mobile") {
  return Object.values(registry).filter((entry) => !!entry[platform].universal || !!entry[platform].native).map((entry) => formatMobileRegistryEntry(entry, platform));
}
var API_URL;
var init_registry = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/registry.js"() {
    API_URL = "https://registry.walletconnect.com";
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/index.js
var esm_exports2 = {};
__export(esm_exports2, {
  detectEnv: () => detectEnv,
  detectOS: () => detectOS2,
  formatIOSMobile: () => formatIOSMobile,
  formatMobileRegistry: () => formatMobileRegistry,
  formatMobileRegistryEntry: () => formatMobileRegistryEntry,
  getClientMeta: () => getClientMeta,
  getCrypto: () => getCrypto2,
  getCryptoOrThrow: () => getCryptoOrThrow2,
  getDappRegistryUrl: () => getDappRegistryUrl,
  getDocument: () => getDocument2,
  getDocumentOrThrow: () => getDocumentOrThrow2,
  getFromWindow: () => getFromWindow2,
  getFromWindowOrThrow: () => getFromWindowOrThrow2,
  getLocal: () => getLocal,
  getLocalStorage: () => getLocalStorage2,
  getLocalStorageOrThrow: () => getLocalStorageOrThrow2,
  getLocation: () => getLocation2,
  getLocationOrThrow: () => getLocationOrThrow2,
  getMobileLinkRegistry: () => getMobileLinkRegistry,
  getMobileRegistryEntry: () => getMobileRegistryEntry,
  getNavigator: () => getNavigator2,
  getNavigatorOrThrow: () => getNavigatorOrThrow2,
  getWalletRegistryUrl: () => getWalletRegistryUrl,
  isAndroid: () => isAndroid,
  isBrowser: () => isBrowser,
  isIOS: () => isIOS,
  isMobile: () => isMobile,
  isNode: () => isNode,
  mobileLinkChoiceKey: () => mobileLinkChoiceKey,
  removeLocal: () => removeLocal,
  safeJsonParse: () => safeJsonParse2,
  safeJsonStringify: () => safeJsonStringify2,
  saveMobileLinkInfo: () => saveMobileLinkInfo,
  setLocal: () => setLocal
});
var init_esm2 = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/index.js"() {
    init_browser();
    init_json();
    init_local();
    init_mobile();
    init_registry();
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/can-promise.js
var require_can_promise = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/can-promise.js"(exports, module) {
    module.exports = function() {
      return typeof Promise === "function" && Promise.prototype && Promise.prototype.then;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/utils/typedarray-buffer.js
var require_typedarray_buffer = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/utils/typedarray-buffer.js"(exports, module) {
    "use strict";
    var isArray = require_isarray();
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
          return 42;
        } };
        return arr.foo() === 42;
      } catch (e4) {
        return false;
      }
    }
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    var K_MAX_LENGTH = Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    function Buffer2(arg, offset, length2) {
      if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
        return new Buffer2(arg, offset, length2);
      }
      if (typeof arg === "number") {
        return allocUnsafe3(this, arg);
      }
      return from3(this, arg, offset, length2);
    }
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      Buffer2.prototype.__proto__ = Uint8Array.prototype;
      Buffer2.__proto__ = Uint8Array;
      if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
        Object.defineProperty(Buffer2, Symbol.species, {
          value: null,
          configurable: true,
          enumerable: false,
          writable: false
        });
      }
    }
    function checked(length2) {
      if (length2 >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length2 | 0;
    }
    function isnan(val) {
      return val !== val;
    }
    function createBuffer(that, length2) {
      var buf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        buf = new Uint8Array(length2);
        buf.__proto__ = Buffer2.prototype;
      } else {
        buf = that;
        if (buf === null) {
          buf = new Buffer2(length2);
        }
        buf.length = length2;
      }
      return buf;
    }
    function allocUnsafe3(that, size) {
      var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer2.TYPED_ARRAY_SUPPORT) {
        for (var i6 = 0; i6 < size; ++i6) {
          buf[i6] = 0;
        }
      }
      return buf;
    }
    function fromString4(that, string3) {
      var length2 = byteLength(string3) | 0;
      var buf = createBuffer(that, length2);
      var actual = buf.write(string3);
      if (actual !== length2) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(that, array) {
      var length2 = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(that, length2);
      for (var i6 = 0; i6 < length2; i6 += 1) {
        buf[i6] = array[i6] & 255;
      }
      return buf;
    }
    function fromArrayBuffer(that, array, byteOffset, length2) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError("'offset' is out of bounds");
      }
      if (array.byteLength < byteOffset + (length2 || 0)) {
        throw new RangeError("'length' is out of bounds");
      }
      var buf;
      if (byteOffset === void 0 && length2 === void 0) {
        buf = new Uint8Array(array);
      } else if (length2 === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length2);
      }
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        buf.__proto__ = Buffer2.prototype;
      } else {
        buf = fromArrayLike(that, buf);
      }
      return buf;
    }
    function fromObject(that, obj) {
      if (Buffer2.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(that, len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
          if (typeof obj.length !== "number" || isnan(obj.length)) {
            return createBuffer(that, 0);
          }
          return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(that, obj.data);
        }
      }
      throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
    }
    function utf8ToBytes(string3, units) {
      units = units || Infinity;
      var codePoint;
      var length2 = string3.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i6 = 0; i6 < length2; ++i6) {
        codePoint = string3.charCodeAt(i6);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i6 + 1 === length2) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function byteLength(string3) {
      if (Buffer2.isBuffer(string3)) {
        return string3.length;
      }
      if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string3) || string3 instanceof ArrayBuffer)) {
        return string3.byteLength;
      }
      if (typeof string3 !== "string") {
        string3 = "" + string3;
      }
      var len = string3.length;
      if (len === 0) return 0;
      return utf8ToBytes(string3).length;
    }
    function blitBuffer(src2, dst, offset, length2) {
      for (var i6 = 0; i6 < length2; ++i6) {
        if (i6 + offset >= dst.length || i6 >= src2.length) break;
        dst[i6 + offset] = src2[i6];
      }
      return i6;
    }
    function utf8Write(buf, string3, offset, length2) {
      return blitBuffer(utf8ToBytes(string3, buf.length - offset), buf, offset, length2);
    }
    function from3(that, value, offset, length2) {
      if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
      }
      if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, offset, length2);
      }
      if (typeof value === "string") {
        return fromString4(that, value, offset);
      }
      return fromObject(that, value);
    }
    Buffer2.prototype.write = function write(string3, offset, length2) {
      if (offset === void 0) {
        length2 = this.length;
        offset = 0;
      } else if (length2 === void 0 && typeof offset === "string") {
        length2 = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length2)) {
          length2 = length2 | 0;
        } else {
          length2 = void 0;
        }
      }
      var remaining = this.length - offset;
      if (length2 === void 0 || length2 > remaining) length2 = remaining;
      if (string3.length > 0 && (length2 < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      return utf8Write(this, string3, offset, length2);
    };
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      var newBuf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer2.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer2(sliceLen, void 0);
        for (var i6 = 0; i6 < sliceLen; ++i6) {
          newBuf[i6] = this[i6 + start];
        }
      }
      return newBuf;
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i6;
      if (this === target && start < targetStart && targetStart < end) {
        for (i6 = len - 1; i6 >= 0; --i6) {
          target[i6 + targetStart] = this[i6 + start];
        }
      } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
        for (i6 = 0; i6 < len; ++i6) {
          target[i6 + targetStart] = this[i6 + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          end = this.length;
        }
        if (val.length === 1) {
          var code2 = val.charCodeAt(0);
          if (code2 < 256) {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      var i6;
      if (typeof val === "number") {
        for (i6 = start; i6 < end; ++i6) {
          this[i6] = val;
        }
      } else {
        var bytes = Buffer2.isBuffer(val) ? val : new Buffer2(val);
        var len = bytes.length;
        for (i6 = 0; i6 < end - start; ++i6) {
          this[i6 + start] = bytes[i6 % len];
        }
      }
      return this;
    };
    Buffer2.concat = function concat4(list, length2) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return createBuffer(null, 0);
      }
      var i6;
      if (length2 === void 0) {
        length2 = 0;
        for (i6 = 0; i6 < list.length; ++i6) {
          length2 += list[i6].length;
        }
      }
      var buffer = allocUnsafe3(null, length2);
      var pos = 0;
      for (i6 = 0; i6 < list.length; ++i6) {
        var buf = list[i6];
        if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    Buffer2.byteLength = byteLength;
    Buffer2.prototype._isBuffer = true;
    Buffer2.isBuffer = function isBuffer(b5) {
      return !!(b5 != null && b5._isBuffer);
    };
    module.exports.alloc = function(size) {
      var buffer = new Buffer2(size);
      buffer.fill(0);
      return buffer;
    };
    module.exports.from = function(data) {
      return new Buffer2(data);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/utils.js
var require_utils = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/utils.js"(exports) {
    var toSJISFunction;
    var CODEWORDS_COUNT = [
      0,
      // Not used
      26,
      44,
      70,
      100,
      134,
      172,
      196,
      242,
      292,
      346,
      404,
      466,
      532,
      581,
      655,
      733,
      815,
      901,
      991,
      1085,
      1156,
      1258,
      1364,
      1474,
      1588,
      1706,
      1828,
      1921,
      2051,
      2185,
      2323,
      2465,
      2611,
      2761,
      2876,
      3034,
      3196,
      3362,
      3532,
      3706
    ];
    exports.getSymbolSize = function getSymbolSize(version12) {
      if (!version12) throw new Error('"version" cannot be null or undefined');
      if (version12 < 1 || version12 > 40) throw new Error('"version" should be in range from 1 to 40');
      return version12 * 4 + 17;
    };
    exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version12) {
      return CODEWORDS_COUNT[version12];
    };
    exports.getBCHDigit = function(data) {
      var digit = 0;
      while (data !== 0) {
        digit++;
        data >>>= 1;
      }
      return digit;
    };
    exports.setToSJISFunction = function setToSJISFunction(f5) {
      if (typeof f5 !== "function") {
        throw new Error('"toSJISFunc" is not a valid function.');
      }
      toSJISFunction = f5;
    };
    exports.isKanjiModeEnabled = function() {
      return typeof toSJISFunction !== "undefined";
    };
    exports.toSJIS = function toSJIS(kanji) {
      return toSJISFunction(kanji);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/error-correction-level.js
var require_error_correction_level = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/error-correction-level.js"(exports) {
    exports.L = { bit: 1 };
    exports.M = { bit: 0 };
    exports.Q = { bit: 3 };
    exports.H = { bit: 2 };
    function fromString4(string3) {
      if (typeof string3 !== "string") {
        throw new Error("Param is not a string");
      }
      var lcStr = string3.toLowerCase();
      switch (lcStr) {
        case "l":
        case "low":
          return exports.L;
        case "m":
        case "medium":
          return exports.M;
        case "q":
        case "quartile":
          return exports.Q;
        case "h":
        case "high":
          return exports.H;
        default:
          throw new Error("Unknown EC Level: " + string3);
      }
    }
    exports.isValid = function isValid(level) {
      return level && typeof level.bit !== "undefined" && level.bit >= 0 && level.bit < 4;
    };
    exports.from = function from3(value, defaultValue) {
      if (exports.isValid(value)) {
        return value;
      }
      try {
        return fromString4(value);
      } catch (e4) {
        return defaultValue;
      }
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/bit-buffer.js
var require_bit_buffer = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/bit-buffer.js"(exports, module) {
    function BitBuffer() {
      this.buffer = [];
      this.length = 0;
    }
    BitBuffer.prototype = {
      get: function(index) {
        var bufIndex = Math.floor(index / 8);
        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
      },
      put: function(num, length2) {
        for (var i6 = 0; i6 < length2; i6++) {
          this.putBit((num >>> length2 - i6 - 1 & 1) === 1);
        }
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(bit) {
        var bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }
        if (bit) {
          this.buffer[bufIndex] |= 128 >>> this.length % 8;
        }
        this.length++;
      }
    };
    module.exports = BitBuffer;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/bit-matrix.js
var require_bit_matrix = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/bit-matrix.js"(exports, module) {
    var BufferUtil = require_typedarray_buffer();
    function BitMatrix(size) {
      if (!size || size < 1) {
        throw new Error("BitMatrix size must be defined and greater than 0");
      }
      this.size = size;
      this.data = BufferUtil.alloc(size * size);
      this.reservedBit = BufferUtil.alloc(size * size);
    }
    BitMatrix.prototype.set = function(row, col, value, reserved) {
      var index = row * this.size + col;
      this.data[index] = value;
      if (reserved) this.reservedBit[index] = true;
    };
    BitMatrix.prototype.get = function(row, col) {
      return this.data[row * this.size + col];
    };
    BitMatrix.prototype.xor = function(row, col, value) {
      this.data[row * this.size + col] ^= value;
    };
    BitMatrix.prototype.isReserved = function(row, col) {
      return this.reservedBit[row * this.size + col];
    };
    module.exports = BitMatrix;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/alignment-pattern.js
var require_alignment_pattern = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/alignment-pattern.js"(exports) {
    var getSymbolSize = require_utils().getSymbolSize;
    exports.getRowColCoords = function getRowColCoords(version12) {
      if (version12 === 1) return [];
      var posCount = Math.floor(version12 / 7) + 2;
      var size = getSymbolSize(version12);
      var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
      var positions = [size - 7];
      for (var i6 = 1; i6 < posCount - 1; i6++) {
        positions[i6] = positions[i6 - 1] - intervals;
      }
      positions.push(6);
      return positions.reverse();
    };
    exports.getPositions = function getPositions(version12) {
      var coords = [];
      var pos = exports.getRowColCoords(version12);
      var posLength = pos.length;
      for (var i6 = 0; i6 < posLength; i6++) {
        for (var j5 = 0; j5 < posLength; j5++) {
          if (i6 === 0 && j5 === 0 || // top-left
          i6 === 0 && j5 === posLength - 1 || // bottom-left
          i6 === posLength - 1 && j5 === 0) {
            continue;
          }
          coords.push([pos[i6], pos[j5]]);
        }
      }
      return coords;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/finder-pattern.js
var require_finder_pattern = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/finder-pattern.js"(exports) {
    var getSymbolSize = require_utils().getSymbolSize;
    var FINDER_PATTERN_SIZE = 7;
    exports.getPositions = function getPositions(version12) {
      var size = getSymbolSize(version12);
      return [
        // top-left
        [0, 0],
        // top-right
        [size - FINDER_PATTERN_SIZE, 0],
        // bottom-left
        [0, size - FINDER_PATTERN_SIZE]
      ];
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/mask-pattern.js
var require_mask_pattern = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/mask-pattern.js"(exports) {
    exports.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var PenaltyScores = {
      N1: 3,
      N2: 3,
      N3: 40,
      N4: 10
    };
    exports.isValid = function isValid(mask) {
      return mask != null && mask !== "" && !isNaN(mask) && mask >= 0 && mask <= 7;
    };
    exports.from = function from3(value) {
      return exports.isValid(value) ? parseInt(value, 10) : void 0;
    };
    exports.getPenaltyN1 = function getPenaltyN1(data) {
      var size = data.size;
      var points = 0;
      var sameCountCol = 0;
      var sameCountRow = 0;
      var lastCol = null;
      var lastRow = null;
      for (var row = 0; row < size; row++) {
        sameCountCol = sameCountRow = 0;
        lastCol = lastRow = null;
        for (var col = 0; col < size; col++) {
          var module2 = data.get(row, col);
          if (module2 === lastCol) {
            sameCountCol++;
          } else {
            if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
            lastCol = module2;
            sameCountCol = 1;
          }
          module2 = data.get(col, row);
          if (module2 === lastRow) {
            sameCountRow++;
          } else {
            if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
            lastRow = module2;
            sameCountRow = 1;
          }
        }
        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
      }
      return points;
    };
    exports.getPenaltyN2 = function getPenaltyN2(data) {
      var size = data.size;
      var points = 0;
      for (var row = 0; row < size - 1; row++) {
        for (var col = 0; col < size - 1; col++) {
          var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
          if (last === 4 || last === 0) points++;
        }
      }
      return points * PenaltyScores.N2;
    };
    exports.getPenaltyN3 = function getPenaltyN3(data) {
      var size = data.size;
      var points = 0;
      var bitsCol = 0;
      var bitsRow = 0;
      for (var row = 0; row < size; row++) {
        bitsCol = bitsRow = 0;
        for (var col = 0; col < size; col++) {
          bitsCol = bitsCol << 1 & 2047 | data.get(row, col);
          if (col >= 10 && (bitsCol === 1488 || bitsCol === 93)) points++;
          bitsRow = bitsRow << 1 & 2047 | data.get(col, row);
          if (col >= 10 && (bitsRow === 1488 || bitsRow === 93)) points++;
        }
      }
      return points * PenaltyScores.N3;
    };
    exports.getPenaltyN4 = function getPenaltyN4(data) {
      var darkCount = 0;
      var modulesCount = data.data.length;
      for (var i6 = 0; i6 < modulesCount; i6++) darkCount += data.data[i6];
      var k7 = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
      return k7 * PenaltyScores.N4;
    };
    function getMaskAt(maskPattern, i6, j5) {
      switch (maskPattern) {
        case exports.Patterns.PATTERN000:
          return (i6 + j5) % 2 === 0;
        case exports.Patterns.PATTERN001:
          return i6 % 2 === 0;
        case exports.Patterns.PATTERN010:
          return j5 % 3 === 0;
        case exports.Patterns.PATTERN011:
          return (i6 + j5) % 3 === 0;
        case exports.Patterns.PATTERN100:
          return (Math.floor(i6 / 2) + Math.floor(j5 / 3)) % 2 === 0;
        case exports.Patterns.PATTERN101:
          return i6 * j5 % 2 + i6 * j5 % 3 === 0;
        case exports.Patterns.PATTERN110:
          return (i6 * j5 % 2 + i6 * j5 % 3) % 2 === 0;
        case exports.Patterns.PATTERN111:
          return (i6 * j5 % 3 + (i6 + j5) % 2) % 2 === 0;
        default:
          throw new Error("bad maskPattern:" + maskPattern);
      }
    }
    exports.applyMask = function applyMask(pattern, data) {
      var size = data.size;
      for (var col = 0; col < size; col++) {
        for (var row = 0; row < size; row++) {
          if (data.isReserved(row, col)) continue;
          data.xor(row, col, getMaskAt(pattern, row, col));
        }
      }
    };
    exports.getBestMask = function getBestMask(data, setupFormatFunc) {
      var numPatterns = Object.keys(exports.Patterns).length;
      var bestPattern = 0;
      var lowerPenalty = Infinity;
      for (var p5 = 0; p5 < numPatterns; p5++) {
        setupFormatFunc(p5);
        exports.applyMask(p5, data);
        var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);
        exports.applyMask(p5, data);
        if (penalty < lowerPenalty) {
          lowerPenalty = penalty;
          bestPattern = p5;
        }
      }
      return bestPattern;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/error-correction-code.js
var require_error_correction_code = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/error-correction-code.js"(exports) {
    var ECLevel = require_error_correction_level();
    var EC_BLOCKS_TABLE = [
      // L  M  Q  H
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      2,
      2,
      4,
      1,
      2,
      4,
      4,
      2,
      4,
      4,
      4,
      2,
      4,
      6,
      5,
      2,
      4,
      6,
      6,
      2,
      5,
      8,
      8,
      4,
      5,
      8,
      8,
      4,
      5,
      8,
      11,
      4,
      8,
      10,
      11,
      4,
      9,
      12,
      16,
      4,
      9,
      16,
      16,
      6,
      10,
      12,
      18,
      6,
      10,
      17,
      16,
      6,
      11,
      16,
      19,
      6,
      13,
      18,
      21,
      7,
      14,
      21,
      25,
      8,
      16,
      20,
      25,
      8,
      17,
      23,
      25,
      9,
      17,
      23,
      34,
      9,
      18,
      25,
      30,
      10,
      20,
      27,
      32,
      12,
      21,
      29,
      35,
      12,
      23,
      34,
      37,
      12,
      25,
      34,
      40,
      13,
      26,
      35,
      42,
      14,
      28,
      38,
      45,
      15,
      29,
      40,
      48,
      16,
      31,
      43,
      51,
      17,
      33,
      45,
      54,
      18,
      35,
      48,
      57,
      19,
      37,
      51,
      60,
      19,
      38,
      53,
      63,
      20,
      40,
      56,
      66,
      21,
      43,
      59,
      70,
      22,
      45,
      62,
      74,
      24,
      47,
      65,
      77,
      25,
      49,
      68,
      81
    ];
    var EC_CODEWORDS_TABLE = [
      // L  M  Q  H
      7,
      10,
      13,
      17,
      10,
      16,
      22,
      28,
      15,
      26,
      36,
      44,
      20,
      36,
      52,
      64,
      26,
      48,
      72,
      88,
      36,
      64,
      96,
      112,
      40,
      72,
      108,
      130,
      48,
      88,
      132,
      156,
      60,
      110,
      160,
      192,
      72,
      130,
      192,
      224,
      80,
      150,
      224,
      264,
      96,
      176,
      260,
      308,
      104,
      198,
      288,
      352,
      120,
      216,
      320,
      384,
      132,
      240,
      360,
      432,
      144,
      280,
      408,
      480,
      168,
      308,
      448,
      532,
      180,
      338,
      504,
      588,
      196,
      364,
      546,
      650,
      224,
      416,
      600,
      700,
      224,
      442,
      644,
      750,
      252,
      476,
      690,
      816,
      270,
      504,
      750,
      900,
      300,
      560,
      810,
      960,
      312,
      588,
      870,
      1050,
      336,
      644,
      952,
      1110,
      360,
      700,
      1020,
      1200,
      390,
      728,
      1050,
      1260,
      420,
      784,
      1140,
      1350,
      450,
      812,
      1200,
      1440,
      480,
      868,
      1290,
      1530,
      510,
      924,
      1350,
      1620,
      540,
      980,
      1440,
      1710,
      570,
      1036,
      1530,
      1800,
      570,
      1064,
      1590,
      1890,
      600,
      1120,
      1680,
      1980,
      630,
      1204,
      1770,
      2100,
      660,
      1260,
      1860,
      2220,
      720,
      1316,
      1950,
      2310,
      750,
      1372,
      2040,
      2430
    ];
    exports.getBlocksCount = function getBlocksCount(version12, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_BLOCKS_TABLE[(version12 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_BLOCKS_TABLE[(version12 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_BLOCKS_TABLE[(version12 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_BLOCKS_TABLE[(version12 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
    exports.getTotalCodewordsCount = function getTotalCodewordsCount(version12, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_CODEWORDS_TABLE[(version12 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_CODEWORDS_TABLE[(version12 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_CODEWORDS_TABLE[(version12 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_CODEWORDS_TABLE[(version12 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/galois-field.js
var require_galois_field = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/galois-field.js"(exports) {
    var BufferUtil = require_typedarray_buffer();
    var EXP_TABLE = BufferUtil.alloc(512);
    var LOG_TABLE = BufferUtil.alloc(256);
    (function initTables() {
      var x8 = 1;
      for (var i6 = 0; i6 < 255; i6++) {
        EXP_TABLE[i6] = x8;
        LOG_TABLE[x8] = i6;
        x8 <<= 1;
        if (x8 & 256) {
          x8 ^= 285;
        }
      }
      for (i6 = 255; i6 < 512; i6++) {
        EXP_TABLE[i6] = EXP_TABLE[i6 - 255];
      }
    })();
    exports.log = function log(n6) {
      if (n6 < 1) throw new Error("log(" + n6 + ")");
      return LOG_TABLE[n6];
    };
    exports.exp = function exp(n6) {
      return EXP_TABLE[n6];
    };
    exports.mul = function mul3(x8, y7) {
      if (x8 === 0 || y7 === 0) return 0;
      return EXP_TABLE[LOG_TABLE[x8] + LOG_TABLE[y7]];
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/polynomial.js
var require_polynomial = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/polynomial.js"(exports) {
    var BufferUtil = require_typedarray_buffer();
    var GF = require_galois_field();
    exports.mul = function mul3(p1, p22) {
      var coeff = BufferUtil.alloc(p1.length + p22.length - 1);
      for (var i6 = 0; i6 < p1.length; i6++) {
        for (var j5 = 0; j5 < p22.length; j5++) {
          coeff[i6 + j5] ^= GF.mul(p1[i6], p22[j5]);
        }
      }
      return coeff;
    };
    exports.mod = function mod(divident, divisor) {
      var result = BufferUtil.from(divident);
      while (result.length - divisor.length >= 0) {
        var coeff = result[0];
        for (var i6 = 0; i6 < divisor.length; i6++) {
          result[i6] ^= GF.mul(divisor[i6], coeff);
        }
        var offset = 0;
        while (offset < result.length && result[offset] === 0) offset++;
        result = result.slice(offset);
      }
      return result;
    };
    exports.generateECPolynomial = function generateECPolynomial(degree) {
      var poly = BufferUtil.from([1]);
      for (var i6 = 0; i6 < degree; i6++) {
        poly = exports.mul(poly, [1, GF.exp(i6)]);
      }
      return poly;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/buffer/index.js
var require_buffer2 = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/buffer/index.js"(exports) {
    "use strict";
    var base642 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e4) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length2) {
      if (length2 > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length2 + '" is invalid for option "size"');
      }
      var buf = new Uint8Array(length2);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length2) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe3(arg);
      }
      return from3(arg, encodingOrOffset, length2);
    }
    Buffer2.poolSize = 8192;
    function from3(value, encodingOrOffset, length2) {
      if (typeof value === "string") {
        return fromString4(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length2);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length2);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length2);
      }
      var b5 = fromObject(value);
      if (b5) return b5;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(
          value[Symbol.toPrimitive]("string"),
          encodingOrOffset,
          length2
        );
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer2.from = function(value, encodingOrOffset, length2) {
      return from3(value, encodingOrOffset, length2);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe3(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe3(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe3(size);
    };
    function fromString4(string3, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      var length2 = byteLength(string3, encoding) | 0;
      var buf = createBuffer(length2);
      var actual = buf.write(string3, encoding);
      if (actual !== length2) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      var length2 = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length2);
      for (var i6 = 0; i6 < length2; i6 += 1) {
        buf[i6] = array[i6] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length2) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length2 || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      var buf;
      if (byteOffset === void 0 && length2 === void 0) {
        buf = new Uint8Array(array);
      } else if (length2 === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length2);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length2) {
      if (length2 >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length2 | 0;
    }
    function SlowBuffer(length2) {
      if (+length2 != length2) {
        length2 = 0;
      }
      return Buffer2.alloc(+length2);
    }
    Buffer2.isBuffer = function isBuffer(b5) {
      return b5 != null && b5._isBuffer === true && b5 !== Buffer2.prototype;
    };
    Buffer2.compare = function compare2(a5, b5) {
      if (isInstance(a5, Uint8Array)) a5 = Buffer2.from(a5, a5.offset, a5.byteLength);
      if (isInstance(b5, Uint8Array)) b5 = Buffer2.from(b5, b5.offset, b5.byteLength);
      if (!Buffer2.isBuffer(a5) || !Buffer2.isBuffer(b5)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a5 === b5) return 0;
      var x8 = a5.length;
      var y7 = b5.length;
      for (var i6 = 0, len = Math.min(x8, y7); i6 < len; ++i6) {
        if (a5[i6] !== b5[i6]) {
          x8 = a5[i6];
          y7 = b5[i6];
          break;
        }
      }
      if (x8 < y7) return -1;
      if (y7 < x8) return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat4(list, length2) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      var i6;
      if (length2 === void 0) {
        length2 = 0;
        for (i6 = 0; i6 < list.length; ++i6) {
          length2 += list[i6].length;
        }
      }
      var buffer = Buffer2.allocUnsafe(length2);
      var pos = 0;
      for (i6 = 0; i6 < list.length; ++i6) {
        var buf = list[i6];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            Buffer2.from(buf).copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string3, encoding) {
      if (Buffer2.isBuffer(string3)) {
        return string3.length;
      }
      if (ArrayBuffer.isView(string3) || isInstance(string3, ArrayBuffer)) {
        return string3.byteLength;
      }
      if (typeof string3 !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string3
        );
      }
      var len = string3.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0) return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string3).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string3).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string3).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding) encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b5, n6, m4) {
      var i6 = b5[n6];
      b5[n6] = b5[m4];
      b5[m4] = i6;
    }
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i6 = 0; i6 < len; i6 += 2) {
        swap(this, i6, i6 + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i6 = 0; i6 < len; i6 += 4) {
        swap(this, i6, i6 + 3);
        swap(this, i6 + 1, i6 + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i6 = 0; i6 < len; i6 += 8) {
        swap(this, i6, i6 + 7);
        swap(this, i6 + 1, i6 + 6);
        swap(this, i6 + 2, i6 + 5);
        swap(this, i6 + 3, i6 + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString4() {
      var length2 = this.length;
      if (length2 === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length2);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals4(b5) {
      if (!Buffer2.isBuffer(b5)) throw new TypeError("Argument must be a Buffer");
      if (this === b5) return true;
      return Buffer2.compare(this, b5) === 0;
    };
    Buffer2.prototype.inspect = function inspect4() {
      var str = "";
      var max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      var x8 = thisEnd - thisStart;
      var y7 = end - start;
      var len = Math.min(x8, y7);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i6 = 0; i6 < len; ++i6) {
        if (thisCopy[i6] !== targetCopy[i6]) {
          x8 = thisCopy[i6];
          y7 = targetCopy[i6];
          break;
        }
      }
      if (x8 < y7) return -1;
      if (y7 < x8) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read2(buf, i7) {
        if (indexSize === 1) {
          return buf[i7];
        } else {
          return buf.readUInt16BE(i7 * indexSize);
        }
      }
      var i6;
      if (dir) {
        var foundIndex = -1;
        for (i6 = byteOffset; i6 < arrLength; i6++) {
          if (read2(arr, i6) === read2(val, foundIndex === -1 ? 0 : i6 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i6;
            if (i6 - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i6 -= i6 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i6 = byteOffset; i6 >= 0; i6--) {
          var found = true;
          for (var j5 = 0; j5 < valLength; j5++) {
            if (read2(arr, i6 + j5) !== read2(val, j5)) {
              found = false;
              break;
            }
          }
          if (found) return i6;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string3, offset, length2) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length2) {
        length2 = remaining;
      } else {
        length2 = Number(length2);
        if (length2 > remaining) {
          length2 = remaining;
        }
      }
      var strLen = string3.length;
      if (length2 > strLen / 2) {
        length2 = strLen / 2;
      }
      for (var i6 = 0; i6 < length2; ++i6) {
        var parsed = parseInt(string3.substr(i6 * 2, 2), 16);
        if (numberIsNaN(parsed)) return i6;
        buf[offset + i6] = parsed;
      }
      return i6;
    }
    function utf8Write(buf, string3, offset, length2) {
      return blitBuffer(utf8ToBytes(string3, buf.length - offset), buf, offset, length2);
    }
    function asciiWrite(buf, string3, offset, length2) {
      return blitBuffer(asciiToBytes(string3), buf, offset, length2);
    }
    function base64Write(buf, string3, offset, length2) {
      return blitBuffer(base64ToBytes(string3), buf, offset, length2);
    }
    function ucs2Write(buf, string3, offset, length2) {
      return blitBuffer(utf16leToBytes(string3, buf.length - offset), buf, offset, length2);
    }
    Buffer2.prototype.write = function write(string3, offset, length2, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length2 = this.length;
        offset = 0;
      } else if (length2 === void 0 && typeof offset === "string") {
        encoding = offset;
        length2 = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length2)) {
          length2 = length2 >>> 0;
          if (encoding === void 0) encoding = "utf8";
        } else {
          encoding = length2;
          length2 = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset;
      if (length2 === void 0 || length2 > remaining) length2 = remaining;
      if (string3.length > 0 && (length2 < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding) encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string3, offset, length2);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string3, offset, length2);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string3, offset, length2);
          case "base64":
            return base64Write(this, string3, offset, length2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string3, offset, length2);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON2() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base642.fromByteArray(buf);
      } else {
        return base642.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i6 = start;
      while (i6 < end) {
        var firstByte = buf[i6];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i6 + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i6 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i6 + 1];
              thirdByte = buf[i6 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i6 + 1];
              thirdByte = buf[i6 + 2];
              fourthByte = buf[i6 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i6 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i6 = 0;
      while (i6 < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i6, i6 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i6 = start; i6 < end; ++i6) {
        ret += String.fromCharCode(buf[i6] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i6 = start; i6 < end; ++i6) {
        ret += String.fromCharCode(buf[i6]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      var out = "";
      for (var i6 = start; i6 < end; ++i6) {
        out += hexSliceLookupTable[buf[i6]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = "";
      for (var i6 = 0; i6 < bytes.length - 1; i6 += 2) {
        res += String.fromCharCode(bytes[i6] + bytes[i6 + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      var newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length2) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length2) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul3 = 1;
      var i6 = 0;
      while (++i6 < byteLength2 && (mul3 *= 256)) {
        val += this[offset + i6] * mul3;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul3 = 1;
      while (byteLength2 > 0 && (mul3 *= 256)) {
        val += this[offset + --byteLength2] * mul3;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul3 = 1;
      var i6 = 0;
      while (++i6 < byteLength2 && (mul3 *= 256)) {
        val += this[offset + i6] * mul3;
      }
      mul3 *= 128;
      if (val >= mul3) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength2, this.length);
      var i6 = byteLength2;
      var mul3 = 1;
      var val = this[offset + --i6];
      while (i6 > 0 && (mul3 *= 256)) {
        val += this[offset + --i6] * mul3;
      }
      mul3 *= 128;
      if (val >= mul3) val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul3 = 1;
      var i6 = 0;
      this[offset] = value & 255;
      while (++i6 < byteLength2 && (mul3 *= 256)) {
        this[offset + i6] = value / mul3 & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i6 = byteLength2 - 1;
      var mul3 = 1;
      this[offset + i6] = value & 255;
      while (--i6 >= 0 && (mul3 *= 256)) {
        this[offset + i6] = value / mul3 & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i6 = 0;
      var mul3 = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i6 < byteLength2 && (mul3 *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i6 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i6] = (value / mul3 >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i6 = byteLength2 - 1;
      var mul3 = 1;
      var sub = 0;
      this[offset + i6] = value & 255;
      while (--i6 >= 0 && (mul3 *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i6 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i6] = (value / mul3 >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          var code2 = val.charCodeAt(0);
          if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      var i6;
      if (typeof val === "number") {
        for (i6 = start; i6 < end; ++i6) {
          this[i6] = val;
        }
      } else {
        var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i6 = 0; i6 < end - start; ++i6) {
          this[i6 + start] = bytes[i6 % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string3, units) {
      units = units || Infinity;
      var codePoint;
      var length2 = string3.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i6 = 0; i6 < length2; ++i6) {
        codePoint = string3.charCodeAt(i6);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i6 + 1 === length2) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      var byteArray = [];
      for (var i6 = 0; i6 < str.length; ++i6) {
        byteArray.push(str.charCodeAt(i6) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      var c7, hi2, lo2;
      var byteArray = [];
      for (var i6 = 0; i6 < str.length; ++i6) {
        if ((units -= 2) < 0) break;
        c7 = str.charCodeAt(i6);
        hi2 = c7 >> 8;
        lo2 = c7 % 256;
        byteArray.push(lo2);
        byteArray.push(hi2);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base642.toByteArray(base64clean(str));
    }
    function blitBuffer(src2, dst, offset, length2) {
      for (var i6 = 0; i6 < length2; ++i6) {
        if (i6 + offset >= dst.length || i6 >= src2.length) break;
        dst[i6 + offset] = src2[i6];
      }
      return i6;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      var alphabet2 = "0123456789abcdef";
      var table = new Array(256);
      for (var i6 = 0; i6 < 16; ++i6) {
        var i16 = i6 * 16;
        for (var j5 = 0; j5 < 16; ++j5) {
          table[i16 + j5] = alphabet2[i6] + alphabet2[j5];
        }
      }
      return table;
    }();
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/reed-solomon-encoder.js
var require_reed_solomon_encoder = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/reed-solomon-encoder.js"(exports, module) {
    var BufferUtil = require_typedarray_buffer();
    var Polynomial = require_polynomial();
    var Buffer2 = require_buffer2().Buffer;
    function ReedSolomonEncoder(degree) {
      this.genPoly = void 0;
      this.degree = degree;
      if (this.degree) this.initialize(this.degree);
    }
    ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
      this.degree = degree;
      this.genPoly = Polynomial.generateECPolynomial(this.degree);
    };
    ReedSolomonEncoder.prototype.encode = function encode8(data) {
      if (!this.genPoly) {
        throw new Error("Encoder not initialized");
      }
      var pad = BufferUtil.alloc(this.degree);
      var paddedData = Buffer2.concat([data, pad], data.length + this.degree);
      var remainder = Polynomial.mod(paddedData, this.genPoly);
      var start = this.degree - remainder.length;
      if (start > 0) {
        var buff = BufferUtil.alloc(this.degree);
        remainder.copy(buff, start);
        return buff;
      }
      return remainder;
    };
    module.exports = ReedSolomonEncoder;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/version-check.js
var require_version_check = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/version-check.js"(exports) {
    exports.isValid = function isValid(version12) {
      return !isNaN(version12) && version12 >= 1 && version12 <= 40;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/regex.js
var require_regex = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/regex.js"(exports) {
    var numeric = "[0-9]+";
    var alphanumeric = "[A-Z $%*+\\-./:]+";
    var kanji = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
    kanji = kanji.replace(/u/g, "\\u");
    var byte = "(?:(?![A-Z0-9 $%*+\\-./:]|" + kanji + ")(?:.|[\r\n]))+";
    exports.KANJI = new RegExp(kanji, "g");
    exports.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
    exports.BYTE = new RegExp(byte, "g");
    exports.NUMERIC = new RegExp(numeric, "g");
    exports.ALPHANUMERIC = new RegExp(alphanumeric, "g");
    var TEST_KANJI = new RegExp("^" + kanji + "$");
    var TEST_NUMERIC = new RegExp("^" + numeric + "$");
    var TEST_ALPHANUMERIC = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");
    exports.testKanji = function testKanji(str) {
      return TEST_KANJI.test(str);
    };
    exports.testNumeric = function testNumeric(str) {
      return TEST_NUMERIC.test(str);
    };
    exports.testAlphanumeric = function testAlphanumeric(str) {
      return TEST_ALPHANUMERIC.test(str);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/mode.js
var require_mode = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/mode.js"(exports) {
    var VersionCheck = require_version_check();
    var Regex = require_regex();
    exports.NUMERIC = {
      id: "Numeric",
      bit: 1 << 0,
      ccBits: [10, 12, 14]
    };
    exports.ALPHANUMERIC = {
      id: "Alphanumeric",
      bit: 1 << 1,
      ccBits: [9, 11, 13]
    };
    exports.BYTE = {
      id: "Byte",
      bit: 1 << 2,
      ccBits: [8, 16, 16]
    };
    exports.KANJI = {
      id: "Kanji",
      bit: 1 << 3,
      ccBits: [8, 10, 12]
    };
    exports.MIXED = {
      bit: -1
    };
    exports.getCharCountIndicator = function getCharCountIndicator(mode, version12) {
      if (!mode.ccBits) throw new Error("Invalid mode: " + mode);
      if (!VersionCheck.isValid(version12)) {
        throw new Error("Invalid version: " + version12);
      }
      if (version12 >= 1 && version12 < 10) return mode.ccBits[0];
      else if (version12 < 27) return mode.ccBits[1];
      return mode.ccBits[2];
    };
    exports.getBestModeForData = function getBestModeForData(dataStr) {
      if (Regex.testNumeric(dataStr)) return exports.NUMERIC;
      else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;
      else if (Regex.testKanji(dataStr)) return exports.KANJI;
      else return exports.BYTE;
    };
    exports.toString = function toString4(mode) {
      if (mode && mode.id) return mode.id;
      throw new Error("Invalid mode");
    };
    exports.isValid = function isValid(mode) {
      return mode && mode.bit && mode.ccBits;
    };
    function fromString4(string3) {
      if (typeof string3 !== "string") {
        throw new Error("Param is not a string");
      }
      var lcStr = string3.toLowerCase();
      switch (lcStr) {
        case "numeric":
          return exports.NUMERIC;
        case "alphanumeric":
          return exports.ALPHANUMERIC;
        case "kanji":
          return exports.KANJI;
        case "byte":
          return exports.BYTE;
        default:
          throw new Error("Unknown mode: " + string3);
      }
    }
    exports.from = function from3(value, defaultValue) {
      if (exports.isValid(value)) {
        return value;
      }
      try {
        return fromString4(value);
      } catch (e4) {
        return defaultValue;
      }
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/version.js
var require_version = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/version.js"(exports) {
    var Utils = require_utils();
    var ECCode = require_error_correction_code();
    var ECLevel = require_error_correction_level();
    var Mode = require_mode();
    var VersionCheck = require_version_check();
    var isArray = require_isarray();
    var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
    var G18_BCH = Utils.getBCHDigit(G18);
    function getBestVersionForDataLength(mode, length2, errorCorrectionLevel) {
      for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
        if (length2 <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    function getReservedBitsCount(mode, version12) {
      return Mode.getCharCountIndicator(mode, version12) + 4;
    }
    function getTotalBitsFromDataArray(segments, version12) {
      var totalBits = 0;
      segments.forEach(function(data) {
        var reservedBits = getReservedBitsCount(data.mode, version12);
        totalBits += reservedBits + data.getBitsLength();
      });
      return totalBits;
    }
    function getBestVersionForMixedData(segments, errorCorrectionLevel) {
      for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
        var length2 = getTotalBitsFromDataArray(segments, currentVersion);
        if (length2 <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    exports.from = function from3(value, defaultValue) {
      if (VersionCheck.isValid(value)) {
        return parseInt(value, 10);
      }
      return defaultValue;
    };
    exports.getCapacity = function getCapacity(version12, errorCorrectionLevel, mode) {
      if (!VersionCheck.isValid(version12)) {
        throw new Error("Invalid QR Code version");
      }
      if (typeof mode === "undefined") mode = Mode.BYTE;
      var totalCodewords = Utils.getSymbolTotalCodewords(version12);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version12, errorCorrectionLevel);
      var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (mode === Mode.MIXED) return dataTotalCodewordsBits;
      var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version12);
      switch (mode) {
        case Mode.NUMERIC:
          return Math.floor(usableBits / 10 * 3);
        case Mode.ALPHANUMERIC:
          return Math.floor(usableBits / 11 * 2);
        case Mode.KANJI:
          return Math.floor(usableBits / 13);
        case Mode.BYTE:
        default:
          return Math.floor(usableBits / 8);
      }
    };
    exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
      var seg;
      var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);
      if (isArray(data)) {
        if (data.length > 1) {
          return getBestVersionForMixedData(data, ecl);
        }
        if (data.length === 0) {
          return 1;
        }
        seg = data[0];
      } else {
        seg = data;
      }
      return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
    };
    exports.getEncodedBits = function getEncodedBits(version12) {
      if (!VersionCheck.isValid(version12) || version12 < 7) {
        throw new Error("Invalid QR Code version");
      }
      var d6 = version12 << 12;
      while (Utils.getBCHDigit(d6) - G18_BCH >= 0) {
        d6 ^= G18 << Utils.getBCHDigit(d6) - G18_BCH;
      }
      return version12 << 12 | d6;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/format-info.js
var require_format_info = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/format-info.js"(exports) {
    var Utils = require_utils();
    var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
    var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
    var G15_BCH = Utils.getBCHDigit(G15);
    exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
      var data = errorCorrectionLevel.bit << 3 | mask;
      var d6 = data << 10;
      while (Utils.getBCHDigit(d6) - G15_BCH >= 0) {
        d6 ^= G15 << Utils.getBCHDigit(d6) - G15_BCH;
      }
      return (data << 10 | d6) ^ G15_MASK;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/numeric-data.js
var require_numeric_data = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/numeric-data.js"(exports, module) {
    var Mode = require_mode();
    function NumericData(data) {
      this.mode = Mode.NUMERIC;
      this.data = data.toString();
    }
    NumericData.getBitsLength = function getBitsLength(length2) {
      return 10 * Math.floor(length2 / 3) + (length2 % 3 ? length2 % 3 * 3 + 1 : 0);
    };
    NumericData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    NumericData.prototype.getBitsLength = function getBitsLength() {
      return NumericData.getBitsLength(this.data.length);
    };
    NumericData.prototype.write = function write(bitBuffer) {
      var i6, group, value;
      for (i6 = 0; i6 + 3 <= this.data.length; i6 += 3) {
        group = this.data.substr(i6, 3);
        value = parseInt(group, 10);
        bitBuffer.put(value, 10);
      }
      var remainingNum = this.data.length - i6;
      if (remainingNum > 0) {
        group = this.data.substr(i6);
        value = parseInt(group, 10);
        bitBuffer.put(value, remainingNum * 3 + 1);
      }
    };
    module.exports = NumericData;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/alphanumeric-data.js
var require_alphanumeric_data = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/alphanumeric-data.js"(exports, module) {
    var Mode = require_mode();
    var ALPHA_NUM_CHARS = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      " ",
      "$",
      "%",
      "*",
      "+",
      "-",
      ".",
      "/",
      ":"
    ];
    function AlphanumericData(data) {
      this.mode = Mode.ALPHANUMERIC;
      this.data = data;
    }
    AlphanumericData.getBitsLength = function getBitsLength(length2) {
      return 11 * Math.floor(length2 / 2) + 6 * (length2 % 2);
    };
    AlphanumericData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    AlphanumericData.prototype.getBitsLength = function getBitsLength() {
      return AlphanumericData.getBitsLength(this.data.length);
    };
    AlphanumericData.prototype.write = function write(bitBuffer) {
      var i6;
      for (i6 = 0; i6 + 2 <= this.data.length; i6 += 2) {
        var value = ALPHA_NUM_CHARS.indexOf(this.data[i6]) * 45;
        value += ALPHA_NUM_CHARS.indexOf(this.data[i6 + 1]);
        bitBuffer.put(value, 11);
      }
      if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i6]), 6);
      }
    };
    module.exports = AlphanumericData;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/byte-data.js
var require_byte_data = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/byte-data.js"(exports, module) {
    var BufferUtil = require_typedarray_buffer();
    var Mode = require_mode();
    function ByteData(data) {
      this.mode = Mode.BYTE;
      this.data = BufferUtil.from(data);
    }
    ByteData.getBitsLength = function getBitsLength(length2) {
      return length2 * 8;
    };
    ByteData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    ByteData.prototype.getBitsLength = function getBitsLength() {
      return ByteData.getBitsLength(this.data.length);
    };
    ByteData.prototype.write = function(bitBuffer) {
      for (var i6 = 0, l7 = this.data.length; i6 < l7; i6++) {
        bitBuffer.put(this.data[i6], 8);
      }
    };
    module.exports = ByteData;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/kanji-data.js
var require_kanji_data = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/kanji-data.js"(exports, module) {
    var Mode = require_mode();
    var Utils = require_utils();
    function KanjiData(data) {
      this.mode = Mode.KANJI;
      this.data = data;
    }
    KanjiData.getBitsLength = function getBitsLength(length2) {
      return length2 * 13;
    };
    KanjiData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    KanjiData.prototype.getBitsLength = function getBitsLength() {
      return KanjiData.getBitsLength(this.data.length);
    };
    KanjiData.prototype.write = function(bitBuffer) {
      var i6;
      for (i6 = 0; i6 < this.data.length; i6++) {
        var value = Utils.toSJIS(this.data[i6]);
        if (value >= 33088 && value <= 40956) {
          value -= 33088;
        } else if (value >= 57408 && value <= 60351) {
          value -= 49472;
        } else {
          throw new Error(
            "Invalid SJIS character: " + this.data[i6] + "\nMake sure your charset is UTF-8"
          );
        }
        value = (value >>> 8 & 255) * 192 + (value & 255);
        bitBuffer.put(value, 13);
      }
    };
    module.exports = KanjiData;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/segments.js
var require_segments = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/segments.js"(exports) {
    var Mode = require_mode();
    var NumericData = require_numeric_data();
    var AlphanumericData = require_alphanumeric_data();
    var ByteData = require_byte_data();
    var KanjiData = require_kanji_data();
    var Regex = require_regex();
    var Utils = require_utils();
    var dijkstra = require_dijkstra();
    function getStringByteLength(str) {
      return unescape(encodeURIComponent(str)).length;
    }
    function getSegments(regex, mode, str) {
      var segments = [];
      var result;
      while ((result = regex.exec(str)) !== null) {
        segments.push({
          data: result[0],
          index: result.index,
          mode,
          length: result[0].length
        });
      }
      return segments;
    }
    function getSegmentsFromString(dataStr) {
      var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
      var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
      var byteSegs;
      var kanjiSegs;
      if (Utils.isKanjiModeEnabled()) {
        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
      } else {
        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
        kanjiSegs = [];
      }
      var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
      return segs.sort(function(s1, s22) {
        return s1.index - s22.index;
      }).map(function(obj) {
        return {
          data: obj.data,
          mode: obj.mode,
          length: obj.length
        };
      });
    }
    function getSegmentBitsLength(length2, mode) {
      switch (mode) {
        case Mode.NUMERIC:
          return NumericData.getBitsLength(length2);
        case Mode.ALPHANUMERIC:
          return AlphanumericData.getBitsLength(length2);
        case Mode.KANJI:
          return KanjiData.getBitsLength(length2);
        case Mode.BYTE:
          return ByteData.getBitsLength(length2);
      }
    }
    function mergeSegments(segs) {
      return segs.reduce(function(acc, curr) {
        var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
        if (prevSeg && prevSeg.mode === curr.mode) {
          acc[acc.length - 1].data += curr.data;
          return acc;
        }
        acc.push(curr);
        return acc;
      }, []);
    }
    function buildNodes(segs) {
      var nodes = [];
      for (var i6 = 0; i6 < segs.length; i6++) {
        var seg = segs[i6];
        switch (seg.mode) {
          case Mode.NUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.ALPHANUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.KANJI:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
            break;
          case Mode.BYTE:
            nodes.push([
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
        }
      }
      return nodes;
    }
    function buildGraph(nodes, version12) {
      var table = {};
      var graph = { "start": {} };
      var prevNodeIds = ["start"];
      for (var i6 = 0; i6 < nodes.length; i6++) {
        var nodeGroup = nodes[i6];
        var currentNodeIds = [];
        for (var j5 = 0; j5 < nodeGroup.length; j5++) {
          var node = nodeGroup[j5];
          var key2 = "" + i6 + j5;
          currentNodeIds.push(key2);
          table[key2] = { node, lastCount: 0 };
          graph[key2] = {};
          for (var n6 = 0; n6 < prevNodeIds.length; n6++) {
            var prevNodeId = prevNodeIds[n6];
            if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
              graph[prevNodeId][key2] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);
              table[prevNodeId].lastCount += node.length;
            } else {
              if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;
              graph[prevNodeId][key2] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version12);
            }
          }
        }
        prevNodeIds = currentNodeIds;
      }
      for (n6 = 0; n6 < prevNodeIds.length; n6++) {
        graph[prevNodeIds[n6]]["end"] = 0;
      }
      return { map: graph, table };
    }
    function buildSingleSegment(data, modesHint) {
      var mode;
      var bestMode = Mode.getBestModeForData(data);
      mode = Mode.from(modesHint, bestMode);
      if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
        throw new Error('"' + data + '" cannot be encoded with mode ' + Mode.toString(mode) + ".\n Suggested mode is: " + Mode.toString(bestMode));
      }
      if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
        mode = Mode.BYTE;
      }
      switch (mode) {
        case Mode.NUMERIC:
          return new NumericData(data);
        case Mode.ALPHANUMERIC:
          return new AlphanumericData(data);
        case Mode.KANJI:
          return new KanjiData(data);
        case Mode.BYTE:
          return new ByteData(data);
      }
    }
    exports.fromArray = function fromArray(array) {
      return array.reduce(function(acc, seg) {
        if (typeof seg === "string") {
          acc.push(buildSingleSegment(seg, null));
        } else if (seg.data) {
          acc.push(buildSingleSegment(seg.data, seg.mode));
        }
        return acc;
      }, []);
    };
    exports.fromString = function fromString4(data, version12) {
      var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
      var nodes = buildNodes(segs);
      var graph = buildGraph(nodes, version12);
      var path = dijkstra.find_path(graph.map, "start", "end");
      var optimizedSegs = [];
      for (var i6 = 1; i6 < path.length - 1; i6++) {
        optimizedSegs.push(graph.table[path[i6]].node);
      }
      return exports.fromArray(mergeSegments(optimizedSegs));
    };
    exports.rawSplit = function rawSplit(data) {
      return exports.fromArray(
        getSegmentsFromString(data, Utils.isKanjiModeEnabled())
      );
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/qrcode.js
var require_qrcode = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/qrcode.js"(exports) {
    var BufferUtil = require_typedarray_buffer();
    var Utils = require_utils();
    var ECLevel = require_error_correction_level();
    var BitBuffer = require_bit_buffer();
    var BitMatrix = require_bit_matrix();
    var AlignmentPattern = require_alignment_pattern();
    var FinderPattern = require_finder_pattern();
    var MaskPattern = require_mask_pattern();
    var ECCode = require_error_correction_code();
    var ReedSolomonEncoder = require_reed_solomon_encoder();
    var Version = require_version();
    var FormatInfo = require_format_info();
    var Mode = require_mode();
    var Segments = require_segments();
    var isArray = require_isarray();
    function setupFinderPattern(matrix, version12) {
      var size = matrix.size;
      var pos = FinderPattern.getPositions(version12);
      for (var i6 = 0; i6 < pos.length; i6++) {
        var row = pos[i6][0];
        var col = pos[i6][1];
        for (var r6 = -1; r6 <= 7; r6++) {
          if (row + r6 <= -1 || size <= row + r6) continue;
          for (var c7 = -1; c7 <= 7; c7++) {
            if (col + c7 <= -1 || size <= col + c7) continue;
            if (r6 >= 0 && r6 <= 6 && (c7 === 0 || c7 === 6) || c7 >= 0 && c7 <= 6 && (r6 === 0 || r6 === 6) || r6 >= 2 && r6 <= 4 && c7 >= 2 && c7 <= 4) {
              matrix.set(row + r6, col + c7, true, true);
            } else {
              matrix.set(row + r6, col + c7, false, true);
            }
          }
        }
      }
    }
    function setupTimingPattern(matrix) {
      var size = matrix.size;
      for (var r6 = 8; r6 < size - 8; r6++) {
        var value = r6 % 2 === 0;
        matrix.set(r6, 6, value, true);
        matrix.set(6, r6, value, true);
      }
    }
    function setupAlignmentPattern(matrix, version12) {
      var pos = AlignmentPattern.getPositions(version12);
      for (var i6 = 0; i6 < pos.length; i6++) {
        var row = pos[i6][0];
        var col = pos[i6][1];
        for (var r6 = -2; r6 <= 2; r6++) {
          for (var c7 = -2; c7 <= 2; c7++) {
            if (r6 === -2 || r6 === 2 || c7 === -2 || c7 === 2 || r6 === 0 && c7 === 0) {
              matrix.set(row + r6, col + c7, true, true);
            } else {
              matrix.set(row + r6, col + c7, false, true);
            }
          }
        }
      }
    }
    function setupVersionInfo(matrix, version12) {
      var size = matrix.size;
      var bits = Version.getEncodedBits(version12);
      var row, col, mod;
      for (var i6 = 0; i6 < 18; i6++) {
        row = Math.floor(i6 / 3);
        col = i6 % 3 + size - 8 - 3;
        mod = (bits >> i6 & 1) === 1;
        matrix.set(row, col, mod, true);
        matrix.set(col, row, mod, true);
      }
    }
    function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
      var size = matrix.size;
      var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
      var i6, mod;
      for (i6 = 0; i6 < 15; i6++) {
        mod = (bits >> i6 & 1) === 1;
        if (i6 < 6) {
          matrix.set(i6, 8, mod, true);
        } else if (i6 < 8) {
          matrix.set(i6 + 1, 8, mod, true);
        } else {
          matrix.set(size - 15 + i6, 8, mod, true);
        }
        if (i6 < 8) {
          matrix.set(8, size - i6 - 1, mod, true);
        } else if (i6 < 9) {
          matrix.set(8, 15 - i6 - 1 + 1, mod, true);
        } else {
          matrix.set(8, 15 - i6 - 1, mod, true);
        }
      }
      matrix.set(size - 8, 8, 1, true);
    }
    function setupData(matrix, data) {
      var size = matrix.size;
      var inc = -1;
      var row = size - 1;
      var bitIndex = 7;
      var byteIndex = 0;
      for (var col = size - 1; col > 0; col -= 2) {
        if (col === 6) col--;
        while (true) {
          for (var c7 = 0; c7 < 2; c7++) {
            if (!matrix.isReserved(row, col - c7)) {
              var dark = false;
              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) === 1;
              }
              matrix.set(row, col - c7, dark);
              bitIndex--;
              if (bitIndex === -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }
          row += inc;
          if (row < 0 || size <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    }
    function createData(version12, errorCorrectionLevel, segments) {
      var buffer = new BitBuffer();
      segments.forEach(function(data) {
        buffer.put(data.mode.bit, 4);
        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version12));
        data.write(buffer);
      });
      var totalCodewords = Utils.getSymbolTotalCodewords(version12);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version12, errorCorrectionLevel);
      var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer.put(0, 4);
      }
      while (buffer.getLengthInBits() % 8 !== 0) {
        buffer.putBit(0);
      }
      var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
      for (var i6 = 0; i6 < remainingByte; i6++) {
        buffer.put(i6 % 2 ? 17 : 236, 8);
      }
      return createCodewords(buffer, version12, errorCorrectionLevel);
    }
    function createCodewords(bitBuffer, version12, errorCorrectionLevel) {
      var totalCodewords = Utils.getSymbolTotalCodewords(version12);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version12, errorCorrectionLevel);
      var dataTotalCodewords = totalCodewords - ecTotalCodewords;
      var ecTotalBlocks = ECCode.getBlocksCount(version12, errorCorrectionLevel);
      var blocksInGroup2 = totalCodewords % ecTotalBlocks;
      var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
      var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
      var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
      var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;
      var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;
      var rs = new ReedSolomonEncoder(ecCount);
      var offset = 0;
      var dcData = new Array(ecTotalBlocks);
      var ecData = new Array(ecTotalBlocks);
      var maxDataSize = 0;
      var buffer = BufferUtil.from(bitBuffer.buffer);
      for (var b5 = 0; b5 < ecTotalBlocks; b5++) {
        var dataSize = b5 < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;
        dcData[b5] = buffer.slice(offset, offset + dataSize);
        ecData[b5] = rs.encode(dcData[b5]);
        offset += dataSize;
        maxDataSize = Math.max(maxDataSize, dataSize);
      }
      var data = BufferUtil.alloc(totalCodewords);
      var index = 0;
      var i6, r6;
      for (i6 = 0; i6 < maxDataSize; i6++) {
        for (r6 = 0; r6 < ecTotalBlocks; r6++) {
          if (i6 < dcData[r6].length) {
            data[index++] = dcData[r6][i6];
          }
        }
      }
      for (i6 = 0; i6 < ecCount; i6++) {
        for (r6 = 0; r6 < ecTotalBlocks; r6++) {
          data[index++] = ecData[r6][i6];
        }
      }
      return data;
    }
    function createSymbol(data, version12, errorCorrectionLevel, maskPattern) {
      var segments;
      if (isArray(data)) {
        segments = Segments.fromArray(data);
      } else if (typeof data === "string") {
        var estimatedVersion = version12;
        if (!estimatedVersion) {
          var rawSegments = Segments.rawSplit(data);
          estimatedVersion = Version.getBestVersionForData(
            rawSegments,
            errorCorrectionLevel
          );
        }
        segments = Segments.fromString(data, estimatedVersion || 40);
      } else {
        throw new Error("Invalid data");
      }
      var bestVersion = Version.getBestVersionForData(
        segments,
        errorCorrectionLevel
      );
      if (!bestVersion) {
        throw new Error("The amount of data is too big to be stored in a QR Code");
      }
      if (!version12) {
        version12 = bestVersion;
      } else if (version12 < bestVersion) {
        throw new Error(
          "\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + bestVersion + ".\n"
        );
      }
      var dataBits = createData(version12, errorCorrectionLevel, segments);
      var moduleCount = Utils.getSymbolSize(version12);
      var modules = new BitMatrix(moduleCount);
      setupFinderPattern(modules, version12);
      setupTimingPattern(modules);
      setupAlignmentPattern(modules, version12);
      setupFormatInfo(modules, errorCorrectionLevel, 0);
      if (version12 >= 7) {
        setupVersionInfo(modules, version12);
      }
      setupData(modules, dataBits);
      if (isNaN(maskPattern)) {
        maskPattern = MaskPattern.getBestMask(
          modules,
          setupFormatInfo.bind(null, modules, errorCorrectionLevel)
        );
      }
      MaskPattern.applyMask(maskPattern, modules);
      setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
      return {
        modules,
        version: version12,
        errorCorrectionLevel,
        maskPattern,
        segments
      };
    }
    exports.create = function create2(data, options) {
      if (typeof data === "undefined" || data === "") {
        throw new Error("No input text");
      }
      var errorCorrectionLevel = ECLevel.M;
      var version12;
      var mask;
      if (typeof options !== "undefined") {
        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
        version12 = Version.from(options.version);
        mask = MaskPattern.from(options.maskPattern);
        if (options.toSJISFunc) {
          Utils.setToSJISFunction(options.toSJISFunc);
        }
      }
      return createSymbol(data, version12, errorCorrectionLevel, mask);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/utils.js
var require_utils2 = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/utils.js"(exports) {
    function hex2rgba(hex) {
      if (typeof hex === "number") {
        hex = hex.toString();
      }
      if (typeof hex !== "string") {
        throw new Error("Color should be defined as hex string");
      }
      var hexCode = hex.slice().replace("#", "").split("");
      if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
        throw new Error("Invalid hex color: " + hex);
      }
      if (hexCode.length === 3 || hexCode.length === 4) {
        hexCode = Array.prototype.concat.apply([], hexCode.map(function(c7) {
          return [c7, c7];
        }));
      }
      if (hexCode.length === 6) hexCode.push("F", "F");
      var hexValue = parseInt(hexCode.join(""), 16);
      return {
        r: hexValue >> 24 & 255,
        g: hexValue >> 16 & 255,
        b: hexValue >> 8 & 255,
        a: hexValue & 255,
        hex: "#" + hexCode.slice(0, 6).join("")
      };
    }
    exports.getOptions = function getOptions(options) {
      if (!options) options = {};
      if (!options.color) options.color = {};
      var margin = typeof options.margin === "undefined" || options.margin === null || options.margin < 0 ? 4 : options.margin;
      var width = options.width && options.width >= 21 ? options.width : void 0;
      var scale = options.scale || 4;
      return {
        width,
        scale: width ? 4 : scale,
        margin,
        color: {
          dark: hex2rgba(options.color.dark || "#000000ff"),
          light: hex2rgba(options.color.light || "#ffffffff")
        },
        type: options.type,
        rendererOpts: options.rendererOpts || {}
      };
    };
    exports.getScale = function getScale(qrSize, opts) {
      return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
    };
    exports.getImageWidth = function getImageWidth(qrSize, opts) {
      var scale = exports.getScale(qrSize, opts);
      return Math.floor((qrSize + opts.margin * 2) * scale);
    };
    exports.qrToImageData = function qrToImageData(imgData, qr2, opts) {
      var size = qr2.modules.size;
      var data = qr2.modules.data;
      var scale = exports.getScale(size, opts);
      var symbolSize = Math.floor((size + opts.margin * 2) * scale);
      var scaledMargin = opts.margin * scale;
      var palette = [opts.color.light, opts.color.dark];
      for (var i6 = 0; i6 < symbolSize; i6++) {
        for (var j5 = 0; j5 < symbolSize; j5++) {
          var posDst = (i6 * symbolSize + j5) * 4;
          var pxColor = opts.color.light;
          if (i6 >= scaledMargin && j5 >= scaledMargin && i6 < symbolSize - scaledMargin && j5 < symbolSize - scaledMargin) {
            var iSrc = Math.floor((i6 - scaledMargin) / scale);
            var jSrc = Math.floor((j5 - scaledMargin) / scale);
            pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
          }
          imgData[posDst++] = pxColor.r;
          imgData[posDst++] = pxColor.g;
          imgData[posDst++] = pxColor.b;
          imgData[posDst] = pxColor.a;
        }
      }
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/canvas.js
var require_canvas = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/canvas.js"(exports) {
    var Utils = require_utils2();
    function clearCanvas(ctx, canvas, size) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (!canvas.style) canvas.style = {};
      canvas.height = size;
      canvas.width = size;
      canvas.style.height = size + "px";
      canvas.style.width = size + "px";
    }
    function getCanvasElement() {
      try {
        return document.createElement("canvas");
      } catch (e4) {
        throw new Error("You need to specify a canvas element");
      }
    }
    exports.render = function render(qrData, canvas, options) {
      var opts = options;
      var canvasEl = canvas;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!canvas) {
        canvasEl = getCanvasElement();
      }
      opts = Utils.getOptions(opts);
      var size = Utils.getImageWidth(qrData.modules.size, opts);
      var ctx = canvasEl.getContext("2d");
      var image = ctx.createImageData(size, size);
      Utils.qrToImageData(image.data, qrData, opts);
      clearCanvas(ctx, canvasEl, size);
      ctx.putImageData(image, 0, 0);
      return canvasEl;
    };
    exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
      var opts = options;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!opts) opts = {};
      var canvasEl = exports.render(qrData, canvas, opts);
      var type = opts.type || "image/png";
      var rendererOpts = opts.rendererOpts || {};
      return canvasEl.toDataURL(type, rendererOpts.quality);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/svg-tag.js
var require_svg_tag = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/svg-tag.js"(exports) {
    var Utils = require_utils2();
    function getColorAttrib(color, attrib) {
      var alpha = color.a / 255;
      var str = attrib + '="' + color.hex + '"';
      return alpha < 1 ? str + " " + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
    }
    function svgCmd(cmd, x8, y7) {
      var str = cmd + x8;
      if (typeof y7 !== "undefined") str += " " + y7;
      return str;
    }
    function qrToPath(data, size, margin) {
      var path = "";
      var moveBy = 0;
      var newRow = false;
      var lineLength = 0;
      for (var i6 = 0; i6 < data.length; i6++) {
        var col = Math.floor(i6 % size);
        var row = Math.floor(i6 / size);
        if (!col && !newRow) newRow = true;
        if (data[i6]) {
          lineLength++;
          if (!(i6 > 0 && col > 0 && data[i6 - 1])) {
            path += newRow ? svgCmd("M", col + margin, 0.5 + row + margin) : svgCmd("m", moveBy, 0);
            moveBy = 0;
            newRow = false;
          }
          if (!(col + 1 < size && data[i6 + 1])) {
            path += svgCmd("h", lineLength);
            lineLength = 0;
          }
        } else {
          moveBy++;
        }
      }
      return path;
    }
    exports.render = function render(qrData, options, cb) {
      var opts = Utils.getOptions(options);
      var size = qrData.modules.size;
      var data = qrData.modules.data;
      var qrcodesize = size + opts.margin * 2;
      var bg = !opts.color.light.a ? "" : "<path " + getColorAttrib(opts.color.light, "fill") + ' d="M0 0h' + qrcodesize + "v" + qrcodesize + 'H0z"/>';
      var path = "<path " + getColorAttrib(opts.color.dark, "stroke") + ' d="' + qrToPath(data, size, opts.margin) + '"/>';
      var viewBox = 'viewBox="0 0 ' + qrcodesize + " " + qrcodesize + '"';
      var width = !opts.width ? "" : 'width="' + opts.width + '" height="' + opts.width + '" ';
      var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + "</svg>\n";
      if (typeof cb === "function") {
        cb(null, svgTag);
      }
      return svgTag;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/browser.js
var require_browser = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/browser.js"(exports) {
    var canPromise = require_can_promise();
    var QRCode = require_qrcode();
    var CanvasRenderer = require_canvas();
    var SvgRenderer = require_svg_tag();
    function renderCanvas(renderFunc, canvas, text, opts, cb) {
      var args = [].slice.call(arguments, 1);
      var argsNum = args.length;
      var isLastArgCb = typeof args[argsNum - 1] === "function";
      if (!isLastArgCb && !canPromise()) {
        throw new Error("Callback required as last argument");
      }
      if (isLastArgCb) {
        if (argsNum < 2) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 2) {
          cb = text;
          text = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 3) {
          if (canvas.getContext && typeof cb === "undefined") {
            cb = opts;
            opts = void 0;
          } else {
            cb = opts;
            opts = text;
            text = canvas;
            canvas = void 0;
          }
        }
      } else {
        if (argsNum < 1) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 1) {
          text = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 2 && !canvas.getContext) {
          opts = text;
          text = canvas;
          canvas = void 0;
        }
        return new Promise(function(resolve, reject) {
          try {
            var data2 = QRCode.create(text, opts);
            resolve(renderFunc(data2, canvas, opts));
          } catch (e4) {
            reject(e4);
          }
        });
      }
      try {
        var data = QRCode.create(text, opts);
        cb(null, renderFunc(data, canvas, opts));
      } catch (e4) {
        cb(e4);
      }
    }
    exports.create = QRCode.create;
    exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
    exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);
    exports.toString = renderCanvas.bind(null, function(data, _8, opts) {
      return SvgRenderer.render(data, opts);
    });
  }
});

// node_modules/toggle-selection/index.js
var require_toggle_selection = __commonJS({
  "node_modules/toggle-selection/index.js"(exports, module) {
    module.exports = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i6 = 0; i6 < selection.rangeCount; i6++) {
        ranges.push(selection.getRangeAt(i6));
      }
      switch (active.tagName.toUpperCase()) {
        // .toUpperCase handles XHTML
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range) {
            selection.addRange(range);
          });
        }
        active && active.focus();
      };
    };
  }
});

// node_modules/copy-to-clipboard/index.js
var require_copy_to_clipboard = __commonJS({
  "node_modules/copy-to-clipboard/index.js"(exports, module) {
    "use strict";
    var deselectCurrent = require_toggle_selection();
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy(text, options) {
      var debug, message, reselectPrevious, range, selection, mark, success = false;
      if (!options) {
        options = {};
      }
      debug = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        mark.ariaHidden = "true";
        mark.style.all = "unset";
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        mark.style.whiteSpace = "pre";
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e4) {
          e4.stopPropagation();
          if (options.format) {
            e4.preventDefault();
            if (typeof e4.clipboardData === "undefined") {
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format2, text);
            } else {
              e4.clipboardData.clearData();
              e4.clipboardData.setData(options.format, text);
            }
          }
          if (options.onCopy) {
            e4.preventDefault();
            options.onCopy(e4.clipboardData);
          }
        });
        document.body.appendChild(mark);
        range.selectNodeContents(mark);
        selection.addRange(range);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug && console.error("unable to copy using clipboardData: ", err2);
          debug && console.error("falling back to prompt");
          message = format("message" in options ? options.message : defaultMessage);
          window.prompt(message, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }
      return success;
    }
    module.exports = copy;
  }
});

// node_modules/preact/dist/preact.module.js
function a(n6, l7) {
  for (var u4 in l7) n6[u4] = l7[u4];
  return n6;
}
function v(n6) {
  var l7 = n6.parentNode;
  l7 && l7.removeChild(n6);
}
function h(n6, l7, u4) {
  var i6, t3 = arguments, r6 = {};
  for (i6 in l7) "key" !== i6 && "ref" !== i6 && (r6[i6] = l7[i6]);
  if (arguments.length > 3) for (u4 = [u4], i6 = 3; i6 < arguments.length; i6++) u4.push(t3[i6]);
  if (null != u4 && (r6.children = u4), "function" == typeof n6 && null != n6.defaultProps) for (i6 in n6.defaultProps) void 0 === r6[i6] && (r6[i6] = n6.defaultProps[i6]);
  return p(n6, r6, l7 && l7.key, l7 && l7.ref, null);
}
function p(l7, u4, i6, t3, r6) {
  var o6 = { type: l7, props: u4, key: i6, ref: t3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: r6 };
  return null == r6 && (o6.__v = o6), n.vnode && n.vnode(o6), o6;
}
function y() {
  return {};
}
function d(n6) {
  return n6.children;
}
function m(n6, l7) {
  this.props = n6, this.context = l7;
}
function w(n6, l7) {
  if (null == l7) return n6.__ ? w(n6.__, n6.__.__k.indexOf(n6) + 1) : null;
  for (var u4; l7 < n6.__k.length; l7++) if (null != (u4 = n6.__k[l7]) && null != u4.__e) return u4.__e;
  return "function" == typeof n6.type ? w(n6) : null;
}
function k(n6) {
  var l7, u4;
  if (null != (n6 = n6.__) && null != n6.__c) {
    for (n6.__e = n6.__c.base = null, l7 = 0; l7 < n6.__k.length; l7++) if (null != (u4 = n6.__k[l7]) && null != u4.__e) {
      n6.__e = n6.__c.base = u4.__e;
      break;
    }
    return k(n6);
  }
}
function g(l7) {
  (!l7.__d && (l7.__d = true) && u.push(l7) && !i++ || r !== n.debounceRendering) && ((r = n.debounceRendering) || t)(_);
}
function _() {
  for (var n6; i = u.length; ) n6 = u.sort(function(n7, l7) {
    return n7.__v.__b - l7.__v.__b;
  }), u = [], n6.some(function(n7) {
    var l7, u4, i6, t3, r6, o6, f5;
    n7.__d && (o6 = (r6 = (l7 = n7).__v).__e, (f5 = l7.__P) && (u4 = [], (i6 = a({}, r6)).__v = i6, t3 = A(f5, r6, i6, l7.__n, void 0 !== f5.ownerSVGElement, null, u4, null == o6 ? w(r6) : o6), T(u4, r6), t3 != o6 && k(r6)));
  });
}
function b(n6, l7, u4, i6, t3, r6, o6, f5, s5) {
  var a5, h7, p5, y7, d6, m4, k7, g7 = u4 && u4.__k || c, _8 = g7.length;
  if (f5 == e && (f5 = null != r6 ? r6[0] : _8 ? w(u4, 0) : null), a5 = 0, l7.__k = x(l7.__k, function(u5) {
    if (null != u5) {
      if (u5.__ = l7, u5.__b = l7.__b + 1, null === (p5 = g7[a5]) || p5 && u5.key == p5.key && u5.type === p5.type) g7[a5] = void 0;
      else for (h7 = 0; h7 < _8; h7++) {
        if ((p5 = g7[h7]) && u5.key == p5.key && u5.type === p5.type) {
          g7[h7] = void 0;
          break;
        }
        p5 = null;
      }
      if (y7 = A(n6, u5, p5 = p5 || e, i6, t3, r6, o6, f5, s5), (h7 = u5.ref) && p5.ref != h7 && (k7 || (k7 = []), p5.ref && k7.push(p5.ref, null, u5), k7.push(h7, u5.__c || y7, u5)), null != y7) {
        var c7;
        if (null == m4 && (m4 = y7), void 0 !== u5.__d) c7 = u5.__d, u5.__d = void 0;
        else if (r6 == p5 || y7 != f5 || null == y7.parentNode) {
          n: if (null == f5 || f5.parentNode !== n6) n6.appendChild(y7), c7 = null;
          else {
            for (d6 = f5, h7 = 0; (d6 = d6.nextSibling) && h7 < _8; h7 += 2) if (d6 == y7) break n;
            n6.insertBefore(y7, f5), c7 = f5;
          }
          "option" == l7.type && (n6.value = "");
        }
        f5 = void 0 !== c7 ? c7 : y7.nextSibling, "function" == typeof l7.type && (l7.__d = f5);
      } else f5 && p5.__e == f5 && f5.parentNode != n6 && (f5 = w(p5));
    }
    return a5++, u5;
  }), l7.__e = m4, null != r6 && "function" != typeof l7.type) for (a5 = r6.length; a5--; ) null != r6[a5] && v(r6[a5]);
  for (a5 = _8; a5--; ) null != g7[a5] && D(g7[a5], g7[a5]);
  if (k7) for (a5 = 0; a5 < k7.length; a5++) j(k7[a5], k7[++a5], k7[++a5]);
}
function x(n6, l7, u4) {
  if (null == u4 && (u4 = []), null == n6 || "boolean" == typeof n6) l7 && u4.push(l7(null));
  else if (Array.isArray(n6)) for (var i6 = 0; i6 < n6.length; i6++) x(n6[i6], l7, u4);
  else u4.push(l7 ? l7("string" == typeof n6 || "number" == typeof n6 ? p(null, n6, null, null, n6) : null != n6.__e || null != n6.__c ? p(n6.type, n6.props, n6.key, null, n6.__v) : n6) : n6);
  return u4;
}
function P(n6, l7, u4, i6, t3) {
  var r6;
  for (r6 in u4) "children" === r6 || "key" === r6 || r6 in l7 || N(n6, r6, null, u4[r6], i6);
  for (r6 in l7) t3 && "function" != typeof l7[r6] || "children" === r6 || "key" === r6 || "value" === r6 || "checked" === r6 || u4[r6] === l7[r6] || N(n6, r6, l7[r6], u4[r6], i6);
}
function C(n6, l7, u4) {
  "-" === l7[0] ? n6.setProperty(l7, u4) : n6[l7] = "number" == typeof u4 && false === s.test(l7) ? u4 + "px" : null == u4 ? "" : u4;
}
function N(n6, l7, u4, i6, t3) {
  var r6, o6, f5, e4, c7;
  if (t3 ? "className" === l7 && (l7 = "class") : "class" === l7 && (l7 = "className"), "style" === l7) if (r6 = n6.style, "string" == typeof u4) r6.cssText = u4;
  else {
    if ("string" == typeof i6 && (r6.cssText = "", i6 = null), i6) for (e4 in i6) u4 && e4 in u4 || C(r6, e4, "");
    if (u4) for (c7 in u4) i6 && u4[c7] === i6[c7] || C(r6, c7, u4[c7]);
  }
  else "o" === l7[0] && "n" === l7[1] ? (o6 = l7 !== (l7 = l7.replace(/Capture$/, "")), f5 = l7.toLowerCase(), l7 = (f5 in n6 ? f5 : l7).slice(2), u4 ? (i6 || n6.addEventListener(l7, z, o6), (n6.l || (n6.l = {}))[l7] = u4) : n6.removeEventListener(l7, z, o6)) : "list" !== l7 && "tagName" !== l7 && "form" !== l7 && "type" !== l7 && "size" !== l7 && !t3 && l7 in n6 ? n6[l7] = null == u4 ? "" : u4 : "function" != typeof u4 && "dangerouslySetInnerHTML" !== l7 && (l7 !== (l7 = l7.replace(/^xlink:?/, "")) ? null == u4 || false === u4 ? n6.removeAttributeNS("http://www.w3.org/1999/xlink", l7.toLowerCase()) : n6.setAttributeNS("http://www.w3.org/1999/xlink", l7.toLowerCase(), u4) : null == u4 || false === u4 && !/^ar/.test(l7) ? n6.removeAttribute(l7) : n6.setAttribute(l7, u4));
}
function z(l7) {
  this.l[l7.type](n.event ? n.event(l7) : l7);
}
function A(l7, u4, i6, t3, r6, o6, f5, e4, c7) {
  var s5, v8, h7, p5, y7, w6, k7, g7, _8, x8, P4 = u4.type;
  if (void 0 !== u4.constructor) return null;
  (s5 = n.__b) && s5(u4);
  try {
    n: if ("function" == typeof P4) {
      if (g7 = u4.props, _8 = (s5 = P4.contextType) && t3[s5.__c], x8 = s5 ? _8 ? _8.props.value : s5.__ : t3, i6.__c ? k7 = (v8 = u4.__c = i6.__c).__ = v8.__E : ("prototype" in P4 && P4.prototype.render ? u4.__c = v8 = new P4(g7, x8) : (u4.__c = v8 = new m(g7, x8), v8.constructor = P4, v8.render = E), _8 && _8.sub(v8), v8.props = g7, v8.state || (v8.state = {}), v8.context = x8, v8.__n = t3, h7 = v8.__d = true, v8.__h = []), null == v8.__s && (v8.__s = v8.state), null != P4.getDerivedStateFromProps && (v8.__s == v8.state && (v8.__s = a({}, v8.__s)), a(v8.__s, P4.getDerivedStateFromProps(g7, v8.__s))), p5 = v8.props, y7 = v8.state, h7) null == P4.getDerivedStateFromProps && null != v8.componentWillMount && v8.componentWillMount(), null != v8.componentDidMount && v8.__h.push(v8.componentDidMount);
      else {
        if (null == P4.getDerivedStateFromProps && g7 !== p5 && null != v8.componentWillReceiveProps && v8.componentWillReceiveProps(g7, x8), !v8.__e && null != v8.shouldComponentUpdate && false === v8.shouldComponentUpdate(g7, v8.__s, x8) || u4.__v === i6.__v && !v8.__) {
          for (v8.props = g7, v8.state = v8.__s, u4.__v !== i6.__v && (v8.__d = false), v8.__v = u4, u4.__e = i6.__e, u4.__k = i6.__k, v8.__h.length && f5.push(v8), s5 = 0; s5 < u4.__k.length; s5++) u4.__k[s5] && (u4.__k[s5].__ = u4);
          break n;
        }
        null != v8.componentWillUpdate && v8.componentWillUpdate(g7, v8.__s, x8), null != v8.componentDidUpdate && v8.__h.push(function() {
          v8.componentDidUpdate(p5, y7, w6);
        });
      }
      v8.context = x8, v8.props = g7, v8.state = v8.__s, (s5 = n.__r) && s5(u4), v8.__d = false, v8.__v = u4, v8.__P = l7, s5 = v8.render(v8.props, v8.state, v8.context), u4.__k = null != s5 && s5.type == d && null == s5.key ? s5.props.children : Array.isArray(s5) ? s5 : [s5], null != v8.getChildContext && (t3 = a(a({}, t3), v8.getChildContext())), h7 || null == v8.getSnapshotBeforeUpdate || (w6 = v8.getSnapshotBeforeUpdate(p5, y7)), b(l7, u4, i6, t3, r6, o6, f5, e4, c7), v8.base = u4.__e, v8.__h.length && f5.push(v8), k7 && (v8.__E = v8.__ = null), v8.__e = false;
    } else null == o6 && u4.__v === i6.__v ? (u4.__k = i6.__k, u4.__e = i6.__e) : u4.__e = $(i6.__e, u4, i6, t3, r6, o6, f5, c7);
    (s5 = n.diffed) && s5(u4);
  } catch (l8) {
    u4.__v = null, n.__e(l8, u4, i6);
  }
  return u4.__e;
}
function T(l7, u4) {
  n.__c && n.__c(u4, l7), l7.some(function(u5) {
    try {
      l7 = u5.__h, u5.__h = [], l7.some(function(n6) {
        n6.call(u5);
      });
    } catch (l8) {
      n.__e(l8, u5.__v);
    }
  });
}
function $(n6, l7, u4, i6, t3, r6, o6, f5) {
  var s5, a5, v8, h7, p5, y7 = u4.props, d6 = l7.props;
  if (t3 = "svg" === l7.type || t3, null != r6) {
    for (s5 = 0; s5 < r6.length; s5++) if (null != (a5 = r6[s5]) && ((null === l7.type ? 3 === a5.nodeType : a5.localName === l7.type) || n6 == a5)) {
      n6 = a5, r6[s5] = null;
      break;
    }
  }
  if (null == n6) {
    if (null === l7.type) return document.createTextNode(d6);
    n6 = t3 ? document.createElementNS("http://www.w3.org/2000/svg", l7.type) : document.createElement(l7.type, d6.is && { is: d6.is }), r6 = null, f5 = false;
  }
  if (null === l7.type) y7 !== d6 && n6.data != d6 && (n6.data = d6);
  else {
    if (null != r6 && (r6 = c.slice.call(n6.childNodes)), v8 = (y7 = u4.props || e).dangerouslySetInnerHTML, h7 = d6.dangerouslySetInnerHTML, !f5) {
      if (y7 === e) for (y7 = {}, p5 = 0; p5 < n6.attributes.length; p5++) y7[n6.attributes[p5].name] = n6.attributes[p5].value;
      (h7 || v8) && (h7 && v8 && h7.__html == v8.__html || (n6.innerHTML = h7 && h7.__html || ""));
    }
    P(n6, d6, y7, t3, f5), h7 ? l7.__k = [] : (l7.__k = l7.props.children, b(n6, l7, u4, i6, "foreignObject" !== l7.type && t3, r6, o6, e, f5)), f5 || ("value" in d6 && void 0 !== (s5 = d6.value) && s5 !== n6.value && N(n6, "value", s5, y7.value, false), "checked" in d6 && void 0 !== (s5 = d6.checked) && s5 !== n6.checked && N(n6, "checked", s5, y7.checked, false));
  }
  return n6;
}
function j(l7, u4, i6) {
  try {
    "function" == typeof l7 ? l7(u4) : l7.current = u4;
  } catch (l8) {
    n.__e(l8, i6);
  }
}
function D(l7, u4, i6) {
  var t3, r6, o6;
  if (n.unmount && n.unmount(l7), (t3 = l7.ref) && (t3.current && t3.current !== l7.__e || j(t3, null, u4)), i6 || "function" == typeof l7.type || (i6 = null != (r6 = l7.__e)), l7.__e = l7.__d = void 0, null != (t3 = l7.__c)) {
    if (t3.componentWillUnmount) try {
      t3.componentWillUnmount();
    } catch (l8) {
      n.__e(l8, u4);
    }
    t3.base = t3.__P = null;
  }
  if (t3 = l7.__k) for (o6 = 0; o6 < t3.length; o6++) t3[o6] && D(t3[o6], u4, i6);
  null != r6 && v(r6);
}
function E(n6, l7, u4) {
  return this.constructor(n6, u4);
}
function H(l7, u4, i6) {
  var t3, r6, f5;
  n.__ && n.__(l7, u4), r6 = (t3 = i6 === o) ? null : i6 && i6.__k || u4.__k, l7 = h(d, null, [l7]), f5 = [], A(u4, (t3 ? u4 : i6 || u4).__k = l7, r6 || e, e, void 0 !== u4.ownerSVGElement, i6 && !t3 ? [i6] : r6 ? null : c.slice.call(u4.childNodes), f5, i6 || e, t3), T(f5, l7);
}
function I(n6, l7) {
  H(n6, l7, o);
}
function L(n6, l7) {
  var u4, i6;
  for (i6 in l7 = a(a({}, n6.props), l7), arguments.length > 2 && (l7.children = c.slice.call(arguments, 2)), u4 = {}, l7) "key" !== i6 && "ref" !== i6 && (u4[i6] = l7[i6]);
  return p(n6.type, u4, l7.key || n6.key, l7.ref || n6.ref, null);
}
function M(n6) {
  var l7 = {}, u4 = { __c: "__cC" + f++, __: n6, Consumer: function(n7, l8) {
    return n7.children(l8);
  }, Provider: function(n7) {
    var i6, t3 = this;
    return this.getChildContext || (i6 = [], this.getChildContext = function() {
      return l7[u4.__c] = t3, l7;
    }, this.shouldComponentUpdate = function(n8) {
      t3.props.value !== n8.value && i6.some(function(l8) {
        l8.context = n8.value, g(l8);
      });
    }, this.sub = function(n8) {
      i6.push(n8);
      var l8 = n8.componentWillUnmount;
      n8.componentWillUnmount = function() {
        i6.splice(i6.indexOf(n8), 1), l8 && l8.call(n8);
      };
    }), n7.children;
  } };
  return u4.Consumer.contextType = u4, u4.Provider.__ = u4, u4;
}
var n, l, u, i, t, r, o, f, e, c, s;
var init_preact_module = __esm({
  "node_modules/preact/dist/preact.module.js"() {
    e = {};
    c = [];
    s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
    n = { __e: function(n6, l7) {
      for (var u4, i6; l7 = l7.__; ) if ((u4 = l7.__c) && !u4.__) try {
        if (u4.constructor && null != u4.constructor.getDerivedStateFromError && (i6 = true, u4.setState(u4.constructor.getDerivedStateFromError(n6))), null != u4.componentDidCatch && (i6 = true, u4.componentDidCatch(n6)), i6) return g(u4.__E = u4);
      } catch (l8) {
        n6 = l8;
      }
      throw n6;
    } }, l = function(n6) {
      return null != n6 && void 0 === n6.constructor;
    }, m.prototype.setState = function(n6, l7) {
      var u4;
      u4 = this.__s !== this.state ? this.__s : this.__s = a({}, this.state), "function" == typeof n6 && (n6 = n6(u4, this.props)), n6 && a(u4, n6), null != n6 && this.__v && (l7 && this.__h.push(l7), g(this));
    }, m.prototype.forceUpdate = function(n6) {
      this.__v && (this.__e = true, n6 && this.__h.push(n6), g(this));
    }, m.prototype.render = d, u = [], i = 0, t = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, o = e, f = 0;
  }
});

// node_modules/preact/hooks/dist/hooks.module.js
function v2(t3, r6) {
  n.__h && n.__h(u2, t3, i2 || r6), i2 = 0;
  var o6 = u2.__H || (u2.__H = { __: [], __h: [] });
  return t3 >= o6.__.length && o6.__.push({}), o6.__[t3];
}
function m2(n6) {
  return i2 = 1, p2(E2, n6);
}
function p2(n6, r6, i6) {
  var o6 = v2(t2++, 2);
  return o6.__c || (o6.__c = u2, o6.__ = [i6 ? i6(r6) : E2(void 0, r6), function(t3) {
    var u4 = n6(o6.__[0], t3);
    o6.__[0] !== u4 && (o6.__[0] = u4, o6.__c.setState({}));
  }]), o6.__;
}
function l2(r6, i6) {
  var o6 = v2(t2++, 3);
  !n.__s && x2(o6.__H, i6) && (o6.__ = r6, o6.__H = i6, u2.__H.__h.push(o6));
}
function y2(r6, i6) {
  var o6 = v2(t2++, 4);
  !n.__s && x2(o6.__H, i6) && (o6.__ = r6, o6.__H = i6, u2.__h.push(o6));
}
function d2(n6) {
  return i2 = 5, h2(function() {
    return { current: n6 };
  }, []);
}
function s2(n6, t3, u4) {
  i2 = 6, y2(function() {
    "function" == typeof n6 ? n6(t3()) : n6 && (n6.current = t3());
  }, null == u4 ? u4 : u4.concat(n6));
}
function h2(n6, u4) {
  var r6 = v2(t2++, 7);
  return x2(r6.__H, u4) ? (r6.__H = u4, r6.__h = n6, r6.__ = n6()) : r6.__;
}
function T2(n6, t3) {
  return i2 = 8, h2(function() {
    return n6;
  }, t3);
}
function w2(n6) {
  var r6 = u2.context[n6.__c], i6 = v2(t2++, 9);
  return i6.__c = n6, r6 ? (null == i6.__ && (i6.__ = true, r6.sub(u2)), r6.props.value) : n6.__;
}
function A2(t3, u4) {
  n.useDebugValue && n.useDebugValue(u4 ? u4(t3) : t3);
}
function F(n6) {
  var r6 = v2(t2++, 10), i6 = m2();
  return r6.__ = n6, u2.componentDidCatch || (u2.componentDidCatch = function(n7) {
    r6.__ && r6.__(n7), i6[1](n7);
  }), [i6[0], function() {
    i6[1](void 0);
  }];
}
function _2() {
  o2.some(function(t3) {
    if (t3.__P) try {
      t3.__H.__h.forEach(g2), t3.__H.__h.forEach(q), t3.__H.__h = [];
    } catch (u4) {
      return t3.__H.__h = [], n.__e(u4, t3.__v), true;
    }
  }), o2 = [];
}
function g2(n6) {
  n6.t && n6.t();
}
function q(n6) {
  var t3 = n6.__();
  "function" == typeof t3 && (n6.t = t3);
}
function x2(n6, t3) {
  return !n6 || t3.some(function(t4, u4) {
    return t4 !== n6[u4];
  });
}
function E2(n6, t3) {
  return "function" == typeof t3 ? t3(n6) : t3;
}
var t2, u2, r2, i2, o2, c2, f2, e2, a2;
var init_hooks_module = __esm({
  "node_modules/preact/hooks/dist/hooks.module.js"() {
    init_preact_module();
    i2 = 0;
    o2 = [];
    c2 = n.__r;
    f2 = n.diffed;
    e2 = n.__c;
    a2 = n.unmount;
    n.__r = function(n6) {
      c2 && c2(n6), t2 = 0, (u2 = n6.__c).__H && (u2.__H.__h.forEach(g2), u2.__H.__h.forEach(q), u2.__H.__h = []);
    }, n.diffed = function(t3) {
      f2 && f2(t3);
      var u4 = t3.__c;
      if (u4) {
        var i6 = u4.__H;
        i6 && i6.__h.length && (1 !== o2.push(u4) && r2 === n.requestAnimationFrame || ((r2 = n.requestAnimationFrame) || function(n6) {
          var t4, u5 = function() {
            clearTimeout(r6), cancelAnimationFrame(t4), setTimeout(n6);
          }, r6 = setTimeout(u5, 100);
          "undefined" != typeof window && (t4 = requestAnimationFrame(u5));
        })(_2));
      }
    }, n.__c = function(t3, u4) {
      u4.some(function(t4) {
        try {
          t4.__h.forEach(g2), t4.__h = t4.__h.filter(function(n6) {
            return !n6.__ || q(n6);
          });
        } catch (r6) {
          u4.some(function(n6) {
            n6.__h && (n6.__h = []);
          }), u4 = [], n.__e(r6, t4.__v);
        }
      }), e2 && e2(t3, u4);
    }, n.unmount = function(t3) {
      a2 && a2(t3);
      var u4 = t3.__c;
      if (u4) {
        var r6 = u4.__H;
        if (r6) try {
          r6.__.forEach(function(n6) {
            return n6.t && n6.t();
          });
        } catch (t4) {
          n.__e(t4, u4.__v);
        }
      }
    };
  }
});

// node_modules/preact/compat/dist/compat.module.js
var compat_module_exports = {};
__export(compat_module_exports, {
  Children: () => R,
  Component: () => m,
  Fragment: () => d,
  PureComponent: () => C2,
  Suspense: () => U,
  SuspenseList: () => O,
  cloneElement: () => K,
  createContext: () => M,
  createElement: () => h,
  createFactory: () => G,
  createPortal: () => z2,
  createRef: () => y,
  default: () => compat_module_default,
  findDOMNode: () => X,
  forwardRef: () => S,
  hydrate: () => V,
  isValidElement: () => J,
  lazy: () => L2,
  memo: () => _3,
  render: () => T3,
  unmountComponentAtNode: () => Q,
  unstable_batchedUpdates: () => Y,
  useCallback: () => T2,
  useContext: () => w2,
  useDebugValue: () => A2,
  useEffect: () => l2,
  useErrorBoundary: () => F,
  useImperativeHandle: () => s2,
  useLayoutEffect: () => y2,
  useMemo: () => h2,
  useReducer: () => p2,
  useRef: () => d2,
  useState: () => m2,
  version: () => B
});
function E3(n6, t3) {
  for (var e4 in t3) n6[e4] = t3[e4];
  return n6;
}
function w3(n6, t3) {
  for (var e4 in n6) if ("__source" !== e4 && !(e4 in t3)) return true;
  for (var r6 in t3) if ("__source" !== r6 && n6[r6] !== t3[r6]) return true;
  return false;
}
function _3(n6, t3) {
  function e4(n7) {
    var e5 = this.props.ref, r7 = e5 == n7.ref;
    return !r7 && e5 && (e5.call ? e5(null) : e5.current = null), t3 ? !t3(this.props, n7) || !r7 : w3(this.props, n7);
  }
  function r6(t4) {
    return this.shouldComponentUpdate = e4, h(n6, E3({}, t4));
  }
  return r6.prototype.isReactComponent = true, r6.displayName = "Memo(" + (n6.displayName || n6.name) + ")", r6.t = true, r6;
}
function S(n6) {
  function t3(t4) {
    var e4 = E3({}, t4);
    return delete e4.ref, n6(e4, t4.ref);
  }
  return t3.prototype.isReactComponent = t3.t = true, t3.displayName = "ForwardRef(" + (n6.displayName || n6.name) + ")", t3;
}
function N2(n6) {
  return n6 && ((n6 = E3({}, n6)).__c = null, n6.__k = n6.__k && n6.__k.map(N2)), n6;
}
function U() {
  this.__u = 0, this.o = null, this.__b = null;
}
function M2(n6) {
  var t3 = n6.__.__c;
  return t3 && t3.u && t3.u(n6);
}
function L2(n6) {
  var t3, e4, r6;
  function o6(o7) {
    if (t3 || (t3 = n6()).then(function(n7) {
      e4 = n7.default || n7;
    }, function(n7) {
      r6 = n7;
    }), r6) throw r6;
    if (!e4) throw t3;
    return h(e4, o7);
  }
  return o6.displayName = "Lazy", o6.t = true, o6;
}
function O() {
  this.i = null, this.l = null;
}
function j2(n6) {
  var t3 = this, e4 = n6.container, r6 = h(W, { context: t3.context }, n6.vnode);
  return t3.s && t3.s !== e4 && (t3.v.parentNode && t3.s.removeChild(t3.v), D(t3.h), t3.p = false), n6.vnode ? t3.p ? (e4.__k = t3.__k, H(r6, e4), t3.__k = e4.__k) : (t3.v = document.createTextNode(""), I("", e4), e4.appendChild(t3.v), t3.p = true, t3.s = e4, H(r6, e4, t3.v), t3.__k = t3.v.__k) : t3.p && (t3.v.parentNode && t3.s.removeChild(t3.v), D(t3.h)), t3.h = r6, t3.componentWillUnmount = function() {
    t3.v.parentNode && t3.s.removeChild(t3.v), D(t3.h);
  }, null;
}
function z2(n6, t3) {
  return h(j2, { vnode: n6, container: t3 });
}
function T3(n6, t3, e4) {
  if (null == t3.__k) for (; t3.firstChild; ) t3.removeChild(t3.firstChild);
  return H(n6, t3), "function" == typeof e4 && e4(), n6 ? n6.__c : null;
}
function V(n6, t3, e4) {
  return I(n6, t3), "function" == typeof e4 && e4(), n6 ? n6.__c : null;
}
function I2(n6, t3) {
  n6["UNSAFE_" + t3] && !n6[t3] && Object.defineProperty(n6, t3, { configurable: false, get: function() {
    return this["UNSAFE_" + t3];
  }, set: function(n7) {
    this["UNSAFE_" + t3] = n7;
  } });
}
function G(n6) {
  return h.bind(null, n6);
}
function J(n6) {
  return !!n6 && n6.$$typeof === H2;
}
function K(n6) {
  return J(n6) ? L.apply(null, arguments) : n6;
}
function Q(n6) {
  return !!n6.__k && (H(null, n6), true);
}
function X(n6) {
  return n6 && (n6.base || 1 === n6.nodeType && n6) || null;
}
var C2, A3, k2, R, F2, P2, W, D2, H2, Z, $2, q2, B, Y, compat_module_default;
var init_compat_module = __esm({
  "node_modules/preact/compat/dist/compat.module.js"() {
    init_hooks_module();
    init_hooks_module();
    init_preact_module();
    init_preact_module();
    C2 = function(n6) {
      var t3, e4;
      function r6(t4) {
        var e5;
        return (e5 = n6.call(this, t4) || this).isPureReactComponent = true, e5;
      }
      return e4 = n6, (t3 = r6).prototype = Object.create(e4.prototype), t3.prototype.constructor = t3, t3.__proto__ = e4, r6.prototype.shouldComponentUpdate = function(n7, t4) {
        return w3(this.props, n7) || w3(this.state, t4);
      }, r6;
    }(m);
    A3 = n.__b;
    n.__b = function(n6) {
      n6.type && n6.type.t && n6.ref && (n6.props.ref = n6.ref, n6.ref = null), A3 && A3(n6);
    };
    k2 = function(n6, t3) {
      return n6 ? x(n6).reduce(function(n7, e4, r6) {
        return n7.concat(t3(e4, r6));
      }, []) : null;
    };
    R = { map: k2, forEach: k2, count: function(n6) {
      return n6 ? x(n6).length : 0;
    }, only: function(n6) {
      if (1 !== (n6 = x(n6)).length) throw new Error("Children.only() expects only one child.");
      return n6[0];
    }, toArray: x };
    F2 = n.__e;
    n.__e = function(n6, t3, e4) {
      if (n6.then) {
        for (var r6, o6 = t3; o6 = o6.__; ) if ((r6 = o6.__c) && r6.__c) return r6.__c(n6, t3.__c);
      }
      F2(n6, t3, e4);
    }, (U.prototype = new m()).__c = function(n6, t3) {
      var e4 = this;
      null == e4.o && (e4.o = []), e4.o.push(t3);
      var r6 = M2(e4.__v), o6 = false, u4 = function() {
        o6 || (o6 = true, r6 ? r6(i6) : i6());
      };
      t3.__c = t3.componentWillUnmount, t3.componentWillUnmount = function() {
        u4(), t3.__c && t3.__c();
      };
      var i6 = function() {
        var n7;
        if (!--e4.__u) for (e4.__v.__k[0] = e4.state.u, e4.setState({ u: e4.__b = null }); n7 = e4.o.pop(); ) n7.forceUpdate();
      };
      e4.__u++ || e4.setState({ u: e4.__b = e4.__v.__k[0] }), n6.then(u4, u4);
    }, U.prototype.render = function(n6, t3) {
      return this.__b && (this.__v.__k[0] = N2(this.__b), this.__b = null), [h(m, null, t3.u ? null : n6.children), t3.u && n6.fallback];
    };
    P2 = function(n6, t3, e4) {
      if (++e4[1] === e4[0] && n6.l.delete(t3), n6.props.revealOrder && ("t" !== n6.props.revealOrder[0] || !n6.l.size)) for (e4 = n6.i; e4; ) {
        for (; e4.length > 3; ) e4.pop()();
        if (e4[1] < e4[0]) break;
        n6.i = e4 = e4[2];
      }
    };
    (O.prototype = new m()).u = function(n6) {
      var t3 = this, e4 = M2(t3.__v), r6 = t3.l.get(n6);
      return r6[0]++, function(o6) {
        var u4 = function() {
          t3.props.revealOrder ? (r6.push(o6), P2(t3, n6, r6)) : o6();
        };
        e4 ? e4(u4) : u4();
      };
    }, O.prototype.render = function(n6) {
      this.i = null, this.l = /* @__PURE__ */ new Map();
      var t3 = x(n6.children);
      n6.revealOrder && "b" === n6.revealOrder[0] && t3.reverse();
      for (var e4 = t3.length; e4--; ) this.l.set(t3[e4], this.i = [1, 0, this.i]);
      return n6.children;
    }, O.prototype.componentDidUpdate = O.prototype.componentDidMount = function() {
      var n6 = this;
      n6.l.forEach(function(t3, e4) {
        P2(n6, e4, t3);
      });
    };
    W = function() {
      function n6() {
      }
      var t3 = n6.prototype;
      return t3.getChildContext = function() {
        return this.props.context;
      }, t3.render = function(n7) {
        return n7.children;
      }, n6;
    }();
    D2 = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
    m.prototype.isReactComponent = {};
    H2 = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
    Z = n.event;
    n.event = function(n6) {
      Z && (n6 = Z(n6)), n6.persist = function() {
      };
      var t3 = false, e4 = false, r6 = n6.stopPropagation;
      n6.stopPropagation = function() {
        r6.call(n6), t3 = true;
      };
      var o6 = n6.preventDefault;
      return n6.preventDefault = function() {
        o6.call(n6), e4 = true;
      }, n6.isPropagationStopped = function() {
        return t3;
      }, n6.isDefaultPrevented = function() {
        return e4;
      }, n6.nativeEvent = n6;
    };
    $2 = { configurable: true, get: function() {
      return this.class;
    } };
    q2 = n.vnode;
    n.vnode = function(n6) {
      n6.$$typeof = H2;
      var t3 = n6.type, e4 = n6.props;
      if (t3) {
        if (e4.class != e4.className && ($2.enumerable = "className" in e4, null != e4.className && (e4.class = e4.className), Object.defineProperty(e4, "className", $2)), "function" != typeof t3) {
          var r6, o6, u4;
          for (u4 in e4.defaultValue && void 0 !== e4.value && (e4.value || 0 === e4.value || (e4.value = e4.defaultValue), delete e4.defaultValue), Array.isArray(e4.value) && e4.multiple && "select" === t3 && (x(e4.children).forEach(function(n7) {
            -1 != e4.value.indexOf(n7.props.value) && (n7.props.selected = true);
          }), delete e4.value), e4) if (r6 = D2.test(u4)) break;
          if (r6) for (u4 in o6 = n6.props = {}, e4) o6[D2.test(u4) ? u4.replace(/[A-Z0-9]/, "-$&").toLowerCase() : u4] = e4[u4];
        }
        !function(t4) {
          var e5 = n6.type, r7 = n6.props;
          if (r7 && "string" == typeof e5) {
            var o7 = {};
            for (var u5 in r7) /^on(Ani|Tra|Tou)/.test(u5) && (r7[u5.toLowerCase()] = r7[u5], delete r7[u5]), o7[u5.toLowerCase()] = u5;
            if (o7.ondoubleclick && (r7.ondblclick = r7[o7.ondoubleclick], delete r7[o7.ondoubleclick]), o7.onbeforeinput && (r7.onbeforeinput = r7[o7.onbeforeinput], delete r7[o7.onbeforeinput]), o7.onchange && ("textarea" === e5 || "input" === e5.toLowerCase() && !/^fil|che|ra/i.test(r7.type))) {
              var i6 = o7.oninput || "oninput";
              r7[i6] || (r7[i6] = r7[o7.onchange], delete r7[o7.onchange]);
            }
          }
        }(), "function" == typeof t3 && !t3.m && t3.prototype && (I2(t3.prototype, "componentWillMount"), I2(t3.prototype, "componentWillReceiveProps"), I2(t3.prototype, "componentWillUpdate"), t3.m = true);
      }
      q2 && q2(n6);
    };
    B = "16.8.0";
    Y = function(n6, t3) {
      return n6(t3);
    };
    compat_module_default = { useState: m2, useReducer: p2, useEffect: l2, useLayoutEffect: y2, useRef: d2, useImperativeHandle: s2, useMemo: h2, useCallback: T2, useContext: w2, useDebugValue: A2, version: "16.8.0", Children: R, render: T3, hydrate: T3, unmountComponentAtNode: Q, createPortal: z2, createElement: h, createContext: M, createFactory: G, cloneElement: K, createRef: y, Fragment: d, isValidElement: J, findDOMNode: X, Component: m, PureComponent: C2, memo: _3, forwardRef: S, unstable_batchedUpdates: Y, Suspense: U, SuspenseList: O, lazy: L2 };
  }
});

// node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js"(exports, module) {
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var browserUtils = (init_esm2(), __toCommonJS(esm_exports2));
    var QRCode = _interopDefault(require_browser());
    var copy = _interopDefault(require_copy_to_clipboard());
    var React = (init_compat_module(), __toCommonJS(compat_module_exports));
    function open(uri) {
      QRCode.toString(uri, {
        type: "terminal"
      }).then(console.log);
    }
    var WALLETCONNECT_STYLE_SHEET = ':root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, "SF Pro Rounded", "SF Pro Text", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,\n    "Open Sans", "Helvetica Neue", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url("images/wc-logo.svg") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n';
    var _iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator";
    var _asyncIteratorSymbol = typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator";
    function _catch(body, recover) {
      try {
        var result = body();
      } catch (e4) {
        return recover(e4);
      }
      if (result && result.then) {
        return result.then(void 0, recover);
      }
      return result;
    }
    var WALLETCONNECT_LOGO_SVG_URL = "data:image/svg+xml,%3Csvg height='185' viewBox='0 0 300 185' width='300' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m61.4385429 36.2562612c48.9112241-47.8881663 128.2119871-47.8881663 177.1232091 0l5.886545 5.7634174c2.445561 2.3944081 2.445561 6.2765112 0 8.6709204l-20.136695 19.715503c-1.222781 1.1972051-3.2053 1.1972051-4.428081 0l-8.100584-7.9311479c-34.121692-33.4079817-89.443886-33.4079817-123.5655788 0l-8.6750562 8.4936051c-1.2227816 1.1972041-3.205301 1.1972041-4.4280806 0l-20.1366949-19.7155031c-2.4455612-2.3944092-2.4455612-6.2765122 0-8.6709204zm218.7677961 40.7737449 17.921697 17.546897c2.445549 2.3943969 2.445563 6.2764769.000031 8.6708899l-80.810171 79.121134c-2.445544 2.394426-6.410582 2.394453-8.85616.000062-.00001-.00001-.000022-.000022-.000032-.000032l-57.354143-56.154572c-.61139-.598602-1.60265-.598602-2.21404 0-.000004.000004-.000007.000008-.000011.000011l-57.3529212 56.154531c-2.4455368 2.394432-6.4105755 2.394472-8.8561612.000087-.0000143-.000014-.0000296-.000028-.0000449-.000044l-80.81241943-79.122185c-2.44556021-2.394408-2.44556021-6.2765115 0-8.6709197l17.92172963-17.5468673c2.4455602-2.3944082 6.4105989-2.3944082 8.8561602 0l57.3549775 56.155357c.6113908.598602 1.602649.598602 2.2140398 0 .0000092-.000009.0000174-.000017.0000265-.000024l57.3521031-56.155333c2.445505-2.3944633 6.410544-2.3945531 8.856161-.0002.000034.0000336.000068.0000673.000101.000101l57.354902 56.155432c.61139.598601 1.60265.598601 2.21404 0l57.353975-56.1543249c2.445561-2.3944092 6.410599-2.3944092 8.85616 0z' fill='%233b99fc'/%3E%3C/svg%3E";
    var WALLETCONNECT_HEADER_TEXT = "WalletConnect";
    var ANIMATION_DURATION = 300;
    var DEFAULT_BUTTON_COLOR = "rgb(64, 153, 255)";
    var WALLETCONNECT_WRAPPER_ID = "walletconnect-wrapper";
    var WALLETCONNECT_STYLE_ID = "walletconnect-style-sheet";
    var WALLETCONNECT_MODAL_ID = "walletconnect-qrcode-modal";
    var WALLETCONNECT_CLOSE_BUTTON_ID = "walletconnect-qrcode-close";
    var WALLETCONNECT_CTA_TEXT_ID = "walletconnect-qrcode-text";
    var WALLETCONNECT_CONNECT_BUTTON_ID = "walletconnect-connect-button";
    function Header(props) {
      return React.createElement("div", {
        className: "walletconnect-modal__header"
      }, React.createElement("img", {
        src: WALLETCONNECT_LOGO_SVG_URL,
        className: "walletconnect-modal__headerLogo"
      }), React.createElement("p", null, WALLETCONNECT_HEADER_TEXT), React.createElement("div", {
        className: "walletconnect-modal__close__wrapper",
        onClick: props.onClose
      }, React.createElement("div", {
        id: WALLETCONNECT_CLOSE_BUTTON_ID,
        className: "walletconnect-modal__close__icon"
      }, React.createElement("div", {
        className: "walletconnect-modal__close__line1"
      }), React.createElement("div", {
        className: "walletconnect-modal__close__line2"
      }))));
    }
    function ConnectButton(props) {
      return React.createElement("a", {
        className: "walletconnect-connect__button",
        href: props.href,
        id: WALLETCONNECT_CONNECT_BUTTON_ID + "-" + props.name,
        onClick: props.onClick,
        rel: "noopener noreferrer",
        style: {
          backgroundColor: props.color
        },
        target: "_blank"
      }, props.name);
    }
    var CARET_SVG_URL = "data:image/svg+xml,%3Csvg fill='none' height='18' viewBox='0 0 8 18' width='8' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath clip-rule='evenodd' d='m.586301.213898c-.435947.33907-.5144813.967342-.175411 1.403292l4.87831 6.27212c.28087.36111.28087.86677 0 1.22788l-4.878311 6.27211c-.33907.436-.260536 1.0642.175412 1.4033.435949.3391 1.064219.2605 1.403289-.1754l4.87832-6.2721c.84259-1.08336.84259-2.60034 0-3.68367l-4.87832-6.27212c-.33907-.4359474-.96734-.514482-1.403289-.175412z' fill='%233c4252' fill-rule='evenodd'/%3E%3C/svg%3E";
    function WalletButton(props) {
      var color = props.color;
      var href = props.href;
      var name2 = props.name;
      var logo = props.logo;
      var onClick = props.onClick;
      return React.createElement("a", {
        className: "walletconnect-modal__base__row",
        href,
        onClick,
        rel: "noopener noreferrer",
        target: "_blank"
      }, React.createElement("h3", {
        className: "walletconnect-modal__base__row__h3"
      }, name2), React.createElement("div", {
        className: "walletconnect-modal__base__row__right"
      }, React.createElement("div", {
        className: "walletconnect-modal__base__row__right__app-icon",
        style: {
          background: "url('" + logo + "') " + color,
          backgroundSize: "100%"
        }
      }), React.createElement("img", {
        src: CARET_SVG_URL,
        className: "walletconnect-modal__base__row__right__caret"
      })));
    }
    function WalletIcon(props) {
      var color = props.color;
      var href = props.href;
      var name2 = props.name;
      var logo = props.logo;
      var onClick = props.onClick;
      var fontSize = window.innerWidth < 768 ? (name2.length > 8 ? 2.5 : 2.7) + "vw" : "inherit";
      return React.createElement("a", {
        className: "walletconnect-connect__button__icon_anchor",
        href,
        onClick,
        rel: "noopener noreferrer",
        target: "_blank"
      }, React.createElement("div", {
        className: "walletconnect-connect__button__icon",
        style: {
          background: "url('" + logo + "') " + color,
          backgroundSize: "100%"
        }
      }), React.createElement("div", {
        style: {
          fontSize
        },
        className: "walletconnect-connect__button__text"
      }, name2));
    }
    var GRID_MIN_COUNT = 5;
    var LINKS_PER_PAGE = 12;
    function LinkDisplay(props) {
      var android = browserUtils.isAndroid();
      var ref = React.useState("");
      var input = ref[0];
      var setInput = ref[1];
      var ref$1 = React.useState("");
      var filter = ref$1[0];
      var setFilter = ref$1[1];
      var ref$2 = React.useState(1);
      var page = ref$2[0];
      var setPage = ref$2[1];
      var links = filter ? props.links.filter(function(link) {
        return link.name.toLowerCase().includes(filter.toLowerCase());
      }) : props.links;
      var errorMessage = props.errorMessage;
      var grid = filter || links.length > GRID_MIN_COUNT;
      var pages = Math.ceil(links.length / LINKS_PER_PAGE);
      var range = [(page - 1) * LINKS_PER_PAGE + 1, page * LINKS_PER_PAGE];
      var pageLinks = links.length ? links.filter(function(_8, index2) {
        return index2 + 1 >= range[0] && index2 + 1 <= range[1];
      }) : [];
      var hasPaging = !!(!android && pages > 1);
      var filterTimeout = void 0;
      function handleInput(e4) {
        setInput(e4.target.value);
        clearTimeout(filterTimeout);
        if (e4.target.value) {
          filterTimeout = setTimeout(function() {
            setFilter(e4.target.value);
            setPage(1);
          }, 1e3);
        } else {
          setInput("");
          setFilter("");
          setPage(1);
        }
      }
      return React.createElement("div", null, React.createElement("p", {
        id: WALLETCONNECT_CTA_TEXT_ID,
        className: "walletconnect-qrcode__text"
      }, android ? props.text.connect_mobile_wallet : props.text.choose_preferred_wallet), !android && React.createElement("input", {
        className: "walletconnect-search__input",
        placeholder: "Search",
        value: input,
        onChange: handleInput
      }), React.createElement("div", {
        className: "walletconnect-connect__buttons__wrapper" + (android ? "__android" : grid && links.length ? "__wrap" : "")
      }, !android ? pageLinks.length ? pageLinks.map(function(entry) {
        var color = entry.color;
        var name2 = entry.name;
        var shortName = entry.shortName;
        var logo = entry.logo;
        var href = browserUtils.formatIOSMobile(props.uri, entry);
        var handleClickIOS = React.useCallback(function() {
          browserUtils.saveMobileLinkInfo({
            name: name2,
            href
          });
        }, [pageLinks]);
        return !grid ? React.createElement(WalletButton, {
          color,
          href,
          name: name2,
          logo,
          onClick: handleClickIOS
        }) : React.createElement(WalletIcon, {
          color,
          href,
          name: shortName || name2,
          logo,
          onClick: handleClickIOS
        });
      }) : React.createElement(React.Fragment, null, React.createElement("p", null, errorMessage.length ? props.errorMessage : !!props.links.length && !links.length ? props.text.no_wallets_found : props.text.loading)) : React.createElement(ConnectButton, {
        name: props.text.connect,
        color: DEFAULT_BUTTON_COLOR,
        href: props.uri,
        onClick: React.useCallback(function() {
          browserUtils.saveMobileLinkInfo({
            name: "Unknown",
            href: props.uri
          });
        }, [])
      })), hasPaging && React.createElement("div", {
        className: "walletconnect-modal__footer"
      }, Array(pages).fill(0).map(function(_8, index2) {
        var pageNumber = index2 + 1;
        var selected = page === pageNumber;
        return React.createElement("a", {
          style: {
            margin: "auto 10px",
            fontWeight: selected ? "bold" : "normal"
          },
          onClick: function() {
            return setPage(pageNumber);
          }
        }, pageNumber);
      })));
    }
    function Notification(props) {
      var show = !!props.message.trim();
      return React.createElement("div", {
        className: "walletconnect-qrcode__notification" + (show ? " notification__show" : "")
      }, props.message);
    }
    var formatQRCodeImage = function(data) {
      try {
        var result = "";
        return Promise.resolve(QRCode.toString(data, {
          margin: 0,
          type: "svg"
        })).then(function(dataString) {
          if (typeof dataString === "string") {
            result = dataString.replace("<svg", '<svg class="walletconnect-qrcode__image"');
          }
          return result;
        });
      } catch (e4) {
        return Promise.reject(e4);
      }
    };
    function QRCodeDisplay(props) {
      var ref = React.useState("");
      var notification = ref[0];
      var setNotification = ref[1];
      var ref$1 = React.useState("");
      var svg = ref$1[0];
      var setSvg = ref$1[1];
      React.useEffect(function() {
        try {
          return Promise.resolve(formatQRCodeImage(props.uri)).then(function(_formatQRCodeImage) {
            setSvg(_formatQRCodeImage);
          });
        } catch (e4) {
          Promise.reject(e4);
        }
      }, []);
      var copyToClipboard = function() {
        var success = copy(props.uri);
        if (success) {
          setNotification(props.text.copied_to_clipboard);
          setInterval(function() {
            return setNotification("");
          }, 1200);
        } else {
          setNotification("Error");
          setInterval(function() {
            return setNotification("");
          }, 1200);
        }
      };
      return React.createElement("div", null, React.createElement("p", {
        id: WALLETCONNECT_CTA_TEXT_ID,
        className: "walletconnect-qrcode__text"
      }, props.text.scan_qrcode_with_wallet), React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: svg
        }
      }), React.createElement("div", {
        className: "walletconnect-modal__footer"
      }, React.createElement("a", {
        onClick: copyToClipboard
      }, props.text.copy_to_clipboard)), React.createElement(Notification, {
        message: notification
      }));
    }
    function Modal(props) {
      var android = browserUtils.isAndroid();
      var mobile = browserUtils.isMobile();
      var whitelist = mobile ? props.qrcodeModalOptions && props.qrcodeModalOptions.mobileLinks ? props.qrcodeModalOptions.mobileLinks : void 0 : props.qrcodeModalOptions && props.qrcodeModalOptions.desktopLinks ? props.qrcodeModalOptions.desktopLinks : void 0;
      var ref = React.useState(false);
      var loading = ref[0];
      var setLoading = ref[1];
      var ref$1 = React.useState(false);
      var fetched = ref$1[0];
      var setFetched = ref$1[1];
      var ref$2 = React.useState(!mobile);
      var displayQRCode = ref$2[0];
      var setDisplayQRCode = ref$2[1];
      var displayProps = {
        mobile,
        text: props.text,
        uri: props.uri,
        qrcodeModalOptions: props.qrcodeModalOptions
      };
      var ref$3 = React.useState("");
      var singleLinkHref = ref$3[0];
      var setSingleLinkHref = ref$3[1];
      var ref$4 = React.useState(false);
      var hasSingleLink = ref$4[0];
      var setHasSingleLink = ref$4[1];
      var ref$5 = React.useState([]);
      var links = ref$5[0];
      var setLinks = ref$5[1];
      var ref$6 = React.useState("");
      var errorMessage = ref$6[0];
      var setErrorMessage = ref$6[1];
      var getLinksIfNeeded = function() {
        if (fetched || loading || whitelist && !whitelist.length || links.length > 0) {
          return;
        }
        React.useEffect(function() {
          var initLinks = function() {
            try {
              if (android) {
                return Promise.resolve();
              }
              setLoading(true);
              var _temp = _catch(function() {
                var url = props.qrcodeModalOptions && props.qrcodeModalOptions.registryUrl ? props.qrcodeModalOptions.registryUrl : browserUtils.getWalletRegistryUrl();
                return Promise.resolve(fetch(url)).then(function(registryResponse) {
                  return Promise.resolve(registryResponse.json()).then(function(_registryResponse$jso) {
                    var registry = _registryResponse$jso.listings;
                    var platform = mobile ? "mobile" : "desktop";
                    var _links = browserUtils.getMobileLinkRegistry(browserUtils.formatMobileRegistry(registry, platform), whitelist);
                    setLoading(false);
                    setFetched(true);
                    setErrorMessage(!_links.length ? props.text.no_supported_wallets : "");
                    setLinks(_links);
                    var hasSingleLink2 = _links.length === 1;
                    if (hasSingleLink2) {
                      setSingleLinkHref(browserUtils.formatIOSMobile(props.uri, _links[0]));
                      setDisplayQRCode(true);
                    }
                    setHasSingleLink(hasSingleLink2);
                  });
                });
              }, function(e4) {
                setLoading(false);
                setFetched(true);
                setErrorMessage(props.text.something_went_wrong);
                console.error(e4);
              });
              return Promise.resolve(_temp && _temp.then ? _temp.then(function() {
              }) : void 0);
            } catch (e4) {
              return Promise.reject(e4);
            }
          };
          initLinks();
        });
      };
      getLinksIfNeeded();
      var rightSelected = mobile ? displayQRCode : !displayQRCode;
      return React.createElement("div", {
        id: WALLETCONNECT_MODAL_ID,
        className: "walletconnect-qrcode__base animated fadeIn"
      }, React.createElement("div", {
        className: "walletconnect-modal__base"
      }, React.createElement(Header, {
        onClose: props.onClose
      }), hasSingleLink && displayQRCode ? React.createElement("div", {
        className: "walletconnect-modal__single_wallet"
      }, React.createElement("a", {
        onClick: function() {
          return browserUtils.saveMobileLinkInfo({
            name: links[0].name,
            href: singleLinkHref
          });
        },
        href: singleLinkHref,
        rel: "noopener noreferrer",
        target: "_blank"
      }, props.text.connect_with + " " + (hasSingleLink ? links[0].name : "") + " ›")) : android || loading || !loading && links.length ? React.createElement("div", {
        className: "walletconnect-modal__mobile__toggle" + (rightSelected ? " right__selected" : "")
      }, React.createElement("div", {
        className: "walletconnect-modal__mobile__toggle_selector"
      }), mobile ? React.createElement(React.Fragment, null, React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(false), getLinksIfNeeded();
        }
      }, props.text.mobile), React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(true);
        }
      }, props.text.qrcode)) : React.createElement(React.Fragment, null, React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(true);
        }
      }, props.text.qrcode), React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(false), getLinksIfNeeded();
        }
      }, props.text.desktop))) : null, React.createElement("div", null, displayQRCode || !android && !loading && !links.length ? React.createElement(QRCodeDisplay, Object.assign({}, displayProps)) : React.createElement(LinkDisplay, Object.assign(
        {},
        displayProps,
        {
          links,
          errorMessage
        }
      )))));
    }
    var de2 = {
      choose_preferred_wallet: "Wähle bevorzugte Wallet",
      connect_mobile_wallet: "Verbinde mit Mobile Wallet",
      scan_qrcode_with_wallet: "Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",
      connect: "Verbinden",
      qrcode: "QR-Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "In die Zwischenablage kopieren",
      copied_to_clipboard: "In die Zwischenablage kopiert!",
      connect_with: "Verbinden mit Hilfe von",
      loading: "Laden...",
      something_went_wrong: "Etwas ist schief gelaufen",
      no_supported_wallets: "Es gibt noch keine unterstützten Wallet",
      no_wallets_found: "keine Wallet gefunden"
    };
    var en3 = {
      choose_preferred_wallet: "Choose your preferred wallet",
      connect_mobile_wallet: "Connect to Mobile Wallet",
      scan_qrcode_with_wallet: "Scan QR code with a WalletConnect-compatible wallet",
      connect: "Connect",
      qrcode: "QR Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "Copy to clipboard",
      copied_to_clipboard: "Copied to clipboard!",
      connect_with: "Connect with",
      loading: "Loading...",
      something_went_wrong: "Something went wrong",
      no_supported_wallets: "There are no supported wallets yet",
      no_wallets_found: "No wallets found"
    };
    var es = {
      choose_preferred_wallet: "Elige tu billetera preferida",
      connect_mobile_wallet: "Conectar a billetera móvil",
      scan_qrcode_with_wallet: "Escanea el código QR con una billetera compatible con WalletConnect",
      connect: "Conectar",
      qrcode: "Código QR",
      mobile: "Móvil",
      desktop: "Desktop",
      copy_to_clipboard: "Copiar",
      copied_to_clipboard: "Copiado!",
      connect_with: "Conectar mediante",
      loading: "Cargando...",
      something_went_wrong: "Algo salió mal",
      no_supported_wallets: "Todavía no hay billeteras compatibles",
      no_wallets_found: "No se encontraron billeteras"
    };
    var fr3 = {
      choose_preferred_wallet: "Choisissez votre portefeuille préféré",
      connect_mobile_wallet: "Se connecter au portefeuille mobile",
      scan_qrcode_with_wallet: "Scannez le QR code avec un portefeuille compatible WalletConnect",
      connect: "Se connecter",
      qrcode: "QR Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "Copier",
      copied_to_clipboard: "Copié!",
      connect_with: "Connectez-vous à l'aide de",
      loading: "Chargement...",
      something_went_wrong: "Quelque chose a mal tourné",
      no_supported_wallets: "Il n'y a pas encore de portefeuilles pris en charge",
      no_wallets_found: "Aucun portefeuille trouvé"
    };
    var ko = {
      choose_preferred_wallet: "원하는 지갑을 선택하세요",
      connect_mobile_wallet: "모바일 지갑과 연결",
      scan_qrcode_with_wallet: "WalletConnect 지원 지갑에서 QR코드를 스캔하세요",
      connect: "연결",
      qrcode: "QR 코드",
      mobile: "모바일",
      desktop: "데스크탑",
      copy_to_clipboard: "클립보드에 복사",
      copied_to_clipboard: "클립보드에 복사되었습니다!",
      connect_with: "와 연결하다",
      loading: "로드 중...",
      something_went_wrong: "문제가 발생했습니다.",
      no_supported_wallets: "아직 지원되는 지갑이 없습니다",
      no_wallets_found: "지갑을 찾을 수 없습니다"
    };
    var pt3 = {
      choose_preferred_wallet: "Escolha sua carteira preferida",
      connect_mobile_wallet: "Conectar-se à carteira móvel",
      scan_qrcode_with_wallet: "Ler o código QR com uma carteira compatível com WalletConnect",
      connect: "Conectar",
      qrcode: "Código QR",
      mobile: "Móvel",
      desktop: "Desktop",
      copy_to_clipboard: "Copiar",
      copied_to_clipboard: "Copiado!",
      connect_with: "Ligar por meio de",
      loading: "Carregamento...",
      something_went_wrong: "Algo correu mal",
      no_supported_wallets: "Ainda não há carteiras suportadas",
      no_wallets_found: "Nenhuma carteira encontrada"
    };
    var zh = {
      choose_preferred_wallet: "选择你的钱包",
      connect_mobile_wallet: "连接至移动端钱包",
      scan_qrcode_with_wallet: "使用兼容 WalletConnect 的钱包扫描二维码",
      connect: "连接",
      qrcode: "二维码",
      mobile: "移动",
      desktop: "桌面",
      copy_to_clipboard: "复制到剪贴板",
      copied_to_clipboard: "复制到剪贴板成功！",
      connect_with: "通过以下方式连接",
      loading: "正在加载...",
      something_went_wrong: "出了问题",
      no_supported_wallets: "目前还没有支持的钱包",
      no_wallets_found: "没有找到钱包"
    };
    var fa = {
      choose_preferred_wallet: "کیف پول مورد نظر خود را انتخاب کنید",
      connect_mobile_wallet: "به کیف پول موبایل وصل شوید",
      scan_qrcode_with_wallet: "کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",
      connect: "اتصال",
      qrcode: "کد QR",
      mobile: "سیار",
      desktop: "دسکتاپ",
      copy_to_clipboard: "کپی به کلیپ بورد",
      copied_to_clipboard: "در کلیپ بورد کپی شد!",
      connect_with: "ارتباط با",
      loading: "...بارگذاری",
      something_went_wrong: "مشکلی پیش آمد",
      no_supported_wallets: "هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",
      no_wallets_found: "هیچ کیف پولی پیدا نشد"
    };
    var languages = {
      de: de2,
      en: en3,
      es,
      fr: fr3,
      ko,
      pt: pt3,
      zh,
      fa
    };
    function injectStyleSheet() {
      var doc = browserUtils.getDocumentOrThrow();
      var prev = doc.getElementById(WALLETCONNECT_STYLE_ID);
      if (prev) {
        doc.head.removeChild(prev);
      }
      var style = doc.createElement("style");
      style.setAttribute("id", WALLETCONNECT_STYLE_ID);
      style.innerText = WALLETCONNECT_STYLE_SHEET;
      doc.head.appendChild(style);
    }
    function renderWrapper() {
      var doc = browserUtils.getDocumentOrThrow();
      var wrapper = doc.createElement("div");
      wrapper.setAttribute("id", WALLETCONNECT_WRAPPER_ID);
      doc.body.appendChild(wrapper);
      return wrapper;
    }
    function triggerCloseAnimation() {
      var doc = browserUtils.getDocumentOrThrow();
      var modal = doc.getElementById(WALLETCONNECT_MODAL_ID);
      if (modal) {
        modal.className = modal.className.replace("fadeIn", "fadeOut");
        setTimeout(function() {
          var wrapper = doc.getElementById(WALLETCONNECT_WRAPPER_ID);
          if (wrapper) {
            doc.body.removeChild(wrapper);
          }
        }, ANIMATION_DURATION);
      }
    }
    function getWrappedCallback(cb) {
      return function() {
        triggerCloseAnimation();
        if (cb) {
          cb();
        }
      };
    }
    function getText() {
      var lang = browserUtils.getNavigatorOrThrow().language.split("-")[0] || "en";
      return languages[lang] || languages["en"];
    }
    function open$1(uri, cb, qrcodeModalOptions) {
      injectStyleSheet();
      var wrapper = renderWrapper();
      React.render(React.createElement(Modal, {
        text: getText(),
        uri,
        onClose: getWrappedCallback(cb),
        qrcodeModalOptions
      }), wrapper);
    }
    function close$1() {
      triggerCloseAnimation();
    }
    var isNode3 = function() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    };
    function open$2(uri, cb, qrcodeModalOptions) {
      console.log(uri);
      if (isNode3()) {
        open(uri);
      } else {
        open$1(uri, cb, qrcodeModalOptions);
      }
    }
    function close$2() {
      if (isNode3()) ;
      else {
        close$1();
      }
    }
    var index = {
      open: open$2,
      close: close$2
    };
    module.exports = index;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds2(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds2;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils3 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs5 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils3(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    function tryStringify(o6) {
      try {
        return JSON.stringify(o6);
      } catch (e4) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f5, args, opts) {
      var ss2 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f5 === "object" && f5 !== null) {
        var len = args.length + offset;
        if (len === 1) return f5;
        var objects = new Array(len);
        objects[0] = ss2(f5);
        for (var index = 1; index < len; index++) {
          objects[index] = ss2(args[index]);
        }
        return objects.join(" ");
      }
      if (typeof f5 !== "string") {
        return f5;
      }
      var argLen = args.length;
      if (argLen === 0) return f5;
      var str = "";
      var a5 = 1 - offset;
      var lastPos = -1;
      var flen = f5 && f5.length || 0;
      for (var i6 = 0; i6 < flen; ) {
        if (f5.charCodeAt(i6) === 37 && i6 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f5.charCodeAt(i6 + 1)) {
            case 100:
            // 'd'
            case 102:
              if (a5 >= argLen)
                break;
              if (args[a5] == null) break;
              if (lastPos < i6)
                str += f5.slice(lastPos, i6);
              str += Number(args[a5]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 105:
              if (a5 >= argLen)
                break;
              if (args[a5] == null) break;
              if (lastPos < i6)
                str += f5.slice(lastPos, i6);
              str += Math.floor(Number(args[a5]));
              lastPos = i6 + 2;
              i6++;
              break;
            case 79:
            // 'O'
            case 111:
            // 'o'
            case 106:
              if (a5 >= argLen)
                break;
              if (args[a5] === void 0) break;
              if (lastPos < i6)
                str += f5.slice(lastPos, i6);
              var type = typeof args[a5];
              if (type === "string") {
                str += "'" + args[a5] + "'";
                lastPos = i6 + 2;
                i6++;
                break;
              }
              if (type === "function") {
                str += args[a5].name || "<anonymous>";
                lastPos = i6 + 2;
                i6++;
                break;
              }
              str += ss2(args[a5]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 115:
              if (a5 >= argLen)
                break;
              if (lastPos < i6)
                str += f5.slice(lastPos, i6);
              str += String(args[a5]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 37:
              if (lastPos < i6)
                str += f5.slice(lastPos, i6);
              str += "%";
              lastPos = i6 + 2;
              i6++;
              a5--;
              break;
          }
          ++a5;
        }
        ++i6;
      }
      if (lastPos === -1)
        return f5;
      else if (lastPos < flen) {
        str += f5.slice(lastPos);
      }
      return str;
    }
  }
});

// node_modules/pino/browser.js
var require_browser2 = __commonJS({
  "node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k7) {
          return k7 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write) opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1) stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false) opts.level = "silent";
      const level = opts.level || "info";
      const logger12 = Object.create(proto);
      if (!logger12.log) logger12.log = noop;
      Object.defineProperty(logger12, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger12, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger12.levels = pino.levels;
      logger12.level = level;
      logger12.setMaxListeners = logger12.getMaxListeners = logger12.emit = logger12.addListener = logger12.on = logger12.prependListener = logger12.once = logger12.prependOnceListener = logger12.removeListener = logger12.removeAllListeners = logger12.listeners = logger12.listenerCount = logger12.eventNames = logger12.write = logger12.flush = noop;
      logger12.serializers = serializers;
      logger12._serialize = serialize;
      logger12._stdErrSerialize = stdErrSerialize;
      logger12.child = child;
      if (transmit2) logger12._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger12, "error", "log");
        set2(setOpts, logger12, "fatal", "error");
        set2(setOpts, logger12, "warn", "error");
        set2(setOpts, logger12, "info", "log");
        set2(setOpts, logger12, "debug", "log");
        set2(setOpts, logger12, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, "error");
          this.fatal = bind(parent, bindings, "fatal");
          this.warn = bind(parent, bindings, "warn");
          this.info = bind(parent, bindings, "info");
          this.debug = bind(parent, bindings, "debug");
          this.trace = bind(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger12;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger12, level, fallback) {
      const proto = Object.getPrototypeOf(logger12);
      logger12[level] = logger12.levelVal > logger12.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback] || noop;
      wrap(opts, logger12, level);
    }
    function wrap(opts, logger12, level) {
      if (!opts.transmit && logger12[level] === noop) return;
      logger12[level] = /* @__PURE__ */ function(write) {
        return function LOG() {
          const ts = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i6 = 0; i6 < args.length; i6++) args[i6] = arguments[i6];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject) write.call(proto, asObject(this, level, args, ts));
          else write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger12.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue) return;
            transmit(this, {
              ts,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger12.level],
              send: opts.transmit.send,
              val: logger12.levelVal
            }, args);
          }
        };
      }(logger12[level]);
    }
    function asObject(logger12, level, args, ts) {
      if (logger12._serialize) applySerializers(args, logger12._serialize, logger12.serializers, logger12._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o6 = {};
      if (ts) {
        o6.time = ts;
      }
      o6.level = pino.levels.values[level];
      let lvl = (logger12._childLevel | 0) + 1;
      if (lvl < 1) lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o6, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string") msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0) o6.msg = msg;
      return o6;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i6 in args) {
        if (stdErrSerialize && args[i6] instanceof Error) {
          args[i6] = pino.stdSerializers.err(args[i6]);
        } else if (typeof args[i6] === "object" && !Array.isArray(args[i6])) {
          for (const k7 in args[i6]) {
            if (serialize && serialize.indexOf(k7) > -1 && k7 in serializers) {
              args[i6][k7] = serializers[k7](args[i6][k7]);
            }
          }
        }
      }
    }
    function bind(parent, bindings, level) {
      return function() {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i6 = 1; i6 < args.length; i6++) {
          args[i6] = arguments[i6 - 1];
        }
        return parent[level].apply(this, args);
      };
    }
    function transmit(logger12, opts, args) {
      const send = opts.send;
      const ts = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger12._logEvent.bindings;
      applySerializers(
        args,
        logger12._serialize || Object.keys(logger12.serializers),
        logger12.serializers,
        logger12._stdErrSerialize === void 0 ? true : logger12._stdErrSerialize
      );
      logger12._logEvent.ts = ts;
      logger12._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger12._logEvent.level.label = methodLevel;
      logger12._logEvent.level.value = methodValue;
      send(methodLevel, logger12._logEvent, val);
      logger12._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key2 in err) {
        if (obj[key2] === void 0) {
          obj[key2] = err[key2];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a5) {
      return a5;
    }
    function noop() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o6) {
        return typeof o6 !== "undefined" && o6;
      }
      try {
        if (typeof globalThis !== "undefined") return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e4) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// node_modules/@stablelib/random/lib/source/browser.js
var require_browser3 = __commonJS({
  "node_modules/@stablelib/random/lib/source/browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserRandomSource = void 0;
    var QUOTA = 65536;
    var BrowserRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.isInstantiated = false;
        const browserCrypto = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
        if (browserCrypto && browserCrypto.getRandomValues !== void 0) {
          this._crypto = browserCrypto;
          this.isAvailable = true;
          this.isInstantiated = true;
        }
      }
      randomBytes(length2) {
        if (!this.isAvailable || !this._crypto) {
          throw new Error("Browser random byte generator is not available.");
        }
        const out = new Uint8Array(length2);
        for (let i6 = 0; i6 < out.length; i6 += QUOTA) {
          this._crypto.getRandomValues(out.subarray(i6, i6 + Math.min(out.length - i6, QUOTA)));
        }
        return out;
      }
    };
    exports.BrowserRandomSource = BrowserRandomSource;
  }
});

// node_modules/@stablelib/wipe/lib/wipe.js
var require_wipe = __commonJS({
  "node_modules/@stablelib/wipe/lib/wipe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function wipe(array) {
      for (var i6 = 0; i6 < array.length; i6++) {
        array[i6] = 0;
      }
      return array;
    }
    exports.wipe = wipe;
  }
});

// node_modules/@stablelib/random/lib/source/node.js
var require_node = __commonJS({
  "node_modules/@stablelib/random/lib/source/node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeRandomSource = void 0;
    var wipe_1 = require_wipe();
    var NodeRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.isInstantiated = false;
        if (typeof __require !== "undefined") {
          const nodeCrypto = require_crypto();
          if (nodeCrypto && nodeCrypto.randomBytes) {
            this._crypto = nodeCrypto;
            this.isAvailable = true;
            this.isInstantiated = true;
          }
        }
      }
      randomBytes(length2) {
        if (!this.isAvailable || !this._crypto) {
          throw new Error("Node.js random byte generator is not available.");
        }
        let buffer = this._crypto.randomBytes(length2);
        if (buffer.length !== length2) {
          throw new Error("NodeRandomSource: got fewer bytes than requested");
        }
        const out = new Uint8Array(length2);
        for (let i6 = 0; i6 < out.length; i6++) {
          out[i6] = buffer[i6];
        }
        (0, wipe_1.wipe)(buffer);
        return out;
      }
    };
    exports.NodeRandomSource = NodeRandomSource;
  }
});

// node_modules/@stablelib/random/lib/source/system.js
var require_system = __commonJS({
  "node_modules/@stablelib/random/lib/source/system.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SystemRandomSource = void 0;
    var browser_1 = require_browser3();
    var node_1 = require_node();
    var SystemRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.name = "";
        this._source = new browser_1.BrowserRandomSource();
        if (this._source.isAvailable) {
          this.isAvailable = true;
          this.name = "Browser";
          return;
        }
        this._source = new node_1.NodeRandomSource();
        if (this._source.isAvailable) {
          this.isAvailable = true;
          this.name = "Node";
          return;
        }
      }
      randomBytes(length2) {
        if (!this.isAvailable) {
          throw new Error("System random byte generator is not available.");
        }
        return this._source.randomBytes(length2);
      }
    };
    exports.SystemRandomSource = SystemRandomSource;
  }
});

// node_modules/@stablelib/int/lib/int.js
var require_int = __commonJS({
  "node_modules/@stablelib/int/lib/int.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function imulShim(a5, b5) {
      var ah = a5 >>> 16 & 65535, al = a5 & 65535;
      var bh = b5 >>> 16 & 65535, bl = b5 & 65535;
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    }
    exports.mul = Math.imul || imulShim;
    function add3(a5, b5) {
      return a5 + b5 | 0;
    }
    exports.add = add3;
    function sub(a5, b5) {
      return a5 - b5 | 0;
    }
    exports.sub = sub;
    function rotl(x8, n6) {
      return x8 << n6 | x8 >>> 32 - n6;
    }
    exports.rotl = rotl;
    function rotr(x8, n6) {
      return x8 << 32 - n6 | x8 >>> n6;
    }
    exports.rotr = rotr;
    function isIntegerShim(n6) {
      return typeof n6 === "number" && isFinite(n6) && Math.floor(n6) === n6;
    }
    exports.isInteger = Number.isInteger || isIntegerShim;
    exports.MAX_SAFE_INTEGER = 9007199254740991;
    exports.isSafeInteger = function(n6) {
      return exports.isInteger(n6) && (n6 >= -exports.MAX_SAFE_INTEGER && n6 <= exports.MAX_SAFE_INTEGER);
    };
  }
});

// node_modules/@stablelib/binary/lib/binary.js
var require_binary = __commonJS({
  "node_modules/@stablelib/binary/lib/binary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var int_1 = require_int();
    function readInt16BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 0] << 8 | array[offset + 1]) << 16 >> 16;
    }
    exports.readInt16BE = readInt16BE;
    function readUint16BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 0] << 8 | array[offset + 1]) >>> 0;
    }
    exports.readUint16BE = readUint16BE;
    function readInt16LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 1] << 8 | array[offset]) << 16 >> 16;
    }
    exports.readInt16LE = readInt16LE;
    function readUint16LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 1] << 8 | array[offset]) >>> 0;
    }
    exports.readUint16LE = readUint16LE;
    function writeUint16BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(2);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 8;
      out[offset + 1] = value >>> 0;
      return out;
    }
    exports.writeUint16BE = writeUint16BE;
    exports.writeInt16BE = writeUint16BE;
    function writeUint16LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(2);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 0;
      out[offset + 1] = value >>> 8;
      return out;
    }
    exports.writeUint16LE = writeUint16LE;
    exports.writeInt16LE = writeUint16LE;
    function readInt32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];
    }
    exports.readInt32BE = readInt32BE;
    function readUint32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;
    }
    exports.readUint32BE = readUint32BE;
    function readInt32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset];
    }
    exports.readInt32LE = readInt32LE;
    function readUint32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset]) >>> 0;
    }
    exports.readUint32LE = readUint32LE;
    function writeUint32BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 24;
      out[offset + 1] = value >>> 16;
      out[offset + 2] = value >>> 8;
      out[offset + 3] = value >>> 0;
      return out;
    }
    exports.writeUint32BE = writeUint32BE;
    exports.writeInt32BE = writeUint32BE;
    function writeUint32LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 0;
      out[offset + 1] = value >>> 8;
      out[offset + 2] = value >>> 16;
      out[offset + 3] = value >>> 24;
      return out;
    }
    exports.writeUint32LE = writeUint32LE;
    exports.writeInt32LE = writeUint32LE;
    function readInt64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var hi2 = readInt32BE(array, offset);
      var lo2 = readInt32BE(array, offset + 4);
      return hi2 * 4294967296 + lo2 - (lo2 >> 31) * 4294967296;
    }
    exports.readInt64BE = readInt64BE;
    function readUint64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var hi2 = readUint32BE(array, offset);
      var lo2 = readUint32BE(array, offset + 4);
      return hi2 * 4294967296 + lo2;
    }
    exports.readUint64BE = readUint64BE;
    function readInt64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var lo2 = readInt32LE(array, offset);
      var hi2 = readInt32LE(array, offset + 4);
      return hi2 * 4294967296 + lo2 - (lo2 >> 31) * 4294967296;
    }
    exports.readInt64LE = readInt64LE;
    function readUint64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var lo2 = readUint32LE(array, offset);
      var hi2 = readUint32LE(array, offset + 4);
      return hi2 * 4294967296 + lo2;
    }
    exports.readUint64LE = readUint64LE;
    function writeUint64BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      writeUint32BE(value / 4294967296 >>> 0, out, offset);
      writeUint32BE(value >>> 0, out, offset + 4);
      return out;
    }
    exports.writeUint64BE = writeUint64BE;
    exports.writeInt64BE = writeUint64BE;
    function writeUint64LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      writeUint32LE(value >>> 0, out, offset);
      writeUint32LE(value / 4294967296 >>> 0, out, offset + 4);
      return out;
    }
    exports.writeUint64LE = writeUint64LE;
    exports.writeInt64LE = writeUint64LE;
    function readUintBE(bitLength, array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("readUintBE supports only bitLengths divisible by 8");
      }
      if (bitLength / 8 > array.length - offset) {
        throw new Error("readUintBE: array is too short for the given bitLength");
      }
      var result = 0;
      var mul3 = 1;
      for (var i6 = bitLength / 8 + offset - 1; i6 >= offset; i6--) {
        result += array[i6] * mul3;
        mul3 *= 256;
      }
      return result;
    }
    exports.readUintBE = readUintBE;
    function readUintLE(bitLength, array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("readUintLE supports only bitLengths divisible by 8");
      }
      if (bitLength / 8 > array.length - offset) {
        throw new Error("readUintLE: array is too short for the given bitLength");
      }
      var result = 0;
      var mul3 = 1;
      for (var i6 = offset; i6 < offset + bitLength / 8; i6++) {
        result += array[i6] * mul3;
        mul3 *= 256;
      }
      return result;
    }
    exports.readUintLE = readUintLE;
    function writeUintBE(bitLength, value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(bitLength / 8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("writeUintBE supports only bitLengths divisible by 8");
      }
      if (!int_1.isSafeInteger(value)) {
        throw new Error("writeUintBE value must be an integer");
      }
      var div = 1;
      for (var i6 = bitLength / 8 + offset - 1; i6 >= offset; i6--) {
        out[i6] = value / div & 255;
        div *= 256;
      }
      return out;
    }
    exports.writeUintBE = writeUintBE;
    function writeUintLE(bitLength, value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(bitLength / 8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("writeUintLE supports only bitLengths divisible by 8");
      }
      if (!int_1.isSafeInteger(value)) {
        throw new Error("writeUintLE value must be an integer");
      }
      var div = 1;
      for (var i6 = offset; i6 < offset + bitLength / 8; i6++) {
        out[i6] = value / div & 255;
        div *= 256;
      }
      return out;
    }
    exports.writeUintLE = writeUintLE;
    function readFloat32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat32(offset);
    }
    exports.readFloat32BE = readFloat32BE;
    function readFloat32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat32(offset, true);
    }
    exports.readFloat32LE = readFloat32LE;
    function readFloat64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat64(offset);
    }
    exports.readFloat64BE = readFloat64BE;
    function readFloat64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat64(offset, true);
    }
    exports.readFloat64LE = readFloat64LE;
    function writeFloat32BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat32(offset, value);
      return out;
    }
    exports.writeFloat32BE = writeFloat32BE;
    function writeFloat32LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat32(offset, value, true);
      return out;
    }
    exports.writeFloat32LE = writeFloat32LE;
    function writeFloat64BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat64(offset, value);
      return out;
    }
    exports.writeFloat64BE = writeFloat64BE;
    function writeFloat64LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat64(offset, value, true);
      return out;
    }
    exports.writeFloat64LE = writeFloat64LE;
  }
});

// node_modules/@stablelib/random/lib/random.js
var require_random = __commonJS({
  "node_modules/@stablelib/random/lib/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;
    var system_1 = require_system();
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    exports.defaultRandomSource = new system_1.SystemRandomSource();
    function randomBytes2(length2, prng = exports.defaultRandomSource) {
      return prng.randomBytes(length2);
    }
    exports.randomBytes = randomBytes2;
    function randomUint32(prng = exports.defaultRandomSource) {
      const buf = randomBytes2(4, prng);
      const result = (0, binary_1.readUint32LE)(buf);
      (0, wipe_1.wipe)(buf);
      return result;
    }
    exports.randomUint32 = randomUint32;
    var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    function randomString(length2, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
      if (charset.length < 2) {
        throw new Error("randomString charset is too short");
      }
      if (charset.length > 256) {
        throw new Error("randomString charset is too long");
      }
      let out = "";
      const charsLen = charset.length;
      const maxByte = 256 - 256 % charsLen;
      while (length2 > 0) {
        const buf = randomBytes2(Math.ceil(length2 * 256 / maxByte), prng);
        for (let i6 = 0; i6 < buf.length && length2 > 0; i6++) {
          const randomByte = buf[i6];
          if (randomByte < maxByte) {
            out += charset.charAt(randomByte % charsLen);
            length2--;
          }
        }
        (0, wipe_1.wipe)(buf);
      }
      return out;
    }
    exports.randomString = randomString;
    function randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
      const length2 = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
      return randomString(length2, charset, prng);
    }
    exports.randomStringForEntropy = randomStringForEntropy;
  }
});

// node_modules/@stablelib/sha512/lib/sha512.js
var require_sha512 = __commonJS({
  "node_modules/@stablelib/sha512/lib/sha512.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    exports.DIGEST_LENGTH = 64;
    exports.BLOCK_SIZE = 128;
    var SHA512 = (
      /** @class */
      function() {
        function SHA5122() {
          this.digestLength = exports.DIGEST_LENGTH;
          this.blockSize = exports.BLOCK_SIZE;
          this._stateHi = new Int32Array(8);
          this._stateLo = new Int32Array(8);
          this._tempHi = new Int32Array(16);
          this._tempLo = new Int32Array(16);
          this._buffer = new Uint8Array(256);
          this._bufferLength = 0;
          this._bytesHashed = 0;
          this._finished = false;
          this.reset();
        }
        SHA5122.prototype._initState = function() {
          this._stateHi[0] = 1779033703;
          this._stateHi[1] = 3144134277;
          this._stateHi[2] = 1013904242;
          this._stateHi[3] = 2773480762;
          this._stateHi[4] = 1359893119;
          this._stateHi[5] = 2600822924;
          this._stateHi[6] = 528734635;
          this._stateHi[7] = 1541459225;
          this._stateLo[0] = 4089235720;
          this._stateLo[1] = 2227873595;
          this._stateLo[2] = 4271175723;
          this._stateLo[3] = 1595750129;
          this._stateLo[4] = 2917565137;
          this._stateLo[5] = 725511199;
          this._stateLo[6] = 4215389547;
          this._stateLo[7] = 327033209;
        };
        SHA5122.prototype.reset = function() {
          this._initState();
          this._bufferLength = 0;
          this._bytesHashed = 0;
          this._finished = false;
          return this;
        };
        SHA5122.prototype.clean = function() {
          wipe_1.wipe(this._buffer);
          wipe_1.wipe(this._tempHi);
          wipe_1.wipe(this._tempLo);
          this.reset();
        };
        SHA5122.prototype.update = function(data, dataLength) {
          if (dataLength === void 0) {
            dataLength = data.length;
          }
          if (this._finished) {
            throw new Error("SHA512: can't update because hash was finished.");
          }
          var dataPos = 0;
          this._bytesHashed += dataLength;
          if (this._bufferLength > 0) {
            while (this._bufferLength < exports.BLOCK_SIZE && dataLength > 0) {
              this._buffer[this._bufferLength++] = data[dataPos++];
              dataLength--;
            }
            if (this._bufferLength === this.blockSize) {
              hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);
              this._bufferLength = 0;
            }
          }
          if (dataLength >= this.blockSize) {
            dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);
            dataLength %= this.blockSize;
          }
          while (dataLength > 0) {
            this._buffer[this._bufferLength++] = data[dataPos++];
            dataLength--;
          }
          return this;
        };
        SHA5122.prototype.finish = function(out) {
          if (!this._finished) {
            var bytesHashed = this._bytesHashed;
            var left = this._bufferLength;
            var bitLenHi = bytesHashed / 536870912 | 0;
            var bitLenLo = bytesHashed << 3;
            var padLength = bytesHashed % 128 < 112 ? 128 : 256;
            this._buffer[left] = 128;
            for (var i6 = left + 1; i6 < padLength - 8; i6++) {
              this._buffer[i6] = 0;
            }
            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
            hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);
            this._finished = true;
          }
          for (var i6 = 0; i6 < this.digestLength / 8; i6++) {
            binary_1.writeUint32BE(this._stateHi[i6], out, i6 * 8);
            binary_1.writeUint32BE(this._stateLo[i6], out, i6 * 8 + 4);
          }
          return this;
        };
        SHA5122.prototype.digest = function() {
          var out = new Uint8Array(this.digestLength);
          this.finish(out);
          return out;
        };
        SHA5122.prototype.saveState = function() {
          if (this._finished) {
            throw new Error("SHA256: cannot save finished state");
          }
          return {
            stateHi: new Int32Array(this._stateHi),
            stateLo: new Int32Array(this._stateLo),
            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
            bufferLength: this._bufferLength,
            bytesHashed: this._bytesHashed
          };
        };
        SHA5122.prototype.restoreState = function(savedState) {
          this._stateHi.set(savedState.stateHi);
          this._stateLo.set(savedState.stateLo);
          this._bufferLength = savedState.bufferLength;
          if (savedState.buffer) {
            this._buffer.set(savedState.buffer);
          }
          this._bytesHashed = savedState.bytesHashed;
          this._finished = false;
          return this;
        };
        SHA5122.prototype.cleanSavedState = function(savedState) {
          wipe_1.wipe(savedState.stateHi);
          wipe_1.wipe(savedState.stateLo);
          if (savedState.buffer) {
            wipe_1.wipe(savedState.buffer);
          }
          savedState.bufferLength = 0;
          savedState.bytesHashed = 0;
        };
        return SHA5122;
      }()
    );
    exports.SHA512 = SHA512;
    var K5 = new Int32Array([
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ]);
    function hashBlocks(wh, wl, hh, hl, m4, pos, len) {
      var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
      var h7, l7;
      var th, tl;
      var a5, b5, c7, d6;
      while (len >= 128) {
        for (var i6 = 0; i6 < 16; i6++) {
          var j5 = 8 * i6 + pos;
          wh[i6] = binary_1.readUint32BE(m4, j5);
          wl[i6] = binary_1.readUint32BE(m4, j5 + 4);
        }
        for (var i6 = 0; i6 < 80; i6++) {
          var bh0 = ah0;
          var bh1 = ah1;
          var bh2 = ah2;
          var bh3 = ah3;
          var bh4 = ah4;
          var bh5 = ah5;
          var bh6 = ah6;
          var bh7 = ah7;
          var bl0 = al0;
          var bl1 = al1;
          var bl2 = al2;
          var bl3 = al3;
          var bl4 = al4;
          var bl5 = al5;
          var bl6 = al6;
          var bl7 = al7;
          h7 = ah7;
          l7 = al7;
          a5 = l7 & 65535;
          b5 = l7 >>> 16;
          c7 = h7 & 65535;
          d6 = h7 >>> 16;
          h7 = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
          l7 = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
          a5 += l7 & 65535;
          b5 += l7 >>> 16;
          c7 += h7 & 65535;
          d6 += h7 >>> 16;
          h7 = ah4 & ah5 ^ ~ah4 & ah6;
          l7 = al4 & al5 ^ ~al4 & al6;
          a5 += l7 & 65535;
          b5 += l7 >>> 16;
          c7 += h7 & 65535;
          d6 += h7 >>> 16;
          h7 = K5[i6 * 2];
          l7 = K5[i6 * 2 + 1];
          a5 += l7 & 65535;
          b5 += l7 >>> 16;
          c7 += h7 & 65535;
          d6 += h7 >>> 16;
          h7 = wh[i6 % 16];
          l7 = wl[i6 % 16];
          a5 += l7 & 65535;
          b5 += l7 >>> 16;
          c7 += h7 & 65535;
          d6 += h7 >>> 16;
          b5 += a5 >>> 16;
          c7 += b5 >>> 16;
          d6 += c7 >>> 16;
          th = c7 & 65535 | d6 << 16;
          tl = a5 & 65535 | b5 << 16;
          h7 = th;
          l7 = tl;
          a5 = l7 & 65535;
          b5 = l7 >>> 16;
          c7 = h7 & 65535;
          d6 = h7 >>> 16;
          h7 = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
          l7 = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
          a5 += l7 & 65535;
          b5 += l7 >>> 16;
          c7 += h7 & 65535;
          d6 += h7 >>> 16;
          h7 = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
          l7 = al0 & al1 ^ al0 & al2 ^ al1 & al2;
          a5 += l7 & 65535;
          b5 += l7 >>> 16;
          c7 += h7 & 65535;
          d6 += h7 >>> 16;
          b5 += a5 >>> 16;
          c7 += b5 >>> 16;
          d6 += c7 >>> 16;
          bh7 = c7 & 65535 | d6 << 16;
          bl7 = a5 & 65535 | b5 << 16;
          h7 = bh3;
          l7 = bl3;
          a5 = l7 & 65535;
          b5 = l7 >>> 16;
          c7 = h7 & 65535;
          d6 = h7 >>> 16;
          h7 = th;
          l7 = tl;
          a5 += l7 & 65535;
          b5 += l7 >>> 16;
          c7 += h7 & 65535;
          d6 += h7 >>> 16;
          b5 += a5 >>> 16;
          c7 += b5 >>> 16;
          d6 += c7 >>> 16;
          bh3 = c7 & 65535 | d6 << 16;
          bl3 = a5 & 65535 | b5 << 16;
          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;
          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;
          if (i6 % 16 === 15) {
            for (var j5 = 0; j5 < 16; j5++) {
              h7 = wh[j5];
              l7 = wl[j5];
              a5 = l7 & 65535;
              b5 = l7 >>> 16;
              c7 = h7 & 65535;
              d6 = h7 >>> 16;
              h7 = wh[(j5 + 9) % 16];
              l7 = wl[(j5 + 9) % 16];
              a5 += l7 & 65535;
              b5 += l7 >>> 16;
              c7 += h7 & 65535;
              d6 += h7 >>> 16;
              th = wh[(j5 + 1) % 16];
              tl = wl[(j5 + 1) % 16];
              h7 = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
              l7 = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
              a5 += l7 & 65535;
              b5 += l7 >>> 16;
              c7 += h7 & 65535;
              d6 += h7 >>> 16;
              th = wh[(j5 + 14) % 16];
              tl = wl[(j5 + 14) % 16];
              h7 = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
              l7 = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
              a5 += l7 & 65535;
              b5 += l7 >>> 16;
              c7 += h7 & 65535;
              d6 += h7 >>> 16;
              b5 += a5 >>> 16;
              c7 += b5 >>> 16;
              d6 += c7 >>> 16;
              wh[j5] = c7 & 65535 | d6 << 16;
              wl[j5] = a5 & 65535 | b5 << 16;
            }
          }
        }
        h7 = ah0;
        l7 = al0;
        a5 = l7 & 65535;
        b5 = l7 >>> 16;
        c7 = h7 & 65535;
        d6 = h7 >>> 16;
        h7 = hh[0];
        l7 = hl[0];
        a5 += l7 & 65535;
        b5 += l7 >>> 16;
        c7 += h7 & 65535;
        d6 += h7 >>> 16;
        b5 += a5 >>> 16;
        c7 += b5 >>> 16;
        d6 += c7 >>> 16;
        hh[0] = ah0 = c7 & 65535 | d6 << 16;
        hl[0] = al0 = a5 & 65535 | b5 << 16;
        h7 = ah1;
        l7 = al1;
        a5 = l7 & 65535;
        b5 = l7 >>> 16;
        c7 = h7 & 65535;
        d6 = h7 >>> 16;
        h7 = hh[1];
        l7 = hl[1];
        a5 += l7 & 65535;
        b5 += l7 >>> 16;
        c7 += h7 & 65535;
        d6 += h7 >>> 16;
        b5 += a5 >>> 16;
        c7 += b5 >>> 16;
        d6 += c7 >>> 16;
        hh[1] = ah1 = c7 & 65535 | d6 << 16;
        hl[1] = al1 = a5 & 65535 | b5 << 16;
        h7 = ah2;
        l7 = al2;
        a5 = l7 & 65535;
        b5 = l7 >>> 16;
        c7 = h7 & 65535;
        d6 = h7 >>> 16;
        h7 = hh[2];
        l7 = hl[2];
        a5 += l7 & 65535;
        b5 += l7 >>> 16;
        c7 += h7 & 65535;
        d6 += h7 >>> 16;
        b5 += a5 >>> 16;
        c7 += b5 >>> 16;
        d6 += c7 >>> 16;
        hh[2] = ah2 = c7 & 65535 | d6 << 16;
        hl[2] = al2 = a5 & 65535 | b5 << 16;
        h7 = ah3;
        l7 = al3;
        a5 = l7 & 65535;
        b5 = l7 >>> 16;
        c7 = h7 & 65535;
        d6 = h7 >>> 16;
        h7 = hh[3];
        l7 = hl[3];
        a5 += l7 & 65535;
        b5 += l7 >>> 16;
        c7 += h7 & 65535;
        d6 += h7 >>> 16;
        b5 += a5 >>> 16;
        c7 += b5 >>> 16;
        d6 += c7 >>> 16;
        hh[3] = ah3 = c7 & 65535 | d6 << 16;
        hl[3] = al3 = a5 & 65535 | b5 << 16;
        h7 = ah4;
        l7 = al4;
        a5 = l7 & 65535;
        b5 = l7 >>> 16;
        c7 = h7 & 65535;
        d6 = h7 >>> 16;
        h7 = hh[4];
        l7 = hl[4];
        a5 += l7 & 65535;
        b5 += l7 >>> 16;
        c7 += h7 & 65535;
        d6 += h7 >>> 16;
        b5 += a5 >>> 16;
        c7 += b5 >>> 16;
        d6 += c7 >>> 16;
        hh[4] = ah4 = c7 & 65535 | d6 << 16;
        hl[4] = al4 = a5 & 65535 | b5 << 16;
        h7 = ah5;
        l7 = al5;
        a5 = l7 & 65535;
        b5 = l7 >>> 16;
        c7 = h7 & 65535;
        d6 = h7 >>> 16;
        h7 = hh[5];
        l7 = hl[5];
        a5 += l7 & 65535;
        b5 += l7 >>> 16;
        c7 += h7 & 65535;
        d6 += h7 >>> 16;
        b5 += a5 >>> 16;
        c7 += b5 >>> 16;
        d6 += c7 >>> 16;
        hh[5] = ah5 = c7 & 65535 | d6 << 16;
        hl[5] = al5 = a5 & 65535 | b5 << 16;
        h7 = ah6;
        l7 = al6;
        a5 = l7 & 65535;
        b5 = l7 >>> 16;
        c7 = h7 & 65535;
        d6 = h7 >>> 16;
        h7 = hh[6];
        l7 = hl[6];
        a5 += l7 & 65535;
        b5 += l7 >>> 16;
        c7 += h7 & 65535;
        d6 += h7 >>> 16;
        b5 += a5 >>> 16;
        c7 += b5 >>> 16;
        d6 += c7 >>> 16;
        hh[6] = ah6 = c7 & 65535 | d6 << 16;
        hl[6] = al6 = a5 & 65535 | b5 << 16;
        h7 = ah7;
        l7 = al7;
        a5 = l7 & 65535;
        b5 = l7 >>> 16;
        c7 = h7 & 65535;
        d6 = h7 >>> 16;
        h7 = hh[7];
        l7 = hl[7];
        a5 += l7 & 65535;
        b5 += l7 >>> 16;
        c7 += h7 & 65535;
        d6 += h7 >>> 16;
        b5 += a5 >>> 16;
        c7 += b5 >>> 16;
        d6 += c7 >>> 16;
        hh[7] = ah7 = c7 & 65535 | d6 << 16;
        hl[7] = al7 = a5 & 65535 | b5 << 16;
        pos += 128;
        len -= 128;
      }
      return pos;
    }
    function hash2(data) {
      var h7 = new SHA512();
      h7.update(data);
      var digest2 = h7.digest();
      h7.clean();
      return digest2;
    }
    exports.hash = hash2;
  }
});

// node_modules/@stablelib/ed25519/lib/ed25519.js
var require_ed25519 = __commonJS({
  "node_modules/@stablelib/ed25519/lib/ed25519.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertSecretKeyToX25519 = exports.convertPublicKeyToX25519 = exports.verify = exports.sign = exports.extractPublicKeyFromSecretKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.SEED_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = exports.SIGNATURE_LENGTH = void 0;
    var random_1 = require_random();
    var sha512_1 = require_sha512();
    var wipe_1 = require_wipe();
    exports.SIGNATURE_LENGTH = 64;
    exports.PUBLIC_KEY_LENGTH = 32;
    exports.SECRET_KEY_LENGTH = 64;
    exports.SEED_LENGTH = 32;
    function gf(init2) {
      const r6 = new Float64Array(16);
      if (init2) {
        for (let i6 = 0; i6 < init2.length; i6++) {
          r6[i6] = init2[i6];
        }
      }
      return r6;
    }
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var gf0 = gf();
    var gf1 = gf([1]);
    var D6 = gf([
      30883,
      4953,
      19914,
      30187,
      55467,
      16705,
      2637,
      112,
      59544,
      30585,
      16505,
      36039,
      65139,
      11119,
      27886,
      20995
    ]);
    var D22 = gf([
      61785,
      9906,
      39828,
      60374,
      45398,
      33411,
      5274,
      224,
      53552,
      61171,
      33010,
      6542,
      64743,
      22239,
      55772,
      9222
    ]);
    var X4 = gf([
      54554,
      36645,
      11616,
      51542,
      42930,
      38181,
      51040,
      26924,
      56412,
      64982,
      57905,
      49316,
      21502,
      52590,
      14035,
      8553
    ]);
    var Y3 = gf([
      26200,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214,
      26214
    ]);
    var I6 = gf([
      41136,
      18958,
      6951,
      50414,
      58488,
      44335,
      6150,
      12099,
      55207,
      15867,
      153,
      11085,
      57099,
      20417,
      9344,
      11139
    ]);
    function set25519(r6, a5) {
      for (let i6 = 0; i6 < 16; i6++) {
        r6[i6] = a5[i6] | 0;
      }
    }
    function car25519(o6) {
      let c7 = 1;
      for (let i6 = 0; i6 < 16; i6++) {
        let v8 = o6[i6] + c7 + 65535;
        c7 = Math.floor(v8 / 65536);
        o6[i6] = v8 - c7 * 65536;
      }
      o6[0] += c7 - 1 + 37 * (c7 - 1);
    }
    function sel25519(p5, q4, b5) {
      const c7 = ~(b5 - 1);
      for (let i6 = 0; i6 < 16; i6++) {
        const t3 = c7 & (p5[i6] ^ q4[i6]);
        p5[i6] ^= t3;
        q4[i6] ^= t3;
      }
    }
    function pack25519(o6, n6) {
      const m4 = gf();
      const t3 = gf();
      for (let i6 = 0; i6 < 16; i6++) {
        t3[i6] = n6[i6];
      }
      car25519(t3);
      car25519(t3);
      car25519(t3);
      for (let j5 = 0; j5 < 2; j5++) {
        m4[0] = t3[0] - 65517;
        for (let i6 = 1; i6 < 15; i6++) {
          m4[i6] = t3[i6] - 65535 - (m4[i6 - 1] >> 16 & 1);
          m4[i6 - 1] &= 65535;
        }
        m4[15] = t3[15] - 32767 - (m4[14] >> 16 & 1);
        const b5 = m4[15] >> 16 & 1;
        m4[14] &= 65535;
        sel25519(t3, m4, 1 - b5);
      }
      for (let i6 = 0; i6 < 16; i6++) {
        o6[2 * i6] = t3[i6] & 255;
        o6[2 * i6 + 1] = t3[i6] >> 8;
      }
    }
    function verify32(x8, y7) {
      let d6 = 0;
      for (let i6 = 0; i6 < 32; i6++) {
        d6 |= x8[i6] ^ y7[i6];
      }
      return (1 & d6 - 1 >>> 8) - 1;
    }
    function neq25519(a5, b5) {
      const c7 = new Uint8Array(32);
      const d6 = new Uint8Array(32);
      pack25519(c7, a5);
      pack25519(d6, b5);
      return verify32(c7, d6);
    }
    function par25519(a5) {
      const d6 = new Uint8Array(32);
      pack25519(d6, a5);
      return d6[0] & 1;
    }
    function unpack25519(o6, n6) {
      for (let i6 = 0; i6 < 16; i6++) {
        o6[i6] = n6[2 * i6] + (n6[2 * i6 + 1] << 8);
      }
      o6[15] &= 32767;
    }
    function add3(o6, a5, b5) {
      for (let i6 = 0; i6 < 16; i6++) {
        o6[i6] = a5[i6] + b5[i6];
      }
    }
    function sub(o6, a5, b5) {
      for (let i6 = 0; i6 < 16; i6++) {
        o6[i6] = a5[i6] - b5[i6];
      }
    }
    function mul3(o6, a5, b5) {
      let v8, c7, t0 = 0, t1 = 0, t22 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t222 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b5[0], b1 = b5[1], b22 = b5[2], b32 = b5[3], b42 = b5[4], b52 = b5[5], b6 = b5[6], b7 = b5[7], b8 = b5[8], b9 = b5[9], b10 = b5[10], b11 = b5[11], b12 = b5[12], b13 = b5[13], b14 = b5[14], b15 = b5[15];
      v8 = a5[0];
      t0 += v8 * b0;
      t1 += v8 * b1;
      t22 += v8 * b22;
      t3 += v8 * b32;
      t4 += v8 * b42;
      t5 += v8 * b52;
      t6 += v8 * b6;
      t7 += v8 * b7;
      t8 += v8 * b8;
      t9 += v8 * b9;
      t10 += v8 * b10;
      t11 += v8 * b11;
      t12 += v8 * b12;
      t13 += v8 * b13;
      t14 += v8 * b14;
      t15 += v8 * b15;
      v8 = a5[1];
      t1 += v8 * b0;
      t22 += v8 * b1;
      t3 += v8 * b22;
      t4 += v8 * b32;
      t5 += v8 * b42;
      t6 += v8 * b52;
      t7 += v8 * b6;
      t8 += v8 * b7;
      t9 += v8 * b8;
      t10 += v8 * b9;
      t11 += v8 * b10;
      t12 += v8 * b11;
      t13 += v8 * b12;
      t14 += v8 * b13;
      t15 += v8 * b14;
      t16 += v8 * b15;
      v8 = a5[2];
      t22 += v8 * b0;
      t3 += v8 * b1;
      t4 += v8 * b22;
      t5 += v8 * b32;
      t6 += v8 * b42;
      t7 += v8 * b52;
      t8 += v8 * b6;
      t9 += v8 * b7;
      t10 += v8 * b8;
      t11 += v8 * b9;
      t12 += v8 * b10;
      t13 += v8 * b11;
      t14 += v8 * b12;
      t15 += v8 * b13;
      t16 += v8 * b14;
      t17 += v8 * b15;
      v8 = a5[3];
      t3 += v8 * b0;
      t4 += v8 * b1;
      t5 += v8 * b22;
      t6 += v8 * b32;
      t7 += v8 * b42;
      t8 += v8 * b52;
      t9 += v8 * b6;
      t10 += v8 * b7;
      t11 += v8 * b8;
      t12 += v8 * b9;
      t13 += v8 * b10;
      t14 += v8 * b11;
      t15 += v8 * b12;
      t16 += v8 * b13;
      t17 += v8 * b14;
      t18 += v8 * b15;
      v8 = a5[4];
      t4 += v8 * b0;
      t5 += v8 * b1;
      t6 += v8 * b22;
      t7 += v8 * b32;
      t8 += v8 * b42;
      t9 += v8 * b52;
      t10 += v8 * b6;
      t11 += v8 * b7;
      t12 += v8 * b8;
      t13 += v8 * b9;
      t14 += v8 * b10;
      t15 += v8 * b11;
      t16 += v8 * b12;
      t17 += v8 * b13;
      t18 += v8 * b14;
      t19 += v8 * b15;
      v8 = a5[5];
      t5 += v8 * b0;
      t6 += v8 * b1;
      t7 += v8 * b22;
      t8 += v8 * b32;
      t9 += v8 * b42;
      t10 += v8 * b52;
      t11 += v8 * b6;
      t12 += v8 * b7;
      t13 += v8 * b8;
      t14 += v8 * b9;
      t15 += v8 * b10;
      t16 += v8 * b11;
      t17 += v8 * b12;
      t18 += v8 * b13;
      t19 += v8 * b14;
      t20 += v8 * b15;
      v8 = a5[6];
      t6 += v8 * b0;
      t7 += v8 * b1;
      t8 += v8 * b22;
      t9 += v8 * b32;
      t10 += v8 * b42;
      t11 += v8 * b52;
      t12 += v8 * b6;
      t13 += v8 * b7;
      t14 += v8 * b8;
      t15 += v8 * b9;
      t16 += v8 * b10;
      t17 += v8 * b11;
      t18 += v8 * b12;
      t19 += v8 * b13;
      t20 += v8 * b14;
      t21 += v8 * b15;
      v8 = a5[7];
      t7 += v8 * b0;
      t8 += v8 * b1;
      t9 += v8 * b22;
      t10 += v8 * b32;
      t11 += v8 * b42;
      t12 += v8 * b52;
      t13 += v8 * b6;
      t14 += v8 * b7;
      t15 += v8 * b8;
      t16 += v8 * b9;
      t17 += v8 * b10;
      t18 += v8 * b11;
      t19 += v8 * b12;
      t20 += v8 * b13;
      t21 += v8 * b14;
      t222 += v8 * b15;
      v8 = a5[8];
      t8 += v8 * b0;
      t9 += v8 * b1;
      t10 += v8 * b22;
      t11 += v8 * b32;
      t12 += v8 * b42;
      t13 += v8 * b52;
      t14 += v8 * b6;
      t15 += v8 * b7;
      t16 += v8 * b8;
      t17 += v8 * b9;
      t18 += v8 * b10;
      t19 += v8 * b11;
      t20 += v8 * b12;
      t21 += v8 * b13;
      t222 += v8 * b14;
      t23 += v8 * b15;
      v8 = a5[9];
      t9 += v8 * b0;
      t10 += v8 * b1;
      t11 += v8 * b22;
      t12 += v8 * b32;
      t13 += v8 * b42;
      t14 += v8 * b52;
      t15 += v8 * b6;
      t16 += v8 * b7;
      t17 += v8 * b8;
      t18 += v8 * b9;
      t19 += v8 * b10;
      t20 += v8 * b11;
      t21 += v8 * b12;
      t222 += v8 * b13;
      t23 += v8 * b14;
      t24 += v8 * b15;
      v8 = a5[10];
      t10 += v8 * b0;
      t11 += v8 * b1;
      t12 += v8 * b22;
      t13 += v8 * b32;
      t14 += v8 * b42;
      t15 += v8 * b52;
      t16 += v8 * b6;
      t17 += v8 * b7;
      t18 += v8 * b8;
      t19 += v8 * b9;
      t20 += v8 * b10;
      t21 += v8 * b11;
      t222 += v8 * b12;
      t23 += v8 * b13;
      t24 += v8 * b14;
      t25 += v8 * b15;
      v8 = a5[11];
      t11 += v8 * b0;
      t12 += v8 * b1;
      t13 += v8 * b22;
      t14 += v8 * b32;
      t15 += v8 * b42;
      t16 += v8 * b52;
      t17 += v8 * b6;
      t18 += v8 * b7;
      t19 += v8 * b8;
      t20 += v8 * b9;
      t21 += v8 * b10;
      t222 += v8 * b11;
      t23 += v8 * b12;
      t24 += v8 * b13;
      t25 += v8 * b14;
      t26 += v8 * b15;
      v8 = a5[12];
      t12 += v8 * b0;
      t13 += v8 * b1;
      t14 += v8 * b22;
      t15 += v8 * b32;
      t16 += v8 * b42;
      t17 += v8 * b52;
      t18 += v8 * b6;
      t19 += v8 * b7;
      t20 += v8 * b8;
      t21 += v8 * b9;
      t222 += v8 * b10;
      t23 += v8 * b11;
      t24 += v8 * b12;
      t25 += v8 * b13;
      t26 += v8 * b14;
      t27 += v8 * b15;
      v8 = a5[13];
      t13 += v8 * b0;
      t14 += v8 * b1;
      t15 += v8 * b22;
      t16 += v8 * b32;
      t17 += v8 * b42;
      t18 += v8 * b52;
      t19 += v8 * b6;
      t20 += v8 * b7;
      t21 += v8 * b8;
      t222 += v8 * b9;
      t23 += v8 * b10;
      t24 += v8 * b11;
      t25 += v8 * b12;
      t26 += v8 * b13;
      t27 += v8 * b14;
      t28 += v8 * b15;
      v8 = a5[14];
      t14 += v8 * b0;
      t15 += v8 * b1;
      t16 += v8 * b22;
      t17 += v8 * b32;
      t18 += v8 * b42;
      t19 += v8 * b52;
      t20 += v8 * b6;
      t21 += v8 * b7;
      t222 += v8 * b8;
      t23 += v8 * b9;
      t24 += v8 * b10;
      t25 += v8 * b11;
      t26 += v8 * b12;
      t27 += v8 * b13;
      t28 += v8 * b14;
      t29 += v8 * b15;
      v8 = a5[15];
      t15 += v8 * b0;
      t16 += v8 * b1;
      t17 += v8 * b22;
      t18 += v8 * b32;
      t19 += v8 * b42;
      t20 += v8 * b52;
      t21 += v8 * b6;
      t222 += v8 * b7;
      t23 += v8 * b8;
      t24 += v8 * b9;
      t25 += v8 * b10;
      t26 += v8 * b11;
      t27 += v8 * b12;
      t28 += v8 * b13;
      t29 += v8 * b14;
      t30 += v8 * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t22 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t222;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      c7 = 1;
      v8 = t0 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t0 = v8 - c7 * 65536;
      v8 = t1 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t1 = v8 - c7 * 65536;
      v8 = t22 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t22 = v8 - c7 * 65536;
      v8 = t3 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t3 = v8 - c7 * 65536;
      v8 = t4 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t4 = v8 - c7 * 65536;
      v8 = t5 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t5 = v8 - c7 * 65536;
      v8 = t6 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t6 = v8 - c7 * 65536;
      v8 = t7 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t7 = v8 - c7 * 65536;
      v8 = t8 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t8 = v8 - c7 * 65536;
      v8 = t9 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t9 = v8 - c7 * 65536;
      v8 = t10 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t10 = v8 - c7 * 65536;
      v8 = t11 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t11 = v8 - c7 * 65536;
      v8 = t12 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t12 = v8 - c7 * 65536;
      v8 = t13 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t13 = v8 - c7 * 65536;
      v8 = t14 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t14 = v8 - c7 * 65536;
      v8 = t15 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t15 = v8 - c7 * 65536;
      t0 += c7 - 1 + 37 * (c7 - 1);
      c7 = 1;
      v8 = t0 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t0 = v8 - c7 * 65536;
      v8 = t1 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t1 = v8 - c7 * 65536;
      v8 = t22 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t22 = v8 - c7 * 65536;
      v8 = t3 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t3 = v8 - c7 * 65536;
      v8 = t4 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t4 = v8 - c7 * 65536;
      v8 = t5 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t5 = v8 - c7 * 65536;
      v8 = t6 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t6 = v8 - c7 * 65536;
      v8 = t7 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t7 = v8 - c7 * 65536;
      v8 = t8 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t8 = v8 - c7 * 65536;
      v8 = t9 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t9 = v8 - c7 * 65536;
      v8 = t10 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t10 = v8 - c7 * 65536;
      v8 = t11 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t11 = v8 - c7 * 65536;
      v8 = t12 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t12 = v8 - c7 * 65536;
      v8 = t13 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t13 = v8 - c7 * 65536;
      v8 = t14 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t14 = v8 - c7 * 65536;
      v8 = t15 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t15 = v8 - c7 * 65536;
      t0 += c7 - 1 + 37 * (c7 - 1);
      o6[0] = t0;
      o6[1] = t1;
      o6[2] = t22;
      o6[3] = t3;
      o6[4] = t4;
      o6[5] = t5;
      o6[6] = t6;
      o6[7] = t7;
      o6[8] = t8;
      o6[9] = t9;
      o6[10] = t10;
      o6[11] = t11;
      o6[12] = t12;
      o6[13] = t13;
      o6[14] = t14;
      o6[15] = t15;
    }
    function square(o6, a5) {
      mul3(o6, a5, a5);
    }
    function inv25519(o6, i6) {
      const c7 = gf();
      let a5;
      for (a5 = 0; a5 < 16; a5++) {
        c7[a5] = i6[a5];
      }
      for (a5 = 253; a5 >= 0; a5--) {
        square(c7, c7);
        if (a5 !== 2 && a5 !== 4) {
          mul3(c7, c7, i6);
        }
      }
      for (a5 = 0; a5 < 16; a5++) {
        o6[a5] = c7[a5];
      }
    }
    function pow2523(o6, i6) {
      const c7 = gf();
      let a5;
      for (a5 = 0; a5 < 16; a5++) {
        c7[a5] = i6[a5];
      }
      for (a5 = 250; a5 >= 0; a5--) {
        square(c7, c7);
        if (a5 !== 1) {
          mul3(c7, c7, i6);
        }
      }
      for (a5 = 0; a5 < 16; a5++) {
        o6[a5] = c7[a5];
      }
    }
    function edadd(p5, q4) {
      const a5 = gf(), b5 = gf(), c7 = gf(), d6 = gf(), e4 = gf(), f5 = gf(), g7 = gf(), h7 = gf(), t3 = gf();
      sub(a5, p5[1], p5[0]);
      sub(t3, q4[1], q4[0]);
      mul3(a5, a5, t3);
      add3(b5, p5[0], p5[1]);
      add3(t3, q4[0], q4[1]);
      mul3(b5, b5, t3);
      mul3(c7, p5[3], q4[3]);
      mul3(c7, c7, D22);
      mul3(d6, p5[2], q4[2]);
      add3(d6, d6, d6);
      sub(e4, b5, a5);
      sub(f5, d6, c7);
      add3(g7, d6, c7);
      add3(h7, b5, a5);
      mul3(p5[0], e4, f5);
      mul3(p5[1], h7, g7);
      mul3(p5[2], g7, f5);
      mul3(p5[3], e4, h7);
    }
    function cswap(p5, q4, b5) {
      for (let i6 = 0; i6 < 4; i6++) {
        sel25519(p5[i6], q4[i6], b5);
      }
    }
    function pack(r6, p5) {
      const tx = gf(), ty = gf(), zi = gf();
      inv25519(zi, p5[2]);
      mul3(tx, p5[0], zi);
      mul3(ty, p5[1], zi);
      pack25519(r6, ty);
      r6[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p5, q4, s5) {
      set25519(p5[0], gf0);
      set25519(p5[1], gf1);
      set25519(p5[2], gf1);
      set25519(p5[3], gf0);
      for (let i6 = 255; i6 >= 0; --i6) {
        const b5 = s5[i6 / 8 | 0] >> (i6 & 7) & 1;
        cswap(p5, q4, b5);
        edadd(q4, p5);
        edadd(p5, p5);
        cswap(p5, q4, b5);
      }
    }
    function scalarbase(p5, s5) {
      const q4 = [gf(), gf(), gf(), gf()];
      set25519(q4[0], X4);
      set25519(q4[1], Y3);
      set25519(q4[2], gf1);
      mul3(q4[3], X4, Y3);
      scalarmult(p5, q4, s5);
    }
    function generateKeyPairFromSeed2(seed) {
      if (seed.length !== exports.SEED_LENGTH) {
        throw new Error(`ed25519: seed must be ${exports.SEED_LENGTH} bytes`);
      }
      const d6 = (0, sha512_1.hash)(seed);
      d6[0] &= 248;
      d6[31] &= 127;
      d6[31] |= 64;
      const publicKey = new Uint8Array(32);
      const p5 = [gf(), gf(), gf(), gf()];
      scalarbase(p5, d6);
      pack(publicKey, p5);
      const secretKey = new Uint8Array(64);
      secretKey.set(seed);
      secretKey.set(publicKey, 32);
      return {
        publicKey,
        secretKey
      };
    }
    exports.generateKeyPairFromSeed = generateKeyPairFromSeed2;
    function generateKeyPair3(prng) {
      const seed = (0, random_1.randomBytes)(32, prng);
      const result = generateKeyPairFromSeed2(seed);
      (0, wipe_1.wipe)(seed);
      return result;
    }
    exports.generateKeyPair = generateKeyPair3;
    function extractPublicKeyFromSecretKey(secretKey) {
      if (secretKey.length !== exports.SECRET_KEY_LENGTH) {
        throw new Error(`ed25519: secret key must be ${exports.SECRET_KEY_LENGTH} bytes`);
      }
      return new Uint8Array(secretKey.subarray(32));
    }
    exports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;
    var L5 = new Float64Array([
      237,
      211,
      245,
      92,
      26,
      99,
      18,
      88,
      214,
      156,
      247,
      162,
      222,
      249,
      222,
      20,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      16
    ]);
    function modL(r6, x8) {
      let carry;
      let i6;
      let j5;
      let k7;
      for (i6 = 63; i6 >= 32; --i6) {
        carry = 0;
        for (j5 = i6 - 32, k7 = i6 - 12; j5 < k7; ++j5) {
          x8[j5] += carry - 16 * x8[i6] * L5[j5 - (i6 - 32)];
          carry = Math.floor((x8[j5] + 128) / 256);
          x8[j5] -= carry * 256;
        }
        x8[j5] += carry;
        x8[i6] = 0;
      }
      carry = 0;
      for (j5 = 0; j5 < 32; j5++) {
        x8[j5] += carry - (x8[31] >> 4) * L5[j5];
        carry = x8[j5] >> 8;
        x8[j5] &= 255;
      }
      for (j5 = 0; j5 < 32; j5++) {
        x8[j5] -= carry * L5[j5];
      }
      for (i6 = 0; i6 < 32; i6++) {
        x8[i6 + 1] += x8[i6] >> 8;
        r6[i6] = x8[i6] & 255;
      }
    }
    function reduce(r6) {
      const x8 = new Float64Array(64);
      for (let i6 = 0; i6 < 64; i6++) {
        x8[i6] = r6[i6];
      }
      for (let i6 = 0; i6 < 64; i6++) {
        r6[i6] = 0;
      }
      modL(r6, x8);
    }
    function sign4(secretKey, message) {
      const x8 = new Float64Array(64);
      const p5 = [gf(), gf(), gf(), gf()];
      const d6 = (0, sha512_1.hash)(secretKey.subarray(0, 32));
      d6[0] &= 248;
      d6[31] &= 127;
      d6[31] |= 64;
      const signature2 = new Uint8Array(64);
      signature2.set(d6.subarray(32), 32);
      const hs = new sha512_1.SHA512();
      hs.update(signature2.subarray(32));
      hs.update(message);
      const r6 = hs.digest();
      hs.clean();
      reduce(r6);
      scalarbase(p5, r6);
      pack(signature2, p5);
      hs.reset();
      hs.update(signature2.subarray(0, 32));
      hs.update(secretKey.subarray(32));
      hs.update(message);
      const h7 = hs.digest();
      reduce(h7);
      for (let i6 = 0; i6 < 32; i6++) {
        x8[i6] = r6[i6];
      }
      for (let i6 = 0; i6 < 32; i6++) {
        for (let j5 = 0; j5 < 32; j5++) {
          x8[i6 + j5] += h7[i6] * d6[j5];
        }
      }
      modL(signature2.subarray(32), x8);
      return signature2;
    }
    exports.sign = sign4;
    function unpackneg(r6, p5) {
      const t3 = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
      set25519(r6[2], gf1);
      unpack25519(r6[1], p5);
      square(num, r6[1]);
      mul3(den, num, D6);
      sub(num, num, r6[2]);
      add3(den, r6[2], den);
      square(den2, den);
      square(den4, den2);
      mul3(den6, den4, den2);
      mul3(t3, den6, num);
      mul3(t3, t3, den);
      pow2523(t3, t3);
      mul3(t3, t3, num);
      mul3(t3, t3, den);
      mul3(t3, t3, den);
      mul3(r6[0], t3, den);
      square(chk, r6[0]);
      mul3(chk, chk, den);
      if (neq25519(chk, num)) {
        mul3(r6[0], r6[0], I6);
      }
      square(chk, r6[0]);
      mul3(chk, chk, den);
      if (neq25519(chk, num)) {
        return -1;
      }
      if (par25519(r6[0]) === p5[31] >> 7) {
        sub(r6[0], gf0, r6[0]);
      }
      mul3(r6[3], r6[0], r6[1]);
      return 0;
    }
    function verify4(publicKey, message, signature2) {
      const t3 = new Uint8Array(32);
      const p5 = [gf(), gf(), gf(), gf()];
      const q4 = [gf(), gf(), gf(), gf()];
      if (signature2.length !== exports.SIGNATURE_LENGTH) {
        throw new Error(`ed25519: signature must be ${exports.SIGNATURE_LENGTH} bytes`);
      }
      if (unpackneg(q4, publicKey)) {
        return false;
      }
      const hs = new sha512_1.SHA512();
      hs.update(signature2.subarray(0, 32));
      hs.update(publicKey);
      hs.update(message);
      const h7 = hs.digest();
      reduce(h7);
      scalarmult(p5, q4, h7);
      scalarbase(q4, signature2.subarray(32));
      edadd(p5, q4);
      pack(t3, p5);
      if (verify32(signature2, t3)) {
        return false;
      }
      return true;
    }
    exports.verify = verify4;
    function convertPublicKeyToX25519(publicKey) {
      let q4 = [gf(), gf(), gf(), gf()];
      if (unpackneg(q4, publicKey)) {
        throw new Error("Ed25519: invalid public key");
      }
      let a5 = gf();
      let b5 = gf();
      let y7 = q4[1];
      add3(a5, gf1, y7);
      sub(b5, gf1, y7);
      inv25519(b5, b5);
      mul3(a5, a5, b5);
      let z7 = new Uint8Array(32);
      pack25519(z7, a5);
      return z7;
    }
    exports.convertPublicKeyToX25519 = convertPublicKeyToX25519;
    function convertSecretKeyToX25519(secretKey) {
      const d6 = (0, sha512_1.hash)(secretKey.subarray(0, 32));
      d6[0] &= 248;
      d6[31] &= 127;
      d6[31] |= 64;
      const o6 = new Uint8Array(d6.subarray(0, 32));
      (0, wipe_1.wipe)(d6);
      return o6;
    }
    exports.convertSecretKeyToX25519 = convertSecretKeyToX25519;
  }
});

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs6 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow3(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow3;
    function getFromWindowOrThrow3(name2) {
      const res = getFromWindow3(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow3;
    function getDocumentOrThrow3() {
      return getFromWindowOrThrow3("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow3;
    function getDocument3() {
      return getFromWindow3("document");
    }
    exports.getDocument = getDocument3;
    function getNavigatorOrThrow3() {
      return getFromWindowOrThrow3("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow3;
    function getNavigator3() {
      return getFromWindow3("navigator");
    }
    exports.getNavigator = getNavigator3;
    function getLocationOrThrow3() {
      return getFromWindowOrThrow3("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow3;
    function getLocation3() {
      return getFromWindow3("location");
    }
    exports.getLocation = getLocation3;
    function getCryptoOrThrow3() {
      return getFromWindowOrThrow3("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow3;
    function getCrypto3() {
      return getFromWindow3("crypto");
    }
    exports.getCrypto = getCrypto3;
    function getLocalStorageOrThrow3() {
      return getFromWindowOrThrow3("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow3;
    function getLocalStorage3() {
      return getFromWindow3("localStorage");
    }
    exports.getLocalStorage = getLocalStorage3;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs7 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs6();
    function getWindowMetadata2() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e4) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i6 = 0; i6 < links.length; i6++) {
          const link = links[i6];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i6 = 0; i6 < metaTags.length; i6++) {
          const tag = metaTags[i6];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata2;
  }
});

// node_modules/strict-uri-encode/index.js
var require_strict_uri_encode = __commonJS({
  "node_modules/strict-uri-encode/index.js"(exports, module) {
    "use strict";
    module.exports = (str) => encodeURIComponent(str).replace(/[!'()*]/g, (x8) => `%${x8.charCodeAt(0).toString(16).toUpperCase()}`);
  }
});

// node_modules/decode-uri-component/index.js
var require_decode_uri_component = __commonJS({
  "node_modules/decode-uri-component/index.js"(exports, module) {
    "use strict";
    var token = "%[a-f0-9]{2}";
    var singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi");
    var multiMatcher = new RegExp("(" + token + ")+", "gi");
    function decodeComponents(components, split) {
      try {
        return [decodeURIComponent(components.join(""))];
      } catch (err) {
      }
      if (components.length === 1) {
        return components;
      }
      split = split || 1;
      var left = components.slice(0, split);
      var right = components.slice(split);
      return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }
    function decode8(input) {
      try {
        return decodeURIComponent(input);
      } catch (err) {
        var tokens = input.match(singleMatcher) || [];
        for (var i6 = 1; i6 < tokens.length; i6++) {
          input = decodeComponents(tokens, i6).join("");
          tokens = input.match(singleMatcher) || [];
        }
        return input;
      }
    }
    function customDecodeURIComponent(input) {
      var replaceMap = {
        "%FE%FF": "��",
        "%FF%FE": "��"
      };
      var match = multiMatcher.exec(input);
      while (match) {
        try {
          replaceMap[match[0]] = decodeURIComponent(match[0]);
        } catch (err) {
          var result = decode8(match[0]);
          if (result !== match[0]) {
            replaceMap[match[0]] = result;
          }
        }
        match = multiMatcher.exec(input);
      }
      replaceMap["%C2"] = "�";
      var entries = Object.keys(replaceMap);
      for (var i6 = 0; i6 < entries.length; i6++) {
        var key2 = entries[i6];
        input = input.replace(new RegExp(key2, "g"), replaceMap[key2]);
      }
      return input;
    }
    module.exports = function(encodedURI) {
      if (typeof encodedURI !== "string") {
        throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
      }
      try {
        encodedURI = encodedURI.replace(/\+/g, " ");
        return decodeURIComponent(encodedURI);
      } catch (err) {
        return customDecodeURIComponent(encodedURI);
      }
    };
  }
});

// node_modules/split-on-first/index.js
var require_split_on_first = __commonJS({
  "node_modules/split-on-first/index.js"(exports, module) {
    "use strict";
    module.exports = (string3, separator) => {
      if (!(typeof string3 === "string" && typeof separator === "string")) {
        throw new TypeError("Expected the arguments to be of type `string`");
      }
      if (separator === "") {
        return [string3];
      }
      const separatorIndex = string3.indexOf(separator);
      if (separatorIndex === -1) {
        return [string3];
      }
      return [
        string3.slice(0, separatorIndex),
        string3.slice(separatorIndex + separator.length)
      ];
    };
  }
});

// node_modules/filter-obj/index.js
var require_filter_obj = __commonJS({
  "node_modules/filter-obj/index.js"(exports, module) {
    "use strict";
    module.exports = function(obj, predicate) {
      var ret = {};
      var keys2 = Object.keys(obj);
      var isArr = Array.isArray(predicate);
      for (var i6 = 0; i6 < keys2.length; i6++) {
        var key2 = keys2[i6];
        var val = obj[key2];
        if (isArr ? predicate.indexOf(key2) !== -1 : predicate(key2, val, obj)) {
          ret[key2] = val;
        }
      }
      return ret;
    };
  }
});

// node_modules/query-string/index.js
var require_query_string = __commonJS({
  "node_modules/query-string/index.js"(exports) {
    "use strict";
    var strictUriEncode = require_strict_uri_encode();
    var decodeComponent = require_decode_uri_component();
    var splitOnFirst = require_split_on_first();
    var filterObject = require_filter_obj();
    var isNullOrUndefined = (value) => value === null || value === void 0;
    var encodeFragmentIdentifier = Symbol("encodeFragmentIdentifier");
    function encoderForArrayFormat(options) {
      switch (options.arrayFormat) {
        case "index":
          return (key2) => (result, value) => {
            const index = result.length;
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            if (value === null) {
              return [...result, [encode8(key2, options), "[", index, "]"].join("")];
            }
            return [
              ...result,
              [encode8(key2, options), "[", encode8(index, options), "]=", encode8(value, options)].join("")
            ];
          };
        case "bracket":
          return (key2) => (result, value) => {
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            if (value === null) {
              return [...result, [encode8(key2, options), "[]"].join("")];
            }
            return [...result, [encode8(key2, options), "[]=", encode8(value, options)].join("")];
          };
        case "colon-list-separator":
          return (key2) => (result, value) => {
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            if (value === null) {
              return [...result, [encode8(key2, options), ":list="].join("")];
            }
            return [...result, [encode8(key2, options), ":list=", encode8(value, options)].join("")];
          };
        case "comma":
        case "separator":
        case "bracket-separator": {
          const keyValueSep = options.arrayFormat === "bracket-separator" ? "[]=" : "=";
          return (key2) => (result, value) => {
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            value = value === null ? "" : value;
            if (result.length === 0) {
              return [[encode8(key2, options), keyValueSep, encode8(value, options)].join("")];
            }
            return [[result, encode8(value, options)].join(options.arrayFormatSeparator)];
          };
        }
        default:
          return (key2) => (result, value) => {
            if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
              return result;
            }
            if (value === null) {
              return [...result, encode8(key2, options)];
            }
            return [...result, [encode8(key2, options), "=", encode8(value, options)].join("")];
          };
      }
    }
    function parserForArrayFormat(options) {
      let result;
      switch (options.arrayFormat) {
        case "index":
          return (key2, value, accumulator) => {
            result = /\[(\d*)\]$/.exec(key2);
            key2 = key2.replace(/\[\d*\]$/, "");
            if (!result) {
              accumulator[key2] = value;
              return;
            }
            if (accumulator[key2] === void 0) {
              accumulator[key2] = {};
            }
            accumulator[key2][result[1]] = value;
          };
        case "bracket":
          return (key2, value, accumulator) => {
            result = /(\[\])$/.exec(key2);
            key2 = key2.replace(/\[\]$/, "");
            if (!result) {
              accumulator[key2] = value;
              return;
            }
            if (accumulator[key2] === void 0) {
              accumulator[key2] = [value];
              return;
            }
            accumulator[key2] = [].concat(accumulator[key2], value);
          };
        case "colon-list-separator":
          return (key2, value, accumulator) => {
            result = /(:list)$/.exec(key2);
            key2 = key2.replace(/:list$/, "");
            if (!result) {
              accumulator[key2] = value;
              return;
            }
            if (accumulator[key2] === void 0) {
              accumulator[key2] = [value];
              return;
            }
            accumulator[key2] = [].concat(accumulator[key2], value);
          };
        case "comma":
        case "separator":
          return (key2, value, accumulator) => {
            const isArray = typeof value === "string" && value.includes(options.arrayFormatSeparator);
            const isEncodedArray = typeof value === "string" && !isArray && decode8(value, options).includes(options.arrayFormatSeparator);
            value = isEncodedArray ? decode8(value, options) : value;
            const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item) => decode8(item, options)) : value === null ? value : decode8(value, options);
            accumulator[key2] = newValue;
          };
        case "bracket-separator":
          return (key2, value, accumulator) => {
            const isArray = /(\[\])$/.test(key2);
            key2 = key2.replace(/\[\]$/, "");
            if (!isArray) {
              accumulator[key2] = value ? decode8(value, options) : value;
              return;
            }
            const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map((item) => decode8(item, options));
            if (accumulator[key2] === void 0) {
              accumulator[key2] = arrayValue;
              return;
            }
            accumulator[key2] = [].concat(accumulator[key2], arrayValue);
          };
        default:
          return (key2, value, accumulator) => {
            if (accumulator[key2] === void 0) {
              accumulator[key2] = value;
              return;
            }
            accumulator[key2] = [].concat(accumulator[key2], value);
          };
      }
    }
    function validateArrayFormatSeparator(value) {
      if (typeof value !== "string" || value.length !== 1) {
        throw new TypeError("arrayFormatSeparator must be single character string");
      }
    }
    function encode8(value, options) {
      if (options.encode) {
        return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
      }
      return value;
    }
    function decode8(value, options) {
      if (options.decode) {
        return decodeComponent(value);
      }
      return value;
    }
    function keysSorter(input) {
      if (Array.isArray(input)) {
        return input.sort();
      }
      if (typeof input === "object") {
        return keysSorter(Object.keys(input)).sort((a5, b5) => Number(a5) - Number(b5)).map((key2) => input[key2]);
      }
      return input;
    }
    function removeHash(input) {
      const hashStart = input.indexOf("#");
      if (hashStart !== -1) {
        input = input.slice(0, hashStart);
      }
      return input;
    }
    function getHash(url) {
      let hash2 = "";
      const hashStart = url.indexOf("#");
      if (hashStart !== -1) {
        hash2 = url.slice(hashStart);
      }
      return hash2;
    }
    function extract(input) {
      input = removeHash(input);
      const queryStart = input.indexOf("?");
      if (queryStart === -1) {
        return "";
      }
      return input.slice(queryStart + 1);
    }
    function parseValue(value, options) {
      if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === "string" && value.trim() !== "")) {
        value = Number(value);
      } else if (options.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
        value = value.toLowerCase() === "true";
      }
      return value;
    }
    function parse2(query, options) {
      options = Object.assign({
        decode: true,
        sort: true,
        arrayFormat: "none",
        arrayFormatSeparator: ",",
        parseNumbers: false,
        parseBooleans: false
      }, options);
      validateArrayFormatSeparator(options.arrayFormatSeparator);
      const formatter = parserForArrayFormat(options);
      const ret = /* @__PURE__ */ Object.create(null);
      if (typeof query !== "string") {
        return ret;
      }
      query = query.trim().replace(/^[?#&]/, "");
      if (!query) {
        return ret;
      }
      for (const param of query.split("&")) {
        if (param === "") {
          continue;
        }
        let [key2, value] = splitOnFirst(options.decode ? param.replace(/\+/g, " ") : param, "=");
        value = value === void 0 ? null : ["comma", "separator", "bracket-separator"].includes(options.arrayFormat) ? value : decode8(value, options);
        formatter(decode8(key2, options), value, ret);
      }
      for (const key2 of Object.keys(ret)) {
        const value = ret[key2];
        if (typeof value === "object" && value !== null) {
          for (const k7 of Object.keys(value)) {
            value[k7] = parseValue(value[k7], options);
          }
        } else {
          ret[key2] = parseValue(value, options);
        }
      }
      if (options.sort === false) {
        return ret;
      }
      return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key2) => {
        const value = ret[key2];
        if (Boolean(value) && typeof value === "object" && !Array.isArray(value)) {
          result[key2] = keysSorter(value);
        } else {
          result[key2] = value;
        }
        return result;
      }, /* @__PURE__ */ Object.create(null));
    }
    exports.extract = extract;
    exports.parse = parse2;
    exports.stringify = (object, options) => {
      if (!object) {
        return "";
      }
      options = Object.assign({
        encode: true,
        strict: true,
        arrayFormat: "none",
        arrayFormatSeparator: ","
      }, options);
      validateArrayFormatSeparator(options.arrayFormatSeparator);
      const shouldFilter = (key2) => options.skipNull && isNullOrUndefined(object[key2]) || options.skipEmptyString && object[key2] === "";
      const formatter = encoderForArrayFormat(options);
      const objectCopy = {};
      for (const key2 of Object.keys(object)) {
        if (!shouldFilter(key2)) {
          objectCopy[key2] = object[key2];
        }
      }
      const keys2 = Object.keys(objectCopy);
      if (options.sort !== false) {
        keys2.sort(options.sort);
      }
      return keys2.map((key2) => {
        const value = object[key2];
        if (value === void 0) {
          return "";
        }
        if (value === null) {
          return encode8(key2, options);
        }
        if (Array.isArray(value)) {
          if (value.length === 0 && options.arrayFormat === "bracket-separator") {
            return encode8(key2, options) + "[]";
          }
          return value.reduce(formatter(key2), []).join("&");
        }
        return encode8(key2, options) + "=" + encode8(value, options);
      }).filter((x8) => x8.length > 0).join("&");
    };
    exports.parseUrl = (url, options) => {
      options = Object.assign({
        decode: true
      }, options);
      const [url_, hash2] = splitOnFirst(url, "#");
      return Object.assign(
        {
          url: url_.split("?")[0] || "",
          query: parse2(extract(url), options)
        },
        options && options.parseFragmentIdentifier && hash2 ? { fragmentIdentifier: decode8(hash2, options) } : {}
      );
    };
    exports.stringifyUrl = (object, options) => {
      options = Object.assign({
        encode: true,
        strict: true,
        [encodeFragmentIdentifier]: true
      }, options);
      const url = removeHash(object.url).split("?")[0] || "";
      const queryFromUrl = exports.extract(object.url);
      const parsedQueryFromUrl = exports.parse(queryFromUrl, { sort: false });
      const query = Object.assign(parsedQueryFromUrl, object.query);
      let queryString = exports.stringify(query, options);
      if (queryString) {
        queryString = `?${queryString}`;
      }
      let hash2 = getHash(object.url);
      if (object.fragmentIdentifier) {
        hash2 = `#${options[encodeFragmentIdentifier] ? encode8(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
      }
      return `${url}${queryString}${hash2}`;
    };
    exports.pick = (input, filter, options) => {
      options = Object.assign({
        parseFragmentIdentifier: true,
        [encodeFragmentIdentifier]: false
      }, options);
      const { url, query, fragmentIdentifier } = exports.parseUrl(input, options);
      return exports.stringifyUrl({
        url,
        query: filterObject(query, filter),
        fragmentIdentifier
      }, options);
    };
    exports.exclude = (input, filter, options) => {
      const exclusionFilter = Array.isArray(filter) ? (key2) => !filter.includes(key2) : (key2, value) => !filter(key2, value);
      return exports.pick(input, exclusionFilter, options);
    };
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits, n6, s5) {
          return methods["cshake" + bits2].update(message, outputBits, n6, s5)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding2, outputType) {
        return function(key2, message, outputBits, s5) {
          return methods["kmac" + bits2].update(key2, message, outputBits, s5)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding2) {
        for (var i7 = 0; i7 < OUTPUT_TYPES.length; ++i7) {
          var type = OUTPUT_TYPES[i7];
          method[type] = createMethod2(bits2, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding2);
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding2);
      };
      var createCshakeMethod = function(bits2, padding2) {
        var w6 = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits, n6, s5) {
          if (!n6 && !s5) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding2, outputBits).bytepad([n6, s5], w6);
          }
        };
        method.update = function(message, outputBits, n6, s5) {
          return method.create(outputBits, n6, s5).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding2);
      };
      var createKmacMethod = function(bits2, padding2) {
        var w6 = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding2, "hex");
        method.create = function(key2, outputBits, s5) {
          return new Kmac(bits2, padding2, outputBits).bytepad(["KMAC", s5], w6).bytepad([key2], w6);
        };
        method.update = function(key2, message, outputBits, s5) {
          return method.create(key2, outputBits, s5).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i6 = 0; i6 < algorithms.length; ++i6) {
        var algorithm = algorithms[i6];
        var bits = algorithm.bits;
        for (var j5 = 0; j5 < bits.length; ++j5) {
          var methodName = algorithm.name + "_" + bits[j5];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j5], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j5];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i7 = 0; i7 < 50; ++i7) {
          this.s[i7] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length2 = message.length, blockCount = this.blockCount, index = 0, s5 = this.s, i7, code2;
        while (index < length2) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i7 = 1; i7 < blockCount + 1; ++i7) {
              blocks[i7] = 0;
            }
          }
          if (notString) {
            for (i7 = this.start; index < length2 && i7 < byteCount; ++index) {
              blocks[i7 >> 2] |= message[index] << SHIFT[i7++ & 3];
            }
          } else {
            for (i7 = this.start; index < length2 && i7 < byteCount; ++index) {
              code2 = message.charCodeAt(index);
              if (code2 < 128) {
                blocks[i7 >> 2] |= code2 << SHIFT[i7++ & 3];
              } else if (code2 < 2048) {
                blocks[i7 >> 2] |= (192 | code2 >> 6) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code2 & 63) << SHIFT[i7++ & 3];
              } else if (code2 < 55296 || code2 >= 57344) {
                blocks[i7 >> 2] |= (224 | code2 >> 12) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code2 & 63) << SHIFT[i7++ & 3];
              } else {
                code2 = 65536 + ((code2 & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i7 >> 2] |= (240 | code2 >> 18) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code2 >> 12 & 63) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code2 & 63) << SHIFT[i7++ & 3];
              }
            }
          }
          this.lastByteIndex = i7;
          if (i7 >= byteCount) {
            this.start = i7 - byteCount;
            this.block = blocks[blockCount];
            for (i7 = 0; i7 < blockCount; ++i7) {
              s5[i7] ^= blocks[i7];
            }
            f5(s5);
            this.reset = true;
          } else {
            this.start = i7;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x8, right) {
        var o6 = x8 & 255, n6 = 1;
        var bytes = [o6];
        x8 = x8 >> 8;
        o6 = x8 & 255;
        while (o6 > 0) {
          bytes.unshift(o6);
          x8 = x8 >> 8;
          o6 = x8 & 255;
          ++n6;
        }
        if (right) {
          bytes.push(n6);
        } else {
          bytes.unshift(n6);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length2 = str.length;
        if (notString) {
          bytes = length2;
        } else {
          for (var i7 = 0; i7 < str.length; ++i7) {
            var code2 = str.charCodeAt(i7);
            if (code2 < 128) {
              bytes += 1;
            } else if (code2 < 2048) {
              bytes += 2;
            } else if (code2 < 55296 || code2 >= 57344) {
              bytes += 3;
            } else {
              code2 = 65536 + ((code2 & 1023) << 10 | str.charCodeAt(++i7) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w6) {
        var bytes = this.encode(w6);
        for (var i7 = 0; i7 < strs.length; ++i7) {
          bytes += this.encodeString(strs[i7]);
        }
        var paddingBytes = w6 - bytes % w6;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i7 = this.lastByteIndex, blockCount = this.blockCount, s5 = this.s;
        blocks[i7 >> 2] |= this.padding[i7 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i7 = 1; i7 < blockCount + 1; ++i7) {
            blocks[i7] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i7 = 0; i7 < blockCount; ++i7) {
          s5[i7] ^= blocks[i7];
        }
        f5(s5);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s5 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i7 = 0, j6 = 0;
        var hex = "", block;
        while (j6 < outputBlocks) {
          for (i7 = 0; i7 < blockCount && j6 < outputBlocks; ++i7, ++j6) {
            block = s5[i7];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j6 % blockCount === 0) {
            f5(s5);
            i7 = 0;
          }
        }
        if (extraBytes) {
          block = s5[i7];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s5 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i7 = 0, j6 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j6 < outputBlocks) {
          for (i7 = 0; i7 < blockCount && j6 < outputBlocks; ++i7, ++j6) {
            array[j6] = s5[i7];
          }
          if (j6 % blockCount === 0) {
            f5(s5);
          }
        }
        if (extraBytes) {
          array[i7] = s5[i7];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s5 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i7 = 0, j6 = 0;
        var array = [], offset, block;
        while (j6 < outputBlocks) {
          for (i7 = 0; i7 < blockCount && j6 < outputBlocks; ++i7, ++j6) {
            offset = j6 << 2;
            block = s5[i7];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j6 % blockCount === 0) {
            f5(s5);
          }
        }
        if (extraBytes) {
          offset = j6 << 2;
          block = s5[i7];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding2, outputBits) {
        Keccak.call(this, bits2, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f5 = function(s5) {
        var h7, l7, n6, c0, c1, c22, c32, c42, c52, c62, c7, c8, c9, b0, b1, b22, b32, b42, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b222, b23, b24, b25, b26, b27, b28, b29, b30, b31, b322, b33, b34, b35, b36, b37, b38, b39, b40, b41, b422, b43, b44, b45, b46, b47, b48, b49;
        for (n6 = 0; n6 < 48; n6 += 2) {
          c0 = s5[0] ^ s5[10] ^ s5[20] ^ s5[30] ^ s5[40];
          c1 = s5[1] ^ s5[11] ^ s5[21] ^ s5[31] ^ s5[41];
          c22 = s5[2] ^ s5[12] ^ s5[22] ^ s5[32] ^ s5[42];
          c32 = s5[3] ^ s5[13] ^ s5[23] ^ s5[33] ^ s5[43];
          c42 = s5[4] ^ s5[14] ^ s5[24] ^ s5[34] ^ s5[44];
          c52 = s5[5] ^ s5[15] ^ s5[25] ^ s5[35] ^ s5[45];
          c62 = s5[6] ^ s5[16] ^ s5[26] ^ s5[36] ^ s5[46];
          c7 = s5[7] ^ s5[17] ^ s5[27] ^ s5[37] ^ s5[47];
          c8 = s5[8] ^ s5[18] ^ s5[28] ^ s5[38] ^ s5[48];
          c9 = s5[9] ^ s5[19] ^ s5[29] ^ s5[39] ^ s5[49];
          h7 = c8 ^ (c22 << 1 | c32 >>> 31);
          l7 = c9 ^ (c32 << 1 | c22 >>> 31);
          s5[0] ^= h7;
          s5[1] ^= l7;
          s5[10] ^= h7;
          s5[11] ^= l7;
          s5[20] ^= h7;
          s5[21] ^= l7;
          s5[30] ^= h7;
          s5[31] ^= l7;
          s5[40] ^= h7;
          s5[41] ^= l7;
          h7 = c0 ^ (c42 << 1 | c52 >>> 31);
          l7 = c1 ^ (c52 << 1 | c42 >>> 31);
          s5[2] ^= h7;
          s5[3] ^= l7;
          s5[12] ^= h7;
          s5[13] ^= l7;
          s5[22] ^= h7;
          s5[23] ^= l7;
          s5[32] ^= h7;
          s5[33] ^= l7;
          s5[42] ^= h7;
          s5[43] ^= l7;
          h7 = c22 ^ (c62 << 1 | c7 >>> 31);
          l7 = c32 ^ (c7 << 1 | c62 >>> 31);
          s5[4] ^= h7;
          s5[5] ^= l7;
          s5[14] ^= h7;
          s5[15] ^= l7;
          s5[24] ^= h7;
          s5[25] ^= l7;
          s5[34] ^= h7;
          s5[35] ^= l7;
          s5[44] ^= h7;
          s5[45] ^= l7;
          h7 = c42 ^ (c8 << 1 | c9 >>> 31);
          l7 = c52 ^ (c9 << 1 | c8 >>> 31);
          s5[6] ^= h7;
          s5[7] ^= l7;
          s5[16] ^= h7;
          s5[17] ^= l7;
          s5[26] ^= h7;
          s5[27] ^= l7;
          s5[36] ^= h7;
          s5[37] ^= l7;
          s5[46] ^= h7;
          s5[47] ^= l7;
          h7 = c62 ^ (c0 << 1 | c1 >>> 31);
          l7 = c7 ^ (c1 << 1 | c0 >>> 31);
          s5[8] ^= h7;
          s5[9] ^= l7;
          s5[18] ^= h7;
          s5[19] ^= l7;
          s5[28] ^= h7;
          s5[29] ^= l7;
          s5[38] ^= h7;
          s5[39] ^= l7;
          s5[48] ^= h7;
          s5[49] ^= l7;
          b0 = s5[0];
          b1 = s5[1];
          b322 = s5[11] << 4 | s5[10] >>> 28;
          b33 = s5[10] << 4 | s5[11] >>> 28;
          b14 = s5[20] << 3 | s5[21] >>> 29;
          b15 = s5[21] << 3 | s5[20] >>> 29;
          b46 = s5[31] << 9 | s5[30] >>> 23;
          b47 = s5[30] << 9 | s5[31] >>> 23;
          b28 = s5[40] << 18 | s5[41] >>> 14;
          b29 = s5[41] << 18 | s5[40] >>> 14;
          b20 = s5[2] << 1 | s5[3] >>> 31;
          b21 = s5[3] << 1 | s5[2] >>> 31;
          b22 = s5[13] << 12 | s5[12] >>> 20;
          b32 = s5[12] << 12 | s5[13] >>> 20;
          b34 = s5[22] << 10 | s5[23] >>> 22;
          b35 = s5[23] << 10 | s5[22] >>> 22;
          b16 = s5[33] << 13 | s5[32] >>> 19;
          b17 = s5[32] << 13 | s5[33] >>> 19;
          b48 = s5[42] << 2 | s5[43] >>> 30;
          b49 = s5[43] << 2 | s5[42] >>> 30;
          b40 = s5[5] << 30 | s5[4] >>> 2;
          b41 = s5[4] << 30 | s5[5] >>> 2;
          b222 = s5[14] << 6 | s5[15] >>> 26;
          b23 = s5[15] << 6 | s5[14] >>> 26;
          b42 = s5[25] << 11 | s5[24] >>> 21;
          b5 = s5[24] << 11 | s5[25] >>> 21;
          b36 = s5[34] << 15 | s5[35] >>> 17;
          b37 = s5[35] << 15 | s5[34] >>> 17;
          b18 = s5[45] << 29 | s5[44] >>> 3;
          b19 = s5[44] << 29 | s5[45] >>> 3;
          b10 = s5[6] << 28 | s5[7] >>> 4;
          b11 = s5[7] << 28 | s5[6] >>> 4;
          b422 = s5[17] << 23 | s5[16] >>> 9;
          b43 = s5[16] << 23 | s5[17] >>> 9;
          b24 = s5[26] << 25 | s5[27] >>> 7;
          b25 = s5[27] << 25 | s5[26] >>> 7;
          b6 = s5[36] << 21 | s5[37] >>> 11;
          b7 = s5[37] << 21 | s5[36] >>> 11;
          b38 = s5[47] << 24 | s5[46] >>> 8;
          b39 = s5[46] << 24 | s5[47] >>> 8;
          b30 = s5[8] << 27 | s5[9] >>> 5;
          b31 = s5[9] << 27 | s5[8] >>> 5;
          b12 = s5[18] << 20 | s5[19] >>> 12;
          b13 = s5[19] << 20 | s5[18] >>> 12;
          b44 = s5[29] << 7 | s5[28] >>> 25;
          b45 = s5[28] << 7 | s5[29] >>> 25;
          b26 = s5[38] << 8 | s5[39] >>> 24;
          b27 = s5[39] << 8 | s5[38] >>> 24;
          b8 = s5[48] << 14 | s5[49] >>> 18;
          b9 = s5[49] << 14 | s5[48] >>> 18;
          s5[0] = b0 ^ ~b22 & b42;
          s5[1] = b1 ^ ~b32 & b5;
          s5[10] = b10 ^ ~b12 & b14;
          s5[11] = b11 ^ ~b13 & b15;
          s5[20] = b20 ^ ~b222 & b24;
          s5[21] = b21 ^ ~b23 & b25;
          s5[30] = b30 ^ ~b322 & b34;
          s5[31] = b31 ^ ~b33 & b35;
          s5[40] = b40 ^ ~b422 & b44;
          s5[41] = b41 ^ ~b43 & b45;
          s5[2] = b22 ^ ~b42 & b6;
          s5[3] = b32 ^ ~b5 & b7;
          s5[12] = b12 ^ ~b14 & b16;
          s5[13] = b13 ^ ~b15 & b17;
          s5[22] = b222 ^ ~b24 & b26;
          s5[23] = b23 ^ ~b25 & b27;
          s5[32] = b322 ^ ~b34 & b36;
          s5[33] = b33 ^ ~b35 & b37;
          s5[42] = b422 ^ ~b44 & b46;
          s5[43] = b43 ^ ~b45 & b47;
          s5[4] = b42 ^ ~b6 & b8;
          s5[5] = b5 ^ ~b7 & b9;
          s5[14] = b14 ^ ~b16 & b18;
          s5[15] = b15 ^ ~b17 & b19;
          s5[24] = b24 ^ ~b26 & b28;
          s5[25] = b25 ^ ~b27 & b29;
          s5[34] = b34 ^ ~b36 & b38;
          s5[35] = b35 ^ ~b37 & b39;
          s5[44] = b44 ^ ~b46 & b48;
          s5[45] = b45 ^ ~b47 & b49;
          s5[6] = b6 ^ ~b8 & b0;
          s5[7] = b7 ^ ~b9 & b1;
          s5[16] = b16 ^ ~b18 & b10;
          s5[17] = b17 ^ ~b19 & b11;
          s5[26] = b26 ^ ~b28 & b20;
          s5[27] = b27 ^ ~b29 & b21;
          s5[36] = b36 ^ ~b38 & b30;
          s5[37] = b37 ^ ~b39 & b31;
          s5[46] = b46 ^ ~b48 & b40;
          s5[47] = b47 ^ ~b49 & b41;
          s5[8] = b8 ^ ~b0 & b22;
          s5[9] = b9 ^ ~b1 & b32;
          s5[18] = b18 ^ ~b10 & b12;
          s5[19] = b19 ^ ~b11 & b13;
          s5[28] = b28 ^ ~b20 & b222;
          s5[29] = b29 ^ ~b21 & b23;
          s5[38] = b38 ^ ~b30 & b322;
          s5[39] = b39 ^ ~b31 & b33;
          s5[48] = b48 ^ ~b40 & b422;
          s5[49] = b49 ^ ~b41 & b43;
          s5[0] ^= RC[n6];
          s5[1] ^= RC[n6 + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i6 = 0; i6 < methodNames.length; ++i6) {
          root[methodNames[i6]] = methods[methodNames[i6]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base4, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base4 === "le" || base4 === "be") {
            endian = base4;
            base4 = 10;
          }
          this._init(number || 0, base4 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e4) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base4, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base4, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base4, endian);
        }
        if (base4 === "hex") {
          base4 = 16;
        }
        assert2(base4 === (base4 | 0) && base4 >= 2 && base4 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base4 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base4, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base4, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base4, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base4, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base4, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          this.words[i6] = 0;
        }
        var j5, w6;
        var off = 0;
        if (endian === "be") {
          for (i6 = number.length - 1, j5 = 0; i6 >= 0; i6 -= 3) {
            w6 = number[i6] | number[i6 - 1] << 8 | number[i6 - 2] << 16;
            this.words[j5] |= w6 << off & 67108863;
            this.words[j5 + 1] = w6 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j5++;
            }
          }
        } else if (endian === "le") {
          for (i6 = 0, j5 = 0; i6 < number.length; i6 += 3) {
            w6 = number[i6] | number[i6 + 1] << 8 | number[i6 + 2] << 16;
            this.words[j5] |= w6 << off & 67108863;
            this.words[j5 + 1] = w6 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j5++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string3, index) {
        var c7 = string3.charCodeAt(index);
        if (c7 >= 48 && c7 <= 57) {
          return c7 - 48;
        } else if (c7 >= 65 && c7 <= 70) {
          return c7 - 55;
        } else if (c7 >= 97 && c7 <= 102) {
          return c7 - 87;
        } else {
          assert2(false, "Invalid character in " + string3);
        }
      }
      function parseHexByte(string3, lowerBound, index) {
        var r6 = parseHex4Bits(string3, index);
        if (index - 1 >= lowerBound) {
          r6 |= parseHex4Bits(string3, index - 1) << 4;
        }
        return r6;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          this.words[i6] = 0;
        }
        var off = 0;
        var j5 = 0;
        var w6;
        if (endian === "be") {
          for (i6 = number.length - 1; i6 >= start; i6 -= 2) {
            w6 = parseHexByte(number, start, i6) << off;
            this.words[j5] |= w6 & 67108863;
            if (off >= 18) {
              off -= 18;
              j5 += 1;
              this.words[j5] |= w6 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i6 = parseLength % 2 === 0 ? start + 1 : start; i6 < number.length; i6 += 2) {
            w6 = parseHexByte(number, start, i6) << off;
            this.words[j5] |= w6 & 67108863;
            if (off >= 18) {
              off -= 18;
              j5 += 1;
              this.words[j5] |= w6 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r6 = 0;
        var b5 = 0;
        var len = Math.min(str.length, end);
        for (var i6 = start; i6 < len; i6++) {
          var c7 = str.charCodeAt(i6) - 48;
          r6 *= mul3;
          if (c7 >= 49) {
            b5 = c7 - 49 + 10;
          } else if (c7 >= 17) {
            b5 = c7 - 17 + 10;
          } else {
            b5 = c7;
          }
          assert2(c7 >= 0 && b5 < mul3, "Invalid character");
          r6 += b5;
        }
        return r6;
      }
      BN3.prototype._parseBase = function _parseBase(number, base4, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base4) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base4 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i6 = start; i6 < end; i6 += limbLen) {
          word = parseBase(number, i6, i6 + limbLen, base4);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i6, number.length, base4);
          for (i6 = 0; i6 < mod; i6++) {
            pow *= base4;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          dest.words[i6] = this.words[i6];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src2) {
        dest.words = src2.words;
        dest.length = src2.length;
        dest.negative = src2.negative;
        dest.red = src2.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r6 = new BN3(null);
        this.copy(r6);
        return r6;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e4) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString4(base4, padding2) {
        base4 = base4 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base4 === 16 || base4 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i6 = 0; i6 < this.length; i6++) {
            var w6 = this.words[i6];
            var word = ((w6 << off | carry) & 16777215).toString(16);
            carry = w6 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i6--;
            }
            if (carry !== 0 || i6 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base4 === (base4 | 0) && base4 >= 2 && base4 <= 36) {
          var groupSize = groupSizes[base4];
          var groupBase = groupBases[base4];
          out = "";
          var c7 = this.clone();
          c7.negative = 0;
          while (!c7.isZero()) {
            var r6 = c7.modrn(groupBase).toString(base4);
            c7 = c7.idivn(groupBase);
            if (!c7.isZero()) {
              out = zeros2[groupSize - r6.length] + r6 + out;
            } else {
              out = r6 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length2) {
          return this.toArrayLike(Buffer2, endian, length2);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length2) {
        return this.toArrayLike(Array, endian, length2);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length2 || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i6 = 0, shift = 0; i6 < this.length; i6++) {
          var word = this.words[i6] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i6 = 0, shift = 0; i6 < this.length; i6++) {
          var word = this.words[i6] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w6) {
          return 32 - Math.clz32(w6);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w6) {
          var t3 = w6;
          var r6 = 0;
          if (t3 >= 4096) {
            r6 += 13;
            t3 >>>= 13;
          }
          if (t3 >= 64) {
            r6 += 7;
            t3 >>>= 7;
          }
          if (t3 >= 8) {
            r6 += 4;
            t3 >>>= 4;
          }
          if (t3 >= 2) {
            r6 += 2;
            t3 >>>= 2;
          }
          return r6 + t3;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w6) {
        if (w6 === 0) return 26;
        var t3 = w6;
        var r6 = 0;
        if ((t3 & 8191) === 0) {
          r6 += 13;
          t3 >>>= 13;
        }
        if ((t3 & 127) === 0) {
          r6 += 7;
          t3 >>>= 7;
        }
        if ((t3 & 15) === 0) {
          r6 += 4;
          t3 >>>= 4;
        }
        if ((t3 & 3) === 0) {
          r6 += 2;
          t3 >>>= 2;
        }
        if ((t3 & 1) === 0) {
          r6++;
        }
        return r6;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w6 = this.words[this.length - 1];
        var hi2 = this._countBits(w6);
        return (this.length - 1) * 26 + hi2;
      };
      function toBitArray(num) {
        var w6 = new Array(num.bitLength());
        for (var bit = 0; bit < w6.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w6[bit] = num.words[off] >>> wbit & 1;
        }
        return w6;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r6 = 0;
        for (var i6 = 0; i6 < this.length; i6++) {
          var b5 = this._zeroBits(this.words[i6]);
          r6 += b5;
          if (b5 !== 26) break;
        }
        return r6;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i6 = 0; i6 < num.length; i6++) {
          this.words[i6] = this.words[i6] | num.words[i6];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or4(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b5;
        if (this.length > num.length) {
          b5 = num;
        } else {
          b5 = this;
        }
        for (var i6 = 0; i6 < b5.length; i6++) {
          this.words[i6] = this.words[i6] & num.words[i6];
        }
        this.length = b5.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a5;
        var b5;
        if (this.length > num.length) {
          a5 = this;
          b5 = num;
        } else {
          a5 = num;
          b5 = this;
        }
        for (var i6 = 0; i6 < b5.length; i6++) {
          this.words[i6] = a5.words[i6] ^ b5.words[i6];
        }
        if (this !== a5) {
          for (; i6 < a5.length; i6++) {
            this.words[i6] = a5.words[i6];
          }
        }
        this.length = a5.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor2(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i6 = 0; i6 < bytesNeeded; i6++) {
          this.words[i6] = ~this.words[i6] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i6] = ~this.words[i6] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r6;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r6 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r6 = this.isub(num);
          num.negative = 1;
          return r6._normSign();
        }
        var a5, b5;
        if (this.length > num.length) {
          a5 = this;
          b5 = num;
        } else {
          a5 = num;
          b5 = this;
        }
        var carry = 0;
        for (var i6 = 0; i6 < b5.length; i6++) {
          r6 = (a5.words[i6] | 0) + (b5.words[i6] | 0) + carry;
          this.words[i6] = r6 & 67108863;
          carry = r6 >>> 26;
        }
        for (; carry !== 0 && i6 < a5.length; i6++) {
          r6 = (a5.words[i6] | 0) + carry;
          this.words[i6] = r6 & 67108863;
          carry = r6 >>> 26;
        }
        this.length = a5.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a5 !== this) {
          for (; i6 < a5.length; i6++) {
            this.words[i6] = a5.words[i6];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r6 = this.iadd(num);
          num.negative = 1;
          return r6._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a5, b5;
        if (cmp > 0) {
          a5 = this;
          b5 = num;
        } else {
          a5 = num;
          b5 = this;
        }
        var carry = 0;
        for (var i6 = 0; i6 < b5.length; i6++) {
          r6 = (a5.words[i6] | 0) - (b5.words[i6] | 0) + carry;
          carry = r6 >> 26;
          this.words[i6] = r6 & 67108863;
        }
        for (; carry !== 0 && i6 < a5.length; i6++) {
          r6 = (a5.words[i6] | 0) + carry;
          carry = r6 >> 26;
          this.words[i6] = r6 & 67108863;
        }
        if (carry === 0 && i6 < a5.length && a5 !== this) {
          for (; i6 < a5.length; i6++) {
            this.words[i6] = a5.words[i6];
          }
        }
        this.length = Math.max(this.length, i6);
        if (a5 !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a5 = self2.words[0] | 0;
        var b5 = num.words[0] | 0;
        var r6 = a5 * b5;
        var lo2 = r6 & 67108863;
        var carry = r6 / 67108864 | 0;
        out.words[0] = lo2;
        for (var k7 = 1; k7 < len; k7++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k7, num.length - 1);
          for (var j5 = Math.max(0, k7 - self2.length + 1); j5 <= maxJ; j5++) {
            var i6 = k7 - j5 | 0;
            a5 = self2.words[i6] | 0;
            b5 = num.words[j5] | 0;
            r6 = a5 * b5 + rword;
            ncarry += r6 / 67108864 | 0;
            rword = r6 & 67108863;
          }
          out.words[k7] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k7] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a5 = self2.words;
        var b5 = num.words;
        var o6 = out.words;
        var c7 = 0;
        var lo2;
        var mid;
        var hi2;
        var a0 = a5[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a5[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a5[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a32 = a5[3] | 0;
        var al3 = a32 & 8191;
        var ah3 = a32 >>> 13;
        var a42 = a5[4] | 0;
        var al4 = a42 & 8191;
        var ah4 = a42 >>> 13;
        var a52 = a5[5] | 0;
        var al5 = a52 & 8191;
        var ah5 = a52 >>> 13;
        var a6 = a5[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a5[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a5[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a5[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b5[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b5[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b5[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b32 = b5[3] | 0;
        var bl3 = b32 & 8191;
        var bh3 = b32 >>> 13;
        var b42 = b5[4] | 0;
        var bl4 = b42 & 8191;
        var bh4 = b42 >>> 13;
        var b52 = b5[5] | 0;
        var bl5 = b52 & 8191;
        var bh5 = b52 >>> 13;
        var b6 = b5[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b5[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b5[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b5[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo2 = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi2 = Math.imul(ah0, bh0);
        var w0 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo2 = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi2 = Math.imul(ah1, bh0);
        lo2 = lo2 + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi2 = hi2 + Math.imul(ah0, bh1) | 0;
        var w1 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo2 = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi2 = Math.imul(ah2, bh0);
        lo2 = lo2 + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi2 = hi2 + Math.imul(ah1, bh1) | 0;
        lo2 = lo2 + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi2 = hi2 + Math.imul(ah0, bh2) | 0;
        var w22 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo2 = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi2 = Math.imul(ah3, bh0);
        lo2 = lo2 + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi2 = hi2 + Math.imul(ah2, bh1) | 0;
        lo2 = lo2 + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi2 = hi2 + Math.imul(ah1, bh2) | 0;
        lo2 = lo2 + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi2 = hi2 + Math.imul(ah0, bh3) | 0;
        var w32 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
        w32 &= 67108863;
        lo2 = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi2 = Math.imul(ah4, bh0);
        lo2 = lo2 + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi2 = hi2 + Math.imul(ah3, bh1) | 0;
        lo2 = lo2 + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi2 = hi2 + Math.imul(ah2, bh2) | 0;
        lo2 = lo2 + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi2 = hi2 + Math.imul(ah1, bh3) | 0;
        lo2 = lo2 + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi2 = hi2 + Math.imul(ah0, bh4) | 0;
        var w42 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w42 >>> 26) | 0;
        w42 &= 67108863;
        lo2 = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi2 = Math.imul(ah5, bh0);
        lo2 = lo2 + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi2 = hi2 + Math.imul(ah4, bh1) | 0;
        lo2 = lo2 + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi2 = hi2 + Math.imul(ah3, bh2) | 0;
        lo2 = lo2 + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi2 = hi2 + Math.imul(ah2, bh3) | 0;
        lo2 = lo2 + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi2 = hi2 + Math.imul(ah1, bh4) | 0;
        lo2 = lo2 + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi2 = hi2 + Math.imul(ah0, bh5) | 0;
        var w52 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w52 >>> 26) | 0;
        w52 &= 67108863;
        lo2 = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi2 = Math.imul(ah6, bh0);
        lo2 = lo2 + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi2 = hi2 + Math.imul(ah5, bh1) | 0;
        lo2 = lo2 + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi2 = hi2 + Math.imul(ah4, bh2) | 0;
        lo2 = lo2 + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi2 = hi2 + Math.imul(ah3, bh3) | 0;
        lo2 = lo2 + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi2 = hi2 + Math.imul(ah2, bh4) | 0;
        lo2 = lo2 + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi2 = hi2 + Math.imul(ah1, bh5) | 0;
        lo2 = lo2 + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi2 = hi2 + Math.imul(ah0, bh6) | 0;
        var w6 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo2 = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi2 = Math.imul(ah7, bh0);
        lo2 = lo2 + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi2 = hi2 + Math.imul(ah6, bh1) | 0;
        lo2 = lo2 + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi2 = hi2 + Math.imul(ah5, bh2) | 0;
        lo2 = lo2 + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi2 = hi2 + Math.imul(ah4, bh3) | 0;
        lo2 = lo2 + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi2 = hi2 + Math.imul(ah3, bh4) | 0;
        lo2 = lo2 + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi2 = hi2 + Math.imul(ah2, bh5) | 0;
        lo2 = lo2 + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi2 = hi2 + Math.imul(ah1, bh6) | 0;
        lo2 = lo2 + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi2 = hi2 + Math.imul(ah0, bh7) | 0;
        var w7 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo2 = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi2 = Math.imul(ah8, bh0);
        lo2 = lo2 + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi2 = hi2 + Math.imul(ah7, bh1) | 0;
        lo2 = lo2 + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi2 = hi2 + Math.imul(ah6, bh2) | 0;
        lo2 = lo2 + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi2 = hi2 + Math.imul(ah5, bh3) | 0;
        lo2 = lo2 + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi2 = hi2 + Math.imul(ah4, bh4) | 0;
        lo2 = lo2 + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi2 = hi2 + Math.imul(ah3, bh5) | 0;
        lo2 = lo2 + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi2 = hi2 + Math.imul(ah2, bh6) | 0;
        lo2 = lo2 + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi2 = hi2 + Math.imul(ah1, bh7) | 0;
        lo2 = lo2 + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi2 = hi2 + Math.imul(ah0, bh8) | 0;
        var w8 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo2 = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi2 = Math.imul(ah9, bh0);
        lo2 = lo2 + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi2 = hi2 + Math.imul(ah8, bh1) | 0;
        lo2 = lo2 + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi2 = hi2 + Math.imul(ah7, bh2) | 0;
        lo2 = lo2 + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi2 = hi2 + Math.imul(ah6, bh3) | 0;
        lo2 = lo2 + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi2 = hi2 + Math.imul(ah5, bh4) | 0;
        lo2 = lo2 + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi2 = hi2 + Math.imul(ah4, bh5) | 0;
        lo2 = lo2 + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi2 = hi2 + Math.imul(ah3, bh6) | 0;
        lo2 = lo2 + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi2 = hi2 + Math.imul(ah2, bh7) | 0;
        lo2 = lo2 + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi2 = hi2 + Math.imul(ah1, bh8) | 0;
        lo2 = lo2 + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi2 = hi2 + Math.imul(ah0, bh9) | 0;
        var w9 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo2 = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi2 = Math.imul(ah9, bh1);
        lo2 = lo2 + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi2 = hi2 + Math.imul(ah8, bh2) | 0;
        lo2 = lo2 + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi2 = hi2 + Math.imul(ah7, bh3) | 0;
        lo2 = lo2 + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi2 = hi2 + Math.imul(ah6, bh4) | 0;
        lo2 = lo2 + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi2 = hi2 + Math.imul(ah5, bh5) | 0;
        lo2 = lo2 + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi2 = hi2 + Math.imul(ah4, bh6) | 0;
        lo2 = lo2 + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi2 = hi2 + Math.imul(ah3, bh7) | 0;
        lo2 = lo2 + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi2 = hi2 + Math.imul(ah2, bh8) | 0;
        lo2 = lo2 + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi2 = hi2 + Math.imul(ah1, bh9) | 0;
        var w10 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo2 = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi2 = Math.imul(ah9, bh2);
        lo2 = lo2 + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi2 = hi2 + Math.imul(ah8, bh3) | 0;
        lo2 = lo2 + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi2 = hi2 + Math.imul(ah7, bh4) | 0;
        lo2 = lo2 + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi2 = hi2 + Math.imul(ah6, bh5) | 0;
        lo2 = lo2 + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi2 = hi2 + Math.imul(ah5, bh6) | 0;
        lo2 = lo2 + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi2 = hi2 + Math.imul(ah4, bh7) | 0;
        lo2 = lo2 + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi2 = hi2 + Math.imul(ah3, bh8) | 0;
        lo2 = lo2 + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi2 = hi2 + Math.imul(ah2, bh9) | 0;
        var w11 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo2 = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi2 = Math.imul(ah9, bh3);
        lo2 = lo2 + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi2 = hi2 + Math.imul(ah8, bh4) | 0;
        lo2 = lo2 + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi2 = hi2 + Math.imul(ah7, bh5) | 0;
        lo2 = lo2 + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi2 = hi2 + Math.imul(ah6, bh6) | 0;
        lo2 = lo2 + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi2 = hi2 + Math.imul(ah5, bh7) | 0;
        lo2 = lo2 + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi2 = hi2 + Math.imul(ah4, bh8) | 0;
        lo2 = lo2 + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi2 = hi2 + Math.imul(ah3, bh9) | 0;
        var w12 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo2 = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi2 = Math.imul(ah9, bh4);
        lo2 = lo2 + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi2 = hi2 + Math.imul(ah8, bh5) | 0;
        lo2 = lo2 + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi2 = hi2 + Math.imul(ah7, bh6) | 0;
        lo2 = lo2 + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi2 = hi2 + Math.imul(ah6, bh7) | 0;
        lo2 = lo2 + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi2 = hi2 + Math.imul(ah5, bh8) | 0;
        lo2 = lo2 + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi2 = hi2 + Math.imul(ah4, bh9) | 0;
        var w13 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo2 = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi2 = Math.imul(ah9, bh5);
        lo2 = lo2 + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi2 = hi2 + Math.imul(ah8, bh6) | 0;
        lo2 = lo2 + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi2 = hi2 + Math.imul(ah7, bh7) | 0;
        lo2 = lo2 + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi2 = hi2 + Math.imul(ah6, bh8) | 0;
        lo2 = lo2 + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi2 = hi2 + Math.imul(ah5, bh9) | 0;
        var w14 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo2 = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi2 = Math.imul(ah9, bh6);
        lo2 = lo2 + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi2 = hi2 + Math.imul(ah8, bh7) | 0;
        lo2 = lo2 + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi2 = hi2 + Math.imul(ah7, bh8) | 0;
        lo2 = lo2 + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi2 = hi2 + Math.imul(ah6, bh9) | 0;
        var w15 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo2 = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi2 = Math.imul(ah9, bh7);
        lo2 = lo2 + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi2 = hi2 + Math.imul(ah8, bh8) | 0;
        lo2 = lo2 + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi2 = hi2 + Math.imul(ah7, bh9) | 0;
        var w16 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo2 = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi2 = Math.imul(ah9, bh8);
        lo2 = lo2 + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi2 = hi2 + Math.imul(ah8, bh9) | 0;
        var w17 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo2 = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi2 = Math.imul(ah9, bh9);
        var w18 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o6[0] = w0;
        o6[1] = w1;
        o6[2] = w22;
        o6[3] = w32;
        o6[4] = w42;
        o6[5] = w52;
        o6[6] = w6;
        o6[7] = w7;
        o6[8] = w8;
        o6[9] = w9;
        o6[10] = w10;
        o6[11] = w11;
        o6[12] = w12;
        o6[13] = w13;
        o6[14] = w14;
        o6[15] = w15;
        o6[16] = w16;
        o6[17] = w17;
        o6[18] = w18;
        if (c7 !== 0) {
          o6[19] = c7;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k7 = 0; k7 < out.length - 1; k7++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k7, num.length - 1);
          for (var j5 = Math.max(0, k7 - self2.length + 1); j5 <= maxJ; j5++) {
            var i6 = k7 - j5;
            var a5 = self2.words[i6] | 0;
            var b5 = num.words[j5] | 0;
            var r6 = a5 * b5;
            var lo2 = r6 & 67108863;
            ncarry = ncarry + (r6 / 67108864 | 0) | 0;
            lo2 = lo2 + rword | 0;
            rword = lo2 & 67108863;
            ncarry = ncarry + (lo2 >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k7] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k7] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x8, y7) {
        this.x = x8;
        this.y = y7;
      }
      FFTM.prototype.makeRBT = function makeRBT(N11) {
        var t3 = new Array(N11);
        var l7 = BN3.prototype._countBits(N11) - 1;
        for (var i6 = 0; i6 < N11; i6++) {
          t3[i6] = this.revBin(i6, l7, N11);
        }
        return t3;
      };
      FFTM.prototype.revBin = function revBin(x8, l7, N11) {
        if (x8 === 0 || x8 === N11 - 1) return x8;
        var rb = 0;
        for (var i6 = 0; i6 < l7; i6++) {
          rb |= (x8 & 1) << l7 - i6 - 1;
          x8 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N11) {
        for (var i6 = 0; i6 < N11; i6++) {
          rtws[i6] = rws[rbt[i6]];
          itws[i6] = iws[rbt[i6]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N11, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N11);
        for (var s5 = 1; s5 < N11; s5 <<= 1) {
          var l7 = s5 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l7);
          var itwdf = Math.sin(2 * Math.PI / l7);
          for (var p5 = 0; p5 < N11; p5 += l7) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j5 = 0; j5 < s5; j5++) {
              var re3 = rtws[p5 + j5];
              var ie = itws[p5 + j5];
              var ro2 = rtws[p5 + j5 + s5];
              var io2 = itws[p5 + j5 + s5];
              var rx = rtwdf_ * ro2 - itwdf_ * io2;
              io2 = rtwdf_ * io2 + itwdf_ * ro2;
              ro2 = rx;
              rtws[p5 + j5] = re3 + ro2;
              itws[p5 + j5] = ie + io2;
              rtws[p5 + j5 + s5] = re3 - ro2;
              itws[p5 + j5 + s5] = ie - io2;
              if (j5 !== l7) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n6, m4) {
        var N11 = Math.max(m4, n6) | 1;
        var odd = N11 & 1;
        var i6 = 0;
        for (N11 = N11 / 2 | 0; N11; N11 = N11 >>> 1) {
          i6++;
        }
        return 1 << i6 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N11) {
        if (N11 <= 1) return;
        for (var i6 = 0; i6 < N11 / 2; i6++) {
          var t3 = rws[i6];
          rws[i6] = rws[N11 - i6 - 1];
          rws[N11 - i6 - 1] = t3;
          t3 = iws[i6];
          iws[i6] = -iws[N11 - i6 - 1];
          iws[N11 - i6 - 1] = -t3;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N11) {
        var carry = 0;
        for (var i6 = 0; i6 < N11 / 2; i6++) {
          var w6 = Math.round(ws2[2 * i6 + 1] / N11) * 8192 + Math.round(ws2[2 * i6] / N11) + carry;
          ws2[i6] = w6 & 67108863;
          if (w6 < 67108864) {
            carry = 0;
          } else {
            carry = w6 / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N11) {
        var carry = 0;
        for (var i6 = 0; i6 < len; i6++) {
          carry = carry + (ws2[i6] | 0);
          rws[2 * i6] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i6 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i6 = 2 * len; i6 < N11; ++i6) {
          rws[i6] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N11) {
        var ph = new Array(N11);
        for (var i6 = 0; i6 < N11; i6++) {
          ph[i6] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x8, y7, out) {
        var N11 = 2 * this.guessLen13b(x8.length, y7.length);
        var rbt = this.makeRBT(N11);
        var _8 = this.stub(N11);
        var rws = new Array(N11);
        var rwst = new Array(N11);
        var iwst = new Array(N11);
        var nrws = new Array(N11);
        var nrwst = new Array(N11);
        var niwst = new Array(N11);
        var rmws = out.words;
        rmws.length = N11;
        this.convert13b(x8.words, x8.length, rws, N11);
        this.convert13b(y7.words, y7.length, nrws, N11);
        this.transform(rws, _8, rwst, iwst, N11, rbt);
        this.transform(nrws, _8, nrwst, niwst, N11, rbt);
        for (var i6 = 0; i6 < N11; i6++) {
          var rx = rwst[i6] * nrwst[i6] - iwst[i6] * niwst[i6];
          iwst[i6] = rwst[i6] * niwst[i6] + iwst[i6] * nrwst[i6];
          rwst[i6] = rx;
        }
        this.conjugate(rwst, iwst, N11);
        this.transform(rwst, iwst, rmws, _8, N11, rbt);
        this.conjugate(rmws, _8, N11);
        this.normalize13b(rmws, N11);
        out.negative = x8.negative ^ y7.negative;
        out.length = x8.length + y7.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i6 = 0; i6 < this.length; i6++) {
          var w6 = (this.words[i6] | 0) * num;
          var lo2 = (w6 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w6 / 67108864 | 0;
          carry += lo2 >>> 26;
          this.words[i6] = lo2 & 67108863;
        }
        if (carry !== 0) {
          this.words[i6] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w6 = toBitArray(num);
        if (w6.length === 0) return new BN3(1);
        var res = this;
        for (var i6 = 0; i6 < w6.length; i6++, res = res.sqr()) {
          if (w6[i6] !== 0) break;
        }
        if (++i6 < w6.length) {
          for (var q4 = res.sqr(); i6 < w6.length; i6++, q4 = q4.sqr()) {
            if (w6[i6] === 0) continue;
            res = res.mul(q4);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r6 = bits % 26;
        var s5 = (bits - r6) / 26;
        var carryMask = 67108863 >>> 26 - r6 << 26 - r6;
        var i6;
        if (r6 !== 0) {
          var carry = 0;
          for (i6 = 0; i6 < this.length; i6++) {
            var newCarry = this.words[i6] & carryMask;
            var c7 = (this.words[i6] | 0) - newCarry << r6;
            this.words[i6] = c7 | carry;
            carry = newCarry >>> 26 - r6;
          }
          if (carry) {
            this.words[i6] = carry;
            this.length++;
          }
        }
        if (s5 !== 0) {
          for (i6 = this.length - 1; i6 >= 0; i6--) {
            this.words[i6 + s5] = this.words[i6];
          }
          for (i6 = 0; i6 < s5; i6++) {
            this.words[i6] = 0;
          }
          this.length += s5;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h7;
        if (hint) {
          h7 = (hint - hint % 26) / 26;
        } else {
          h7 = 0;
        }
        var r6 = bits % 26;
        var s5 = Math.min((bits - r6) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r6 << r6;
        var maskedWords = extended;
        h7 -= s5;
        h7 = Math.max(0, h7);
        if (maskedWords) {
          for (var i6 = 0; i6 < s5; i6++) {
            maskedWords.words[i6] = this.words[i6];
          }
          maskedWords.length = s5;
        }
        if (s5 === 0) {
        } else if (this.length > s5) {
          this.length -= s5;
          for (i6 = 0; i6 < this.length; i6++) {
            this.words[i6] = this.words[i6 + s5];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i6 = this.length - 1; i6 >= 0 && (carry !== 0 || i6 >= h7); i6--) {
          var word = this.words[i6] | 0;
          this.words[i6] = carry << 26 - r6 | word >>> r6;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r6 = bit % 26;
        var s5 = (bit - r6) / 26;
        var q4 = 1 << r6;
        if (this.length <= s5) return false;
        var w6 = this.words[s5];
        return !!(w6 & q4);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r6 = bits % 26;
        var s5 = (bits - r6) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s5) {
          return this;
        }
        if (r6 !== 0) {
          s5++;
        }
        this.length = Math.min(s5, this.length);
        if (r6 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r6 << r6;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i6 = 0; i6 < this.length && this.words[i6] >= 67108864; i6++) {
          this.words[i6] -= 67108864;
          if (i6 === this.length - 1) {
            this.words[i6 + 1] = 1;
          } else {
            this.words[i6 + 1]++;
          }
        }
        this.length = Math.max(this.length, i6 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i6 = 0; i6 < this.length && this.words[i6] < 0; i6++) {
            this.words[i6] += 67108864;
            this.words[i6 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i6;
        this._expand(len);
        var w6;
        var carry = 0;
        for (i6 = 0; i6 < num.length; i6++) {
          w6 = (this.words[i6 + shift] | 0) + carry;
          var right = (num.words[i6] | 0) * mul3;
          w6 -= right & 67108863;
          carry = (w6 >> 26) - (right / 67108864 | 0);
          this.words[i6 + shift] = w6 & 67108863;
        }
        for (; i6 < this.length - shift; i6++) {
          w6 = (this.words[i6 + shift] | 0) + carry;
          carry = w6 >> 26;
          this.words[i6 + shift] = w6 & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i6 = 0; i6 < this.length; i6++) {
          w6 = -(this.words[i6] | 0) + carry;
          carry = w6 >> 26;
          this.words[i6] = w6 & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a5 = this.clone();
        var b5 = num;
        var bhi = b5.words[b5.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b5 = b5.ushln(shift);
          a5.iushln(shift);
          bhi = b5.words[b5.length - 1] | 0;
        }
        var m4 = a5.length - b5.length;
        var q4;
        if (mode !== "mod") {
          q4 = new BN3(null);
          q4.length = m4 + 1;
          q4.words = new Array(q4.length);
          for (var i6 = 0; i6 < q4.length; i6++) {
            q4.words[i6] = 0;
          }
        }
        var diff = a5.clone()._ishlnsubmul(b5, 1, m4);
        if (diff.negative === 0) {
          a5 = diff;
          if (q4) {
            q4.words[m4] = 1;
          }
        }
        for (var j5 = m4 - 1; j5 >= 0; j5--) {
          var qj = (a5.words[b5.length + j5] | 0) * 67108864 + (a5.words[b5.length + j5 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a5._ishlnsubmul(b5, qj, j5);
          while (a5.negative !== 0) {
            qj--;
            a5.negative = 0;
            a5._ishlnsubmul(b5, 1, j5);
            if (!a5.isZero()) {
              a5.negative ^= 1;
            }
          }
          if (q4) {
            q4.words[j5] = qj;
          }
        }
        if (q4) {
          q4._strip();
        }
        a5._strip();
        if (mode !== "div" && shift !== 0) {
          a5.iushrn(shift);
        }
        return {
          div: q4 || null,
          mod: a5
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r22 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r22 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p5 = (1 << 26) % num;
        var acc = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          acc = (p5 * acc + (this.words[i6] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          var w6 = (this.words[i6] | 0) + carry * 67108864;
          this.words[i6] = w6 / num | 0;
          carry = w6 % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p5) {
        assert2(p5.negative === 0);
        assert2(!p5.isZero());
        var x8 = this;
        var y7 = p5.clone();
        if (x8.negative !== 0) {
          x8 = x8.umod(p5);
        } else {
          x8 = x8.clone();
        }
        var A8 = new BN3(1);
        var B5 = new BN3(0);
        var C8 = new BN3(0);
        var D6 = new BN3(1);
        var g7 = 0;
        while (x8.isEven() && y7.isEven()) {
          x8.iushrn(1);
          y7.iushrn(1);
          ++g7;
        }
        var yp = y7.clone();
        var xp = x8.clone();
        while (!x8.isZero()) {
          for (var i6 = 0, im = 1; (x8.words[0] & im) === 0 && i6 < 26; ++i6, im <<= 1) ;
          if (i6 > 0) {
            x8.iushrn(i6);
            while (i6-- > 0) {
              if (A8.isOdd() || B5.isOdd()) {
                A8.iadd(yp);
                B5.isub(xp);
              }
              A8.iushrn(1);
              B5.iushrn(1);
            }
          }
          for (var j5 = 0, jm = 1; (y7.words[0] & jm) === 0 && j5 < 26; ++j5, jm <<= 1) ;
          if (j5 > 0) {
            y7.iushrn(j5);
            while (j5-- > 0) {
              if (C8.isOdd() || D6.isOdd()) {
                C8.iadd(yp);
                D6.isub(xp);
              }
              C8.iushrn(1);
              D6.iushrn(1);
            }
          }
          if (x8.cmp(y7) >= 0) {
            x8.isub(y7);
            A8.isub(C8);
            B5.isub(D6);
          } else {
            y7.isub(x8);
            C8.isub(A8);
            D6.isub(B5);
          }
        }
        return {
          a: C8,
          b: D6,
          gcd: y7.iushln(g7)
        };
      };
      BN3.prototype._invmp = function _invmp(p5) {
        assert2(p5.negative === 0);
        assert2(!p5.isZero());
        var a5 = this;
        var b5 = p5.clone();
        if (a5.negative !== 0) {
          a5 = a5.umod(p5);
        } else {
          a5 = a5.clone();
        }
        var x1 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b5.clone();
        while (a5.cmpn(1) > 0 && b5.cmpn(1) > 0) {
          for (var i6 = 0, im = 1; (a5.words[0] & im) === 0 && i6 < 26; ++i6, im <<= 1) ;
          if (i6 > 0) {
            a5.iushrn(i6);
            while (i6-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j5 = 0, jm = 1; (b5.words[0] & jm) === 0 && j5 < 26; ++j5, jm <<= 1) ;
          if (j5 > 0) {
            b5.iushrn(j5);
            while (j5-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a5.cmp(b5) >= 0) {
            a5.isub(b5);
            x1.isub(x22);
          } else {
            b5.isub(a5);
            x22.isub(x1);
          }
        }
        var res;
        if (a5.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p5);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a5 = this.clone();
        var b5 = num.clone();
        a5.negative = 0;
        b5.negative = 0;
        for (var shift = 0; a5.isEven() && b5.isEven(); shift++) {
          a5.iushrn(1);
          b5.iushrn(1);
        }
        do {
          while (a5.isEven()) {
            a5.iushrn(1);
          }
          while (b5.isEven()) {
            b5.iushrn(1);
          }
          var r6 = a5.cmp(b5);
          if (r6 < 0) {
            var t3 = a5;
            a5 = b5;
            b5 = t3;
          } else if (r6 === 0 || b5.cmpn(1) === 0) {
            break;
          }
          a5.isub(b5);
        } while (true);
        return b5.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r6 = bit % 26;
        var s5 = (bit - r6) / 26;
        var q4 = 1 << r6;
        if (this.length <= s5) {
          this._expand(s5 + 1);
          this.words[s5] |= q4;
          return this;
        }
        var carry = q4;
        for (var i6 = s5; carry !== 0 && i6 < this.length; i6++) {
          var w6 = this.words[i6] | 0;
          w6 += carry;
          carry = w6 >>> 26;
          w6 &= 67108863;
          this.words[i6] = w6;
        }
        if (carry !== 0) {
          this.words[i6] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w6 = this.words[0] | 0;
          res = w6 === num ? 0 : w6 < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          var a5 = this.words[i6] | 0;
          var b5 = num.words[i6] | 0;
          if (a5 === b5) continue;
          if (a5 < b5) {
            res = -1;
          } else if (a5 > b5) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt4(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt3(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p5) {
        this.name = name2;
        this.p = new BN3(p5, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r6 = num;
        var rlen;
        do {
          this.split(r6, this.tmp);
          r6 = this.imulK(r6);
          r6 = r6.iadd(this.tmp);
          rlen = r6.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r6.ucmp(this.p);
        if (cmp === 0) {
          r6.words[0] = 0;
          r6.length = 1;
        } else if (cmp > 0) {
          r6.isub(this.p);
        } else {
          if (r6.strip !== void 0) {
            r6.strip();
          } else {
            r6._strip();
          }
        }
        return r6;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i6 = 0; i6 < outLen; i6++) {
          output.words[i6] = input.words[i6];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i6 = 10; i6 < input.length; i6++) {
          var next = input.words[i6] | 0;
          input.words[i6 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i6 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo2 = 0;
        for (var i6 = 0; i6 < num.length; i6++) {
          var w6 = num.words[i6] | 0;
          lo2 += w6 * 977;
          num.words[i6] = lo2 & 67108863;
          lo2 = w6 * 64 + (lo2 / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i6 = 0; i6 < num.length; i6++) {
          var hi2 = (num.words[i6] | 0) * 19 + carry;
          var lo2 = hi2 & 67108863;
          hi2 >>>= 26;
          num.words[i6] = lo2;
          carry = hi2;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m4) {
        if (typeof m4 === "string") {
          var prime = BN3._prime(m4);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m4.gtn(1), "modulus must be greater than 1");
          this.m = m4;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a5) {
        assert2(a5.negative === 0, "red works only with positives");
        assert2(a5.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a5, b5) {
        assert2((a5.negative | b5.negative) === 0, "red works only with positives");
        assert2(
          a5.red && a5.red === b5.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a5) {
        if (this.prime) return this.prime.ireduce(a5)._forceRed(this);
        move(a5, a5.umod(this.m)._forceRed(this));
        return a5;
      };
      Red.prototype.neg = function neg3(a5) {
        if (a5.isZero()) {
          return a5.clone();
        }
        return this.m.sub(a5)._forceRed(this);
      };
      Red.prototype.add = function add3(a5, b5) {
        this._verify2(a5, b5);
        var res = a5.add(b5);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a5, b5) {
        this._verify2(a5, b5);
        var res = a5.iadd(b5);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a5, b5) {
        this._verify2(a5, b5);
        var res = a5.sub(b5);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a5, b5) {
        this._verify2(a5, b5);
        var res = a5.isub(b5);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a5, num) {
        this._verify1(a5);
        return this.imod(a5.ushln(num));
      };
      Red.prototype.imul = function imul(a5, b5) {
        this._verify2(a5, b5);
        return this.imod(a5.imul(b5));
      };
      Red.prototype.mul = function mul3(a5, b5) {
        this._verify2(a5, b5);
        return this.imod(a5.mul(b5));
      };
      Red.prototype.isqr = function isqr(a5) {
        return this.imul(a5, a5.clone());
      };
      Red.prototype.sqr = function sqr(a5) {
        return this.mul(a5, a5);
      };
      Red.prototype.sqrt = function sqrt(a5) {
        if (a5.isZero()) return a5.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a5, pow);
        }
        var q4 = this.m.subn(1);
        var s5 = 0;
        while (!q4.isZero() && q4.andln(1) === 0) {
          s5++;
          q4.iushrn(1);
        }
        assert2(!q4.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z7 = this.m.bitLength();
        z7 = new BN3(2 * z7 * z7).toRed(this);
        while (this.pow(z7, lpow).cmp(nOne) !== 0) {
          z7.redIAdd(nOne);
        }
        var c7 = this.pow(z7, q4);
        var r6 = this.pow(a5, q4.addn(1).iushrn(1));
        var t3 = this.pow(a5, q4);
        var m4 = s5;
        while (t3.cmp(one) !== 0) {
          var tmp = t3;
          for (var i6 = 0; tmp.cmp(one) !== 0; i6++) {
            tmp = tmp.redSqr();
          }
          assert2(i6 < m4);
          var b5 = this.pow(c7, new BN3(1).iushln(m4 - i6 - 1));
          r6 = r6.redMul(b5);
          c7 = b5.redSqr();
          t3 = t3.redMul(c7);
          m4 = i6;
        }
        return r6;
      };
      Red.prototype.invm = function invm(a5) {
        var inv = a5._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a5, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a5.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a5;
        for (var i6 = 2; i6 < wnd.length; i6++) {
          wnd[i6] = this.mul(wnd[i6 - 1], a5);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i6 = num.length - 1; i6 >= 0; i6--) {
          var word = num.words[i6];
          for (var j5 = start - 1; j5 >= 0; j5--) {
            var bit = word >> j5 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i6 !== 0 || j5 !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r6 = num.umod(this.m);
        return r6 === num ? r6.clone() : r6;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m4) {
        Red.call(this, m4);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r6 = this.imod(num.mul(this.rinv));
        r6.red = null;
        return r6;
      };
      Mont.prototype.imul = function imul(a5, b5) {
        if (a5.isZero() || b5.isZero()) {
          a5.words[0] = 0;
          a5.length = 1;
          return a5;
        }
        var t3 = a5.imul(b5);
        var c7 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u4 = t3.isub(c7).iushrn(this.shift);
        var res = u4;
        if (u4.cmp(this.m) >= 0) {
          res = u4.isub(this.m);
        } else if (u4.cmpn(0) < 0) {
          res = u4.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a5, b5) {
        if (a5.isZero() || b5.isZero()) return new BN3(0)._forceRed(this);
        var t3 = a5.mul(b5);
        var c7 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u4 = t3.isub(c7).iushrn(this.shift);
        var res = u4;
        if (u4.cmp(this.m) >= 0) {
          res = u4.isub(this.m);
        } else if (u4.cmpn(0) < 0) {
          res = u4.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a5) {
        var res = this.imod(a5._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base4, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base4 === "le" || base4 === "be") {
            endian = base4;
            base4 = 10;
          }
          this._init(number || 0, base4 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e4) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base4, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base4, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base4, endian);
        }
        if (base4 === "hex") {
          base4 = 16;
        }
        assert2(base4 === (base4 | 0) && base4 >= 2 && base4 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base4 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base4, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base4, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base4, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base4, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base4, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          this.words[i6] = 0;
        }
        var j5, w6;
        var off = 0;
        if (endian === "be") {
          for (i6 = number.length - 1, j5 = 0; i6 >= 0; i6 -= 3) {
            w6 = number[i6] | number[i6 - 1] << 8 | number[i6 - 2] << 16;
            this.words[j5] |= w6 << off & 67108863;
            this.words[j5 + 1] = w6 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j5++;
            }
          }
        } else if (endian === "le") {
          for (i6 = 0, j5 = 0; i6 < number.length; i6 += 3) {
            w6 = number[i6] | number[i6 + 1] << 8 | number[i6 + 2] << 16;
            this.words[j5] |= w6 << off & 67108863;
            this.words[j5 + 1] = w6 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j5++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string3, index) {
        var c7 = string3.charCodeAt(index);
        if (c7 >= 48 && c7 <= 57) {
          return c7 - 48;
        } else if (c7 >= 65 && c7 <= 70) {
          return c7 - 55;
        } else if (c7 >= 97 && c7 <= 102) {
          return c7 - 87;
        } else {
          assert2(false, "Invalid character in " + string3);
        }
      }
      function parseHexByte(string3, lowerBound, index) {
        var r6 = parseHex4Bits(string3, index);
        if (index - 1 >= lowerBound) {
          r6 |= parseHex4Bits(string3, index - 1) << 4;
        }
        return r6;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          this.words[i6] = 0;
        }
        var off = 0;
        var j5 = 0;
        var w6;
        if (endian === "be") {
          for (i6 = number.length - 1; i6 >= start; i6 -= 2) {
            w6 = parseHexByte(number, start, i6) << off;
            this.words[j5] |= w6 & 67108863;
            if (off >= 18) {
              off -= 18;
              j5 += 1;
              this.words[j5] |= w6 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i6 = parseLength % 2 === 0 ? start + 1 : start; i6 < number.length; i6 += 2) {
            w6 = parseHexByte(number, start, i6) << off;
            this.words[j5] |= w6 & 67108863;
            if (off >= 18) {
              off -= 18;
              j5 += 1;
              this.words[j5] |= w6 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r6 = 0;
        var b5 = 0;
        var len = Math.min(str.length, end);
        for (var i6 = start; i6 < len; i6++) {
          var c7 = str.charCodeAt(i6) - 48;
          r6 *= mul3;
          if (c7 >= 49) {
            b5 = c7 - 49 + 10;
          } else if (c7 >= 17) {
            b5 = c7 - 17 + 10;
          } else {
            b5 = c7;
          }
          assert2(c7 >= 0 && b5 < mul3, "Invalid character");
          r6 += b5;
        }
        return r6;
      }
      BN3.prototype._parseBase = function _parseBase(number, base4, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base4) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base4 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i6 = start; i6 < end; i6 += limbLen) {
          word = parseBase(number, i6, i6 + limbLen, base4);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i6, number.length, base4);
          for (i6 = 0; i6 < mod; i6++) {
            pow *= base4;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          dest.words[i6] = this.words[i6];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src2) {
        dest.words = src2.words;
        dest.length = src2.length;
        dest.negative = src2.negative;
        dest.red = src2.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r6 = new BN3(null);
        this.copy(r6);
        return r6;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e4) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString4(base4, padding2) {
        base4 = base4 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base4 === 16 || base4 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i6 = 0; i6 < this.length; i6++) {
            var w6 = this.words[i6];
            var word = ((w6 << off | carry) & 16777215).toString(16);
            carry = w6 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i6--;
            }
            if (carry !== 0 || i6 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base4 === (base4 | 0) && base4 >= 2 && base4 <= 36) {
          var groupSize = groupSizes[base4];
          var groupBase = groupBases[base4];
          out = "";
          var c7 = this.clone();
          c7.negative = 0;
          while (!c7.isZero()) {
            var r6 = c7.modrn(groupBase).toString(base4);
            c7 = c7.idivn(groupBase);
            if (!c7.isZero()) {
              out = zeros2[groupSize - r6.length] + r6 + out;
            } else {
              out = r6 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length2) {
          return this.toArrayLike(Buffer2, endian, length2);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length2) {
        return this.toArrayLike(Array, endian, length2);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length2 || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i6 = 0, shift = 0; i6 < this.length; i6++) {
          var word = this.words[i6] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i6 = 0, shift = 0; i6 < this.length; i6++) {
          var word = this.words[i6] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w6) {
          return 32 - Math.clz32(w6);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w6) {
          var t3 = w6;
          var r6 = 0;
          if (t3 >= 4096) {
            r6 += 13;
            t3 >>>= 13;
          }
          if (t3 >= 64) {
            r6 += 7;
            t3 >>>= 7;
          }
          if (t3 >= 8) {
            r6 += 4;
            t3 >>>= 4;
          }
          if (t3 >= 2) {
            r6 += 2;
            t3 >>>= 2;
          }
          return r6 + t3;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w6) {
        if (w6 === 0) return 26;
        var t3 = w6;
        var r6 = 0;
        if ((t3 & 8191) === 0) {
          r6 += 13;
          t3 >>>= 13;
        }
        if ((t3 & 127) === 0) {
          r6 += 7;
          t3 >>>= 7;
        }
        if ((t3 & 15) === 0) {
          r6 += 4;
          t3 >>>= 4;
        }
        if ((t3 & 3) === 0) {
          r6 += 2;
          t3 >>>= 2;
        }
        if ((t3 & 1) === 0) {
          r6++;
        }
        return r6;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w6 = this.words[this.length - 1];
        var hi2 = this._countBits(w6);
        return (this.length - 1) * 26 + hi2;
      };
      function toBitArray(num) {
        var w6 = new Array(num.bitLength());
        for (var bit = 0; bit < w6.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w6[bit] = num.words[off] >>> wbit & 1;
        }
        return w6;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r6 = 0;
        for (var i6 = 0; i6 < this.length; i6++) {
          var b5 = this._zeroBits(this.words[i6]);
          r6 += b5;
          if (b5 !== 26) break;
        }
        return r6;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i6 = 0; i6 < num.length; i6++) {
          this.words[i6] = this.words[i6] | num.words[i6];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or4(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b5;
        if (this.length > num.length) {
          b5 = num;
        } else {
          b5 = this;
        }
        for (var i6 = 0; i6 < b5.length; i6++) {
          this.words[i6] = this.words[i6] & num.words[i6];
        }
        this.length = b5.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a5;
        var b5;
        if (this.length > num.length) {
          a5 = this;
          b5 = num;
        } else {
          a5 = num;
          b5 = this;
        }
        for (var i6 = 0; i6 < b5.length; i6++) {
          this.words[i6] = a5.words[i6] ^ b5.words[i6];
        }
        if (this !== a5) {
          for (; i6 < a5.length; i6++) {
            this.words[i6] = a5.words[i6];
          }
        }
        this.length = a5.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor2(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i6 = 0; i6 < bytesNeeded; i6++) {
          this.words[i6] = ~this.words[i6] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i6] = ~this.words[i6] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r6;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r6 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r6 = this.isub(num);
          num.negative = 1;
          return r6._normSign();
        }
        var a5, b5;
        if (this.length > num.length) {
          a5 = this;
          b5 = num;
        } else {
          a5 = num;
          b5 = this;
        }
        var carry = 0;
        for (var i6 = 0; i6 < b5.length; i6++) {
          r6 = (a5.words[i6] | 0) + (b5.words[i6] | 0) + carry;
          this.words[i6] = r6 & 67108863;
          carry = r6 >>> 26;
        }
        for (; carry !== 0 && i6 < a5.length; i6++) {
          r6 = (a5.words[i6] | 0) + carry;
          this.words[i6] = r6 & 67108863;
          carry = r6 >>> 26;
        }
        this.length = a5.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a5 !== this) {
          for (; i6 < a5.length; i6++) {
            this.words[i6] = a5.words[i6];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r6 = this.iadd(num);
          num.negative = 1;
          return r6._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a5, b5;
        if (cmp > 0) {
          a5 = this;
          b5 = num;
        } else {
          a5 = num;
          b5 = this;
        }
        var carry = 0;
        for (var i6 = 0; i6 < b5.length; i6++) {
          r6 = (a5.words[i6] | 0) - (b5.words[i6] | 0) + carry;
          carry = r6 >> 26;
          this.words[i6] = r6 & 67108863;
        }
        for (; carry !== 0 && i6 < a5.length; i6++) {
          r6 = (a5.words[i6] | 0) + carry;
          carry = r6 >> 26;
          this.words[i6] = r6 & 67108863;
        }
        if (carry === 0 && i6 < a5.length && a5 !== this) {
          for (; i6 < a5.length; i6++) {
            this.words[i6] = a5.words[i6];
          }
        }
        this.length = Math.max(this.length, i6);
        if (a5 !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a5 = self2.words[0] | 0;
        var b5 = num.words[0] | 0;
        var r6 = a5 * b5;
        var lo2 = r6 & 67108863;
        var carry = r6 / 67108864 | 0;
        out.words[0] = lo2;
        for (var k7 = 1; k7 < len; k7++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k7, num.length - 1);
          for (var j5 = Math.max(0, k7 - self2.length + 1); j5 <= maxJ; j5++) {
            var i6 = k7 - j5 | 0;
            a5 = self2.words[i6] | 0;
            b5 = num.words[j5] | 0;
            r6 = a5 * b5 + rword;
            ncarry += r6 / 67108864 | 0;
            rword = r6 & 67108863;
          }
          out.words[k7] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k7] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a5 = self2.words;
        var b5 = num.words;
        var o6 = out.words;
        var c7 = 0;
        var lo2;
        var mid;
        var hi2;
        var a0 = a5[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a5[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a5[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a32 = a5[3] | 0;
        var al3 = a32 & 8191;
        var ah3 = a32 >>> 13;
        var a42 = a5[4] | 0;
        var al4 = a42 & 8191;
        var ah4 = a42 >>> 13;
        var a52 = a5[5] | 0;
        var al5 = a52 & 8191;
        var ah5 = a52 >>> 13;
        var a6 = a5[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a5[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a5[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a5[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b5[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b5[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b5[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b32 = b5[3] | 0;
        var bl3 = b32 & 8191;
        var bh3 = b32 >>> 13;
        var b42 = b5[4] | 0;
        var bl4 = b42 & 8191;
        var bh4 = b42 >>> 13;
        var b52 = b5[5] | 0;
        var bl5 = b52 & 8191;
        var bh5 = b52 >>> 13;
        var b6 = b5[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b5[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b5[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b5[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo2 = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi2 = Math.imul(ah0, bh0);
        var w0 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo2 = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi2 = Math.imul(ah1, bh0);
        lo2 = lo2 + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi2 = hi2 + Math.imul(ah0, bh1) | 0;
        var w1 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo2 = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi2 = Math.imul(ah2, bh0);
        lo2 = lo2 + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi2 = hi2 + Math.imul(ah1, bh1) | 0;
        lo2 = lo2 + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi2 = hi2 + Math.imul(ah0, bh2) | 0;
        var w22 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo2 = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi2 = Math.imul(ah3, bh0);
        lo2 = lo2 + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi2 = hi2 + Math.imul(ah2, bh1) | 0;
        lo2 = lo2 + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi2 = hi2 + Math.imul(ah1, bh2) | 0;
        lo2 = lo2 + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi2 = hi2 + Math.imul(ah0, bh3) | 0;
        var w32 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
        w32 &= 67108863;
        lo2 = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi2 = Math.imul(ah4, bh0);
        lo2 = lo2 + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi2 = hi2 + Math.imul(ah3, bh1) | 0;
        lo2 = lo2 + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi2 = hi2 + Math.imul(ah2, bh2) | 0;
        lo2 = lo2 + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi2 = hi2 + Math.imul(ah1, bh3) | 0;
        lo2 = lo2 + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi2 = hi2 + Math.imul(ah0, bh4) | 0;
        var w42 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w42 >>> 26) | 0;
        w42 &= 67108863;
        lo2 = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi2 = Math.imul(ah5, bh0);
        lo2 = lo2 + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi2 = hi2 + Math.imul(ah4, bh1) | 0;
        lo2 = lo2 + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi2 = hi2 + Math.imul(ah3, bh2) | 0;
        lo2 = lo2 + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi2 = hi2 + Math.imul(ah2, bh3) | 0;
        lo2 = lo2 + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi2 = hi2 + Math.imul(ah1, bh4) | 0;
        lo2 = lo2 + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi2 = hi2 + Math.imul(ah0, bh5) | 0;
        var w52 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w52 >>> 26) | 0;
        w52 &= 67108863;
        lo2 = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi2 = Math.imul(ah6, bh0);
        lo2 = lo2 + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi2 = hi2 + Math.imul(ah5, bh1) | 0;
        lo2 = lo2 + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi2 = hi2 + Math.imul(ah4, bh2) | 0;
        lo2 = lo2 + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi2 = hi2 + Math.imul(ah3, bh3) | 0;
        lo2 = lo2 + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi2 = hi2 + Math.imul(ah2, bh4) | 0;
        lo2 = lo2 + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi2 = hi2 + Math.imul(ah1, bh5) | 0;
        lo2 = lo2 + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi2 = hi2 + Math.imul(ah0, bh6) | 0;
        var w6 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo2 = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi2 = Math.imul(ah7, bh0);
        lo2 = lo2 + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi2 = hi2 + Math.imul(ah6, bh1) | 0;
        lo2 = lo2 + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi2 = hi2 + Math.imul(ah5, bh2) | 0;
        lo2 = lo2 + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi2 = hi2 + Math.imul(ah4, bh3) | 0;
        lo2 = lo2 + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi2 = hi2 + Math.imul(ah3, bh4) | 0;
        lo2 = lo2 + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi2 = hi2 + Math.imul(ah2, bh5) | 0;
        lo2 = lo2 + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi2 = hi2 + Math.imul(ah1, bh6) | 0;
        lo2 = lo2 + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi2 = hi2 + Math.imul(ah0, bh7) | 0;
        var w7 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo2 = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi2 = Math.imul(ah8, bh0);
        lo2 = lo2 + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi2 = hi2 + Math.imul(ah7, bh1) | 0;
        lo2 = lo2 + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi2 = hi2 + Math.imul(ah6, bh2) | 0;
        lo2 = lo2 + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi2 = hi2 + Math.imul(ah5, bh3) | 0;
        lo2 = lo2 + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi2 = hi2 + Math.imul(ah4, bh4) | 0;
        lo2 = lo2 + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi2 = hi2 + Math.imul(ah3, bh5) | 0;
        lo2 = lo2 + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi2 = hi2 + Math.imul(ah2, bh6) | 0;
        lo2 = lo2 + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi2 = hi2 + Math.imul(ah1, bh7) | 0;
        lo2 = lo2 + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi2 = hi2 + Math.imul(ah0, bh8) | 0;
        var w8 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo2 = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi2 = Math.imul(ah9, bh0);
        lo2 = lo2 + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi2 = hi2 + Math.imul(ah8, bh1) | 0;
        lo2 = lo2 + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi2 = hi2 + Math.imul(ah7, bh2) | 0;
        lo2 = lo2 + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi2 = hi2 + Math.imul(ah6, bh3) | 0;
        lo2 = lo2 + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi2 = hi2 + Math.imul(ah5, bh4) | 0;
        lo2 = lo2 + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi2 = hi2 + Math.imul(ah4, bh5) | 0;
        lo2 = lo2 + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi2 = hi2 + Math.imul(ah3, bh6) | 0;
        lo2 = lo2 + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi2 = hi2 + Math.imul(ah2, bh7) | 0;
        lo2 = lo2 + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi2 = hi2 + Math.imul(ah1, bh8) | 0;
        lo2 = lo2 + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi2 = hi2 + Math.imul(ah0, bh9) | 0;
        var w9 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo2 = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi2 = Math.imul(ah9, bh1);
        lo2 = lo2 + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi2 = hi2 + Math.imul(ah8, bh2) | 0;
        lo2 = lo2 + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi2 = hi2 + Math.imul(ah7, bh3) | 0;
        lo2 = lo2 + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi2 = hi2 + Math.imul(ah6, bh4) | 0;
        lo2 = lo2 + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi2 = hi2 + Math.imul(ah5, bh5) | 0;
        lo2 = lo2 + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi2 = hi2 + Math.imul(ah4, bh6) | 0;
        lo2 = lo2 + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi2 = hi2 + Math.imul(ah3, bh7) | 0;
        lo2 = lo2 + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi2 = hi2 + Math.imul(ah2, bh8) | 0;
        lo2 = lo2 + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi2 = hi2 + Math.imul(ah1, bh9) | 0;
        var w10 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo2 = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi2 = Math.imul(ah9, bh2);
        lo2 = lo2 + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi2 = hi2 + Math.imul(ah8, bh3) | 0;
        lo2 = lo2 + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi2 = hi2 + Math.imul(ah7, bh4) | 0;
        lo2 = lo2 + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi2 = hi2 + Math.imul(ah6, bh5) | 0;
        lo2 = lo2 + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi2 = hi2 + Math.imul(ah5, bh6) | 0;
        lo2 = lo2 + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi2 = hi2 + Math.imul(ah4, bh7) | 0;
        lo2 = lo2 + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi2 = hi2 + Math.imul(ah3, bh8) | 0;
        lo2 = lo2 + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi2 = hi2 + Math.imul(ah2, bh9) | 0;
        var w11 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo2 = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi2 = Math.imul(ah9, bh3);
        lo2 = lo2 + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi2 = hi2 + Math.imul(ah8, bh4) | 0;
        lo2 = lo2 + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi2 = hi2 + Math.imul(ah7, bh5) | 0;
        lo2 = lo2 + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi2 = hi2 + Math.imul(ah6, bh6) | 0;
        lo2 = lo2 + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi2 = hi2 + Math.imul(ah5, bh7) | 0;
        lo2 = lo2 + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi2 = hi2 + Math.imul(ah4, bh8) | 0;
        lo2 = lo2 + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi2 = hi2 + Math.imul(ah3, bh9) | 0;
        var w12 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo2 = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi2 = Math.imul(ah9, bh4);
        lo2 = lo2 + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi2 = hi2 + Math.imul(ah8, bh5) | 0;
        lo2 = lo2 + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi2 = hi2 + Math.imul(ah7, bh6) | 0;
        lo2 = lo2 + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi2 = hi2 + Math.imul(ah6, bh7) | 0;
        lo2 = lo2 + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi2 = hi2 + Math.imul(ah5, bh8) | 0;
        lo2 = lo2 + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi2 = hi2 + Math.imul(ah4, bh9) | 0;
        var w13 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo2 = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi2 = Math.imul(ah9, bh5);
        lo2 = lo2 + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi2 = hi2 + Math.imul(ah8, bh6) | 0;
        lo2 = lo2 + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi2 = hi2 + Math.imul(ah7, bh7) | 0;
        lo2 = lo2 + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi2 = hi2 + Math.imul(ah6, bh8) | 0;
        lo2 = lo2 + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi2 = hi2 + Math.imul(ah5, bh9) | 0;
        var w14 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo2 = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi2 = Math.imul(ah9, bh6);
        lo2 = lo2 + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi2 = hi2 + Math.imul(ah8, bh7) | 0;
        lo2 = lo2 + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi2 = hi2 + Math.imul(ah7, bh8) | 0;
        lo2 = lo2 + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi2 = hi2 + Math.imul(ah6, bh9) | 0;
        var w15 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo2 = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi2 = Math.imul(ah9, bh7);
        lo2 = lo2 + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi2 = hi2 + Math.imul(ah8, bh8) | 0;
        lo2 = lo2 + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi2 = hi2 + Math.imul(ah7, bh9) | 0;
        var w16 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo2 = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi2 = Math.imul(ah9, bh8);
        lo2 = lo2 + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi2 = hi2 + Math.imul(ah8, bh9) | 0;
        var w17 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo2 = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi2 = Math.imul(ah9, bh9);
        var w18 = (c7 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c7 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o6[0] = w0;
        o6[1] = w1;
        o6[2] = w22;
        o6[3] = w32;
        o6[4] = w42;
        o6[5] = w52;
        o6[6] = w6;
        o6[7] = w7;
        o6[8] = w8;
        o6[9] = w9;
        o6[10] = w10;
        o6[11] = w11;
        o6[12] = w12;
        o6[13] = w13;
        o6[14] = w14;
        o6[15] = w15;
        o6[16] = w16;
        o6[17] = w17;
        o6[18] = w18;
        if (c7 !== 0) {
          o6[19] = c7;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k7 = 0; k7 < out.length - 1; k7++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k7, num.length - 1);
          for (var j5 = Math.max(0, k7 - self2.length + 1); j5 <= maxJ; j5++) {
            var i6 = k7 - j5;
            var a5 = self2.words[i6] | 0;
            var b5 = num.words[j5] | 0;
            var r6 = a5 * b5;
            var lo2 = r6 & 67108863;
            ncarry = ncarry + (r6 / 67108864 | 0) | 0;
            lo2 = lo2 + rword | 0;
            rword = lo2 & 67108863;
            ncarry = ncarry + (lo2 >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k7] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k7] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x8, y7) {
        this.x = x8;
        this.y = y7;
      }
      FFTM.prototype.makeRBT = function makeRBT(N11) {
        var t3 = new Array(N11);
        var l7 = BN3.prototype._countBits(N11) - 1;
        for (var i6 = 0; i6 < N11; i6++) {
          t3[i6] = this.revBin(i6, l7, N11);
        }
        return t3;
      };
      FFTM.prototype.revBin = function revBin(x8, l7, N11) {
        if (x8 === 0 || x8 === N11 - 1) return x8;
        var rb = 0;
        for (var i6 = 0; i6 < l7; i6++) {
          rb |= (x8 & 1) << l7 - i6 - 1;
          x8 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N11) {
        for (var i6 = 0; i6 < N11; i6++) {
          rtws[i6] = rws[rbt[i6]];
          itws[i6] = iws[rbt[i6]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N11, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N11);
        for (var s5 = 1; s5 < N11; s5 <<= 1) {
          var l7 = s5 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l7);
          var itwdf = Math.sin(2 * Math.PI / l7);
          for (var p5 = 0; p5 < N11; p5 += l7) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j5 = 0; j5 < s5; j5++) {
              var re3 = rtws[p5 + j5];
              var ie = itws[p5 + j5];
              var ro2 = rtws[p5 + j5 + s5];
              var io2 = itws[p5 + j5 + s5];
              var rx = rtwdf_ * ro2 - itwdf_ * io2;
              io2 = rtwdf_ * io2 + itwdf_ * ro2;
              ro2 = rx;
              rtws[p5 + j5] = re3 + ro2;
              itws[p5 + j5] = ie + io2;
              rtws[p5 + j5 + s5] = re3 - ro2;
              itws[p5 + j5 + s5] = ie - io2;
              if (j5 !== l7) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n6, m4) {
        var N11 = Math.max(m4, n6) | 1;
        var odd = N11 & 1;
        var i6 = 0;
        for (N11 = N11 / 2 | 0; N11; N11 = N11 >>> 1) {
          i6++;
        }
        return 1 << i6 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N11) {
        if (N11 <= 1) return;
        for (var i6 = 0; i6 < N11 / 2; i6++) {
          var t3 = rws[i6];
          rws[i6] = rws[N11 - i6 - 1];
          rws[N11 - i6 - 1] = t3;
          t3 = iws[i6];
          iws[i6] = -iws[N11 - i6 - 1];
          iws[N11 - i6 - 1] = -t3;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N11) {
        var carry = 0;
        for (var i6 = 0; i6 < N11 / 2; i6++) {
          var w6 = Math.round(ws2[2 * i6 + 1] / N11) * 8192 + Math.round(ws2[2 * i6] / N11) + carry;
          ws2[i6] = w6 & 67108863;
          if (w6 < 67108864) {
            carry = 0;
          } else {
            carry = w6 / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N11) {
        var carry = 0;
        for (var i6 = 0; i6 < len; i6++) {
          carry = carry + (ws2[i6] | 0);
          rws[2 * i6] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i6 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i6 = 2 * len; i6 < N11; ++i6) {
          rws[i6] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N11) {
        var ph = new Array(N11);
        for (var i6 = 0; i6 < N11; i6++) {
          ph[i6] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x8, y7, out) {
        var N11 = 2 * this.guessLen13b(x8.length, y7.length);
        var rbt = this.makeRBT(N11);
        var _8 = this.stub(N11);
        var rws = new Array(N11);
        var rwst = new Array(N11);
        var iwst = new Array(N11);
        var nrws = new Array(N11);
        var nrwst = new Array(N11);
        var niwst = new Array(N11);
        var rmws = out.words;
        rmws.length = N11;
        this.convert13b(x8.words, x8.length, rws, N11);
        this.convert13b(y7.words, y7.length, nrws, N11);
        this.transform(rws, _8, rwst, iwst, N11, rbt);
        this.transform(nrws, _8, nrwst, niwst, N11, rbt);
        for (var i6 = 0; i6 < N11; i6++) {
          var rx = rwst[i6] * nrwst[i6] - iwst[i6] * niwst[i6];
          iwst[i6] = rwst[i6] * niwst[i6] + iwst[i6] * nrwst[i6];
          rwst[i6] = rx;
        }
        this.conjugate(rwst, iwst, N11);
        this.transform(rwst, iwst, rmws, _8, N11, rbt);
        this.conjugate(rmws, _8, N11);
        this.normalize13b(rmws, N11);
        out.negative = x8.negative ^ y7.negative;
        out.length = x8.length + y7.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i6 = 0; i6 < this.length; i6++) {
          var w6 = (this.words[i6] | 0) * num;
          var lo2 = (w6 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w6 / 67108864 | 0;
          carry += lo2 >>> 26;
          this.words[i6] = lo2 & 67108863;
        }
        if (carry !== 0) {
          this.words[i6] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w6 = toBitArray(num);
        if (w6.length === 0) return new BN3(1);
        var res = this;
        for (var i6 = 0; i6 < w6.length; i6++, res = res.sqr()) {
          if (w6[i6] !== 0) break;
        }
        if (++i6 < w6.length) {
          for (var q4 = res.sqr(); i6 < w6.length; i6++, q4 = q4.sqr()) {
            if (w6[i6] === 0) continue;
            res = res.mul(q4);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r6 = bits % 26;
        var s5 = (bits - r6) / 26;
        var carryMask = 67108863 >>> 26 - r6 << 26 - r6;
        var i6;
        if (r6 !== 0) {
          var carry = 0;
          for (i6 = 0; i6 < this.length; i6++) {
            var newCarry = this.words[i6] & carryMask;
            var c7 = (this.words[i6] | 0) - newCarry << r6;
            this.words[i6] = c7 | carry;
            carry = newCarry >>> 26 - r6;
          }
          if (carry) {
            this.words[i6] = carry;
            this.length++;
          }
        }
        if (s5 !== 0) {
          for (i6 = this.length - 1; i6 >= 0; i6--) {
            this.words[i6 + s5] = this.words[i6];
          }
          for (i6 = 0; i6 < s5; i6++) {
            this.words[i6] = 0;
          }
          this.length += s5;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h7;
        if (hint) {
          h7 = (hint - hint % 26) / 26;
        } else {
          h7 = 0;
        }
        var r6 = bits % 26;
        var s5 = Math.min((bits - r6) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r6 << r6;
        var maskedWords = extended;
        h7 -= s5;
        h7 = Math.max(0, h7);
        if (maskedWords) {
          for (var i6 = 0; i6 < s5; i6++) {
            maskedWords.words[i6] = this.words[i6];
          }
          maskedWords.length = s5;
        }
        if (s5 === 0) {
        } else if (this.length > s5) {
          this.length -= s5;
          for (i6 = 0; i6 < this.length; i6++) {
            this.words[i6] = this.words[i6 + s5];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i6 = this.length - 1; i6 >= 0 && (carry !== 0 || i6 >= h7); i6--) {
          var word = this.words[i6] | 0;
          this.words[i6] = carry << 26 - r6 | word >>> r6;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r6 = bit % 26;
        var s5 = (bit - r6) / 26;
        var q4 = 1 << r6;
        if (this.length <= s5) return false;
        var w6 = this.words[s5];
        return !!(w6 & q4);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r6 = bits % 26;
        var s5 = (bits - r6) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s5) {
          return this;
        }
        if (r6 !== 0) {
          s5++;
        }
        this.length = Math.min(s5, this.length);
        if (r6 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r6 << r6;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i6 = 0; i6 < this.length && this.words[i6] >= 67108864; i6++) {
          this.words[i6] -= 67108864;
          if (i6 === this.length - 1) {
            this.words[i6 + 1] = 1;
          } else {
            this.words[i6 + 1]++;
          }
        }
        this.length = Math.max(this.length, i6 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i6 = 0; i6 < this.length && this.words[i6] < 0; i6++) {
            this.words[i6] += 67108864;
            this.words[i6 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i6;
        this._expand(len);
        var w6;
        var carry = 0;
        for (i6 = 0; i6 < num.length; i6++) {
          w6 = (this.words[i6 + shift] | 0) + carry;
          var right = (num.words[i6] | 0) * mul3;
          w6 -= right & 67108863;
          carry = (w6 >> 26) - (right / 67108864 | 0);
          this.words[i6 + shift] = w6 & 67108863;
        }
        for (; i6 < this.length - shift; i6++) {
          w6 = (this.words[i6 + shift] | 0) + carry;
          carry = w6 >> 26;
          this.words[i6 + shift] = w6 & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i6 = 0; i6 < this.length; i6++) {
          w6 = -(this.words[i6] | 0) + carry;
          carry = w6 >> 26;
          this.words[i6] = w6 & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a5 = this.clone();
        var b5 = num;
        var bhi = b5.words[b5.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b5 = b5.ushln(shift);
          a5.iushln(shift);
          bhi = b5.words[b5.length - 1] | 0;
        }
        var m4 = a5.length - b5.length;
        var q4;
        if (mode !== "mod") {
          q4 = new BN3(null);
          q4.length = m4 + 1;
          q4.words = new Array(q4.length);
          for (var i6 = 0; i6 < q4.length; i6++) {
            q4.words[i6] = 0;
          }
        }
        var diff = a5.clone()._ishlnsubmul(b5, 1, m4);
        if (diff.negative === 0) {
          a5 = diff;
          if (q4) {
            q4.words[m4] = 1;
          }
        }
        for (var j5 = m4 - 1; j5 >= 0; j5--) {
          var qj = (a5.words[b5.length + j5] | 0) * 67108864 + (a5.words[b5.length + j5 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a5._ishlnsubmul(b5, qj, j5);
          while (a5.negative !== 0) {
            qj--;
            a5.negative = 0;
            a5._ishlnsubmul(b5, 1, j5);
            if (!a5.isZero()) {
              a5.negative ^= 1;
            }
          }
          if (q4) {
            q4.words[j5] = qj;
          }
        }
        if (q4) {
          q4._strip();
        }
        a5._strip();
        if (mode !== "div" && shift !== 0) {
          a5.iushrn(shift);
        }
        return {
          div: q4 || null,
          mod: a5
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r22 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r22 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p5 = (1 << 26) % num;
        var acc = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          acc = (p5 * acc + (this.words[i6] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          var w6 = (this.words[i6] | 0) + carry * 67108864;
          this.words[i6] = w6 / num | 0;
          carry = w6 % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p5) {
        assert2(p5.negative === 0);
        assert2(!p5.isZero());
        var x8 = this;
        var y7 = p5.clone();
        if (x8.negative !== 0) {
          x8 = x8.umod(p5);
        } else {
          x8 = x8.clone();
        }
        var A8 = new BN3(1);
        var B5 = new BN3(0);
        var C8 = new BN3(0);
        var D6 = new BN3(1);
        var g7 = 0;
        while (x8.isEven() && y7.isEven()) {
          x8.iushrn(1);
          y7.iushrn(1);
          ++g7;
        }
        var yp = y7.clone();
        var xp = x8.clone();
        while (!x8.isZero()) {
          for (var i6 = 0, im = 1; (x8.words[0] & im) === 0 && i6 < 26; ++i6, im <<= 1) ;
          if (i6 > 0) {
            x8.iushrn(i6);
            while (i6-- > 0) {
              if (A8.isOdd() || B5.isOdd()) {
                A8.iadd(yp);
                B5.isub(xp);
              }
              A8.iushrn(1);
              B5.iushrn(1);
            }
          }
          for (var j5 = 0, jm = 1; (y7.words[0] & jm) === 0 && j5 < 26; ++j5, jm <<= 1) ;
          if (j5 > 0) {
            y7.iushrn(j5);
            while (j5-- > 0) {
              if (C8.isOdd() || D6.isOdd()) {
                C8.iadd(yp);
                D6.isub(xp);
              }
              C8.iushrn(1);
              D6.iushrn(1);
            }
          }
          if (x8.cmp(y7) >= 0) {
            x8.isub(y7);
            A8.isub(C8);
            B5.isub(D6);
          } else {
            y7.isub(x8);
            C8.isub(A8);
            D6.isub(B5);
          }
        }
        return {
          a: C8,
          b: D6,
          gcd: y7.iushln(g7)
        };
      };
      BN3.prototype._invmp = function _invmp(p5) {
        assert2(p5.negative === 0);
        assert2(!p5.isZero());
        var a5 = this;
        var b5 = p5.clone();
        if (a5.negative !== 0) {
          a5 = a5.umod(p5);
        } else {
          a5 = a5.clone();
        }
        var x1 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b5.clone();
        while (a5.cmpn(1) > 0 && b5.cmpn(1) > 0) {
          for (var i6 = 0, im = 1; (a5.words[0] & im) === 0 && i6 < 26; ++i6, im <<= 1) ;
          if (i6 > 0) {
            a5.iushrn(i6);
            while (i6-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j5 = 0, jm = 1; (b5.words[0] & jm) === 0 && j5 < 26; ++j5, jm <<= 1) ;
          if (j5 > 0) {
            b5.iushrn(j5);
            while (j5-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a5.cmp(b5) >= 0) {
            a5.isub(b5);
            x1.isub(x22);
          } else {
            b5.isub(a5);
            x22.isub(x1);
          }
        }
        var res;
        if (a5.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p5);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a5 = this.clone();
        var b5 = num.clone();
        a5.negative = 0;
        b5.negative = 0;
        for (var shift = 0; a5.isEven() && b5.isEven(); shift++) {
          a5.iushrn(1);
          b5.iushrn(1);
        }
        do {
          while (a5.isEven()) {
            a5.iushrn(1);
          }
          while (b5.isEven()) {
            b5.iushrn(1);
          }
          var r6 = a5.cmp(b5);
          if (r6 < 0) {
            var t3 = a5;
            a5 = b5;
            b5 = t3;
          } else if (r6 === 0 || b5.cmpn(1) === 0) {
            break;
          }
          a5.isub(b5);
        } while (true);
        return b5.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r6 = bit % 26;
        var s5 = (bit - r6) / 26;
        var q4 = 1 << r6;
        if (this.length <= s5) {
          this._expand(s5 + 1);
          this.words[s5] |= q4;
          return this;
        }
        var carry = q4;
        for (var i6 = s5; carry !== 0 && i6 < this.length; i6++) {
          var w6 = this.words[i6] | 0;
          w6 += carry;
          carry = w6 >>> 26;
          w6 &= 67108863;
          this.words[i6] = w6;
        }
        if (carry !== 0) {
          this.words[i6] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w6 = this.words[0] | 0;
          res = w6 === num ? 0 : w6 < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          var a5 = this.words[i6] | 0;
          var b5 = num.words[i6] | 0;
          if (a5 === b5) continue;
          if (a5 < b5) {
            res = -1;
          } else if (a5 > b5) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt4(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt3(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p5) {
        this.name = name2;
        this.p = new BN3(p5, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r6 = num;
        var rlen;
        do {
          this.split(r6, this.tmp);
          r6 = this.imulK(r6);
          r6 = r6.iadd(this.tmp);
          rlen = r6.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r6.ucmp(this.p);
        if (cmp === 0) {
          r6.words[0] = 0;
          r6.length = 1;
        } else if (cmp > 0) {
          r6.isub(this.p);
        } else {
          if (r6.strip !== void 0) {
            r6.strip();
          } else {
            r6._strip();
          }
        }
        return r6;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i6 = 0; i6 < outLen; i6++) {
          output.words[i6] = input.words[i6];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i6 = 10; i6 < input.length; i6++) {
          var next = input.words[i6] | 0;
          input.words[i6 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i6 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo2 = 0;
        for (var i6 = 0; i6 < num.length; i6++) {
          var w6 = num.words[i6] | 0;
          lo2 += w6 * 977;
          num.words[i6] = lo2 & 67108863;
          lo2 = w6 * 64 + (lo2 / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i6 = 0; i6 < num.length; i6++) {
          var hi2 = (num.words[i6] | 0) * 19 + carry;
          var lo2 = hi2 & 67108863;
          hi2 >>>= 26;
          num.words[i6] = lo2;
          carry = hi2;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m4) {
        if (typeof m4 === "string") {
          var prime = BN3._prime(m4);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m4.gtn(1), "modulus must be greater than 1");
          this.m = m4;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a5) {
        assert2(a5.negative === 0, "red works only with positives");
        assert2(a5.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a5, b5) {
        assert2((a5.negative | b5.negative) === 0, "red works only with positives");
        assert2(
          a5.red && a5.red === b5.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a5) {
        if (this.prime) return this.prime.ireduce(a5)._forceRed(this);
        move(a5, a5.umod(this.m)._forceRed(this));
        return a5;
      };
      Red.prototype.neg = function neg3(a5) {
        if (a5.isZero()) {
          return a5.clone();
        }
        return this.m.sub(a5)._forceRed(this);
      };
      Red.prototype.add = function add3(a5, b5) {
        this._verify2(a5, b5);
        var res = a5.add(b5);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a5, b5) {
        this._verify2(a5, b5);
        var res = a5.iadd(b5);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a5, b5) {
        this._verify2(a5, b5);
        var res = a5.sub(b5);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a5, b5) {
        this._verify2(a5, b5);
        var res = a5.isub(b5);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a5, num) {
        this._verify1(a5);
        return this.imod(a5.ushln(num));
      };
      Red.prototype.imul = function imul(a5, b5) {
        this._verify2(a5, b5);
        return this.imod(a5.imul(b5));
      };
      Red.prototype.mul = function mul3(a5, b5) {
        this._verify2(a5, b5);
        return this.imod(a5.mul(b5));
      };
      Red.prototype.isqr = function isqr(a5) {
        return this.imul(a5, a5.clone());
      };
      Red.prototype.sqr = function sqr(a5) {
        return this.mul(a5, a5);
      };
      Red.prototype.sqrt = function sqrt(a5) {
        if (a5.isZero()) return a5.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a5, pow);
        }
        var q4 = this.m.subn(1);
        var s5 = 0;
        while (!q4.isZero() && q4.andln(1) === 0) {
          s5++;
          q4.iushrn(1);
        }
        assert2(!q4.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z7 = this.m.bitLength();
        z7 = new BN3(2 * z7 * z7).toRed(this);
        while (this.pow(z7, lpow).cmp(nOne) !== 0) {
          z7.redIAdd(nOne);
        }
        var c7 = this.pow(z7, q4);
        var r6 = this.pow(a5, q4.addn(1).iushrn(1));
        var t3 = this.pow(a5, q4);
        var m4 = s5;
        while (t3.cmp(one) !== 0) {
          var tmp = t3;
          for (var i6 = 0; tmp.cmp(one) !== 0; i6++) {
            tmp = tmp.redSqr();
          }
          assert2(i6 < m4);
          var b5 = this.pow(c7, new BN3(1).iushln(m4 - i6 - 1));
          r6 = r6.redMul(b5);
          c7 = b5.redSqr();
          t3 = t3.redMul(c7);
          m4 = i6;
        }
        return r6;
      };
      Red.prototype.invm = function invm(a5) {
        var inv = a5._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a5, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a5.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a5;
        for (var i6 = 2; i6 < wnd.length; i6++) {
          wnd[i6] = this.mul(wnd[i6 - 1], a5);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i6 = num.length - 1; i6 >= 0; i6--) {
          var word = num.words[i6];
          for (var j5 = start - 1; j5 >= 0; j5--) {
            var bit = word >> j5 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i6 !== 0 || j5 !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r6 = num.umod(this.m);
        return r6 === num ? r6.clone() : r6;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m4) {
        Red.call(this, m4);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r6 = this.imod(num.mul(this.rinv));
        r6.red = null;
        return r6;
      };
      Mont.prototype.imul = function imul(a5, b5) {
        if (a5.isZero() || b5.isZero()) {
          a5.words[0] = 0;
          a5.length = 1;
          return a5;
        }
        var t3 = a5.imul(b5);
        var c7 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u4 = t3.isub(c7).iushrn(this.shift);
        var res = u4;
        if (u4.cmp(this.m) >= 0) {
          res = u4.isub(this.m);
        } else if (u4.cmpn(0) < 0) {
          res = u4.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a5, b5) {
        if (a5.isZero() || b5.isZero()) return new BN3(0)._forceRed(this);
        var t3 = a5.mul(b5);
        var c7 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u4 = t3.isub(c7).iushrn(this.shift);
        var res = u4;
        if (u4.cmp(this.m) >= 0) {
          res = u4.isub(this.m);
        } else if (u4.cmpn(0) < 0) {
          res = u4.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a5) {
        var res = this.imod(a5._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@stablelib/chacha/lib/chacha.js
var require_chacha = __commonJS({
  "node_modules/@stablelib/chacha/lib/chacha.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    var ROUNDS = 20;
    function core(out, input, key2) {
      var j0 = 1634760805;
      var j1 = 857760878;
      var j22 = 2036477234;
      var j32 = 1797285236;
      var j42 = key2[3] << 24 | key2[2] << 16 | key2[1] << 8 | key2[0];
      var j5 = key2[7] << 24 | key2[6] << 16 | key2[5] << 8 | key2[4];
      var j6 = key2[11] << 24 | key2[10] << 16 | key2[9] << 8 | key2[8];
      var j7 = key2[15] << 24 | key2[14] << 16 | key2[13] << 8 | key2[12];
      var j8 = key2[19] << 24 | key2[18] << 16 | key2[17] << 8 | key2[16];
      var j9 = key2[23] << 24 | key2[22] << 16 | key2[21] << 8 | key2[20];
      var j10 = key2[27] << 24 | key2[26] << 16 | key2[25] << 8 | key2[24];
      var j11 = key2[31] << 24 | key2[30] << 16 | key2[29] << 8 | key2[28];
      var j12 = input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0];
      var j13 = input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4];
      var j14 = input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8];
      var j15 = input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12];
      var x0 = j0;
      var x1 = j1;
      var x22 = j22;
      var x32 = j32;
      var x42 = j42;
      var x52 = j5;
      var x62 = j6;
      var x72 = j7;
      var x8 = j8;
      var x9 = j9;
      var x10 = j10;
      var x11 = j11;
      var x12 = j12;
      var x13 = j13;
      var x14 = j14;
      var x15 = j15;
      for (var i6 = 0; i6 < ROUNDS; i6 += 2) {
        x0 = x0 + x42 | 0;
        x12 ^= x0;
        x12 = x12 >>> 32 - 16 | x12 << 16;
        x8 = x8 + x12 | 0;
        x42 ^= x8;
        x42 = x42 >>> 32 - 12 | x42 << 12;
        x1 = x1 + x52 | 0;
        x13 ^= x1;
        x13 = x13 >>> 32 - 16 | x13 << 16;
        x9 = x9 + x13 | 0;
        x52 ^= x9;
        x52 = x52 >>> 32 - 12 | x52 << 12;
        x22 = x22 + x62 | 0;
        x14 ^= x22;
        x14 = x14 >>> 32 - 16 | x14 << 16;
        x10 = x10 + x14 | 0;
        x62 ^= x10;
        x62 = x62 >>> 32 - 12 | x62 << 12;
        x32 = x32 + x72 | 0;
        x15 ^= x32;
        x15 = x15 >>> 32 - 16 | x15 << 16;
        x11 = x11 + x15 | 0;
        x72 ^= x11;
        x72 = x72 >>> 32 - 12 | x72 << 12;
        x22 = x22 + x62 | 0;
        x14 ^= x22;
        x14 = x14 >>> 32 - 8 | x14 << 8;
        x10 = x10 + x14 | 0;
        x62 ^= x10;
        x62 = x62 >>> 32 - 7 | x62 << 7;
        x32 = x32 + x72 | 0;
        x15 ^= x32;
        x15 = x15 >>> 32 - 8 | x15 << 8;
        x11 = x11 + x15 | 0;
        x72 ^= x11;
        x72 = x72 >>> 32 - 7 | x72 << 7;
        x1 = x1 + x52 | 0;
        x13 ^= x1;
        x13 = x13 >>> 32 - 8 | x13 << 8;
        x9 = x9 + x13 | 0;
        x52 ^= x9;
        x52 = x52 >>> 32 - 7 | x52 << 7;
        x0 = x0 + x42 | 0;
        x12 ^= x0;
        x12 = x12 >>> 32 - 8 | x12 << 8;
        x8 = x8 + x12 | 0;
        x42 ^= x8;
        x42 = x42 >>> 32 - 7 | x42 << 7;
        x0 = x0 + x52 | 0;
        x15 ^= x0;
        x15 = x15 >>> 32 - 16 | x15 << 16;
        x10 = x10 + x15 | 0;
        x52 ^= x10;
        x52 = x52 >>> 32 - 12 | x52 << 12;
        x1 = x1 + x62 | 0;
        x12 ^= x1;
        x12 = x12 >>> 32 - 16 | x12 << 16;
        x11 = x11 + x12 | 0;
        x62 ^= x11;
        x62 = x62 >>> 32 - 12 | x62 << 12;
        x22 = x22 + x72 | 0;
        x13 ^= x22;
        x13 = x13 >>> 32 - 16 | x13 << 16;
        x8 = x8 + x13 | 0;
        x72 ^= x8;
        x72 = x72 >>> 32 - 12 | x72 << 12;
        x32 = x32 + x42 | 0;
        x14 ^= x32;
        x14 = x14 >>> 32 - 16 | x14 << 16;
        x9 = x9 + x14 | 0;
        x42 ^= x9;
        x42 = x42 >>> 32 - 12 | x42 << 12;
        x22 = x22 + x72 | 0;
        x13 ^= x22;
        x13 = x13 >>> 32 - 8 | x13 << 8;
        x8 = x8 + x13 | 0;
        x72 ^= x8;
        x72 = x72 >>> 32 - 7 | x72 << 7;
        x32 = x32 + x42 | 0;
        x14 ^= x32;
        x14 = x14 >>> 32 - 8 | x14 << 8;
        x9 = x9 + x14 | 0;
        x42 ^= x9;
        x42 = x42 >>> 32 - 7 | x42 << 7;
        x1 = x1 + x62 | 0;
        x12 ^= x1;
        x12 = x12 >>> 32 - 8 | x12 << 8;
        x11 = x11 + x12 | 0;
        x62 ^= x11;
        x62 = x62 >>> 32 - 7 | x62 << 7;
        x0 = x0 + x52 | 0;
        x15 ^= x0;
        x15 = x15 >>> 32 - 8 | x15 << 8;
        x10 = x10 + x15 | 0;
        x52 ^= x10;
        x52 = x52 >>> 32 - 7 | x52 << 7;
      }
      binary_1.writeUint32LE(x0 + j0 | 0, out, 0);
      binary_1.writeUint32LE(x1 + j1 | 0, out, 4);
      binary_1.writeUint32LE(x22 + j22 | 0, out, 8);
      binary_1.writeUint32LE(x32 + j32 | 0, out, 12);
      binary_1.writeUint32LE(x42 + j42 | 0, out, 16);
      binary_1.writeUint32LE(x52 + j5 | 0, out, 20);
      binary_1.writeUint32LE(x62 + j6 | 0, out, 24);
      binary_1.writeUint32LE(x72 + j7 | 0, out, 28);
      binary_1.writeUint32LE(x8 + j8 | 0, out, 32);
      binary_1.writeUint32LE(x9 + j9 | 0, out, 36);
      binary_1.writeUint32LE(x10 + j10 | 0, out, 40);
      binary_1.writeUint32LE(x11 + j11 | 0, out, 44);
      binary_1.writeUint32LE(x12 + j12 | 0, out, 48);
      binary_1.writeUint32LE(x13 + j13 | 0, out, 52);
      binary_1.writeUint32LE(x14 + j14 | 0, out, 56);
      binary_1.writeUint32LE(x15 + j15 | 0, out, 60);
    }
    function streamXOR(key2, nonce, src2, dst, nonceInplaceCounterLength) {
      if (nonceInplaceCounterLength === void 0) {
        nonceInplaceCounterLength = 0;
      }
      if (key2.length !== 32) {
        throw new Error("ChaCha: key size must be 32 bytes");
      }
      if (dst.length < src2.length) {
        throw new Error("ChaCha: destination is shorter than source");
      }
      var nc;
      var counterLength;
      if (nonceInplaceCounterLength === 0) {
        if (nonce.length !== 8 && nonce.length !== 12) {
          throw new Error("ChaCha nonce must be 8 or 12 bytes");
        }
        nc = new Uint8Array(16);
        counterLength = nc.length - nonce.length;
        nc.set(nonce, counterLength);
      } else {
        if (nonce.length !== 16) {
          throw new Error("ChaCha nonce with counter must be 16 bytes");
        }
        nc = nonce;
        counterLength = nonceInplaceCounterLength;
      }
      var block = new Uint8Array(64);
      for (var i6 = 0; i6 < src2.length; i6 += 64) {
        core(block, nc, key2);
        for (var j5 = i6; j5 < i6 + 64 && j5 < src2.length; j5++) {
          dst[j5] = src2[j5] ^ block[j5 - i6];
        }
        incrementCounter(nc, 0, counterLength);
      }
      wipe_1.wipe(block);
      if (nonceInplaceCounterLength === 0) {
        wipe_1.wipe(nc);
      }
      return dst;
    }
    exports.streamXOR = streamXOR;
    function stream(key2, nonce, dst, nonceInplaceCounterLength) {
      if (nonceInplaceCounterLength === void 0) {
        nonceInplaceCounterLength = 0;
      }
      wipe_1.wipe(dst);
      return streamXOR(key2, nonce, dst, dst, nonceInplaceCounterLength);
    }
    exports.stream = stream;
    function incrementCounter(counter, pos, len) {
      var carry = 1;
      while (len--) {
        carry = carry + (counter[pos] & 255) | 0;
        counter[pos] = carry & 255;
        carry >>>= 8;
        pos++;
      }
      if (carry > 0) {
        throw new Error("ChaCha: counter overflow");
      }
    }
  }
});

// node_modules/@stablelib/constant-time/lib/constant-time.js
var require_constant_time = __commonJS({
  "node_modules/@stablelib/constant-time/lib/constant-time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function select(subject, resultIfOne, resultIfZero) {
      return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;
    }
    exports.select = select;
    function lessOrEqual(a5, b5) {
      return (a5 | 0) - (b5 | 0) - 1 >>> 31 & 1;
    }
    exports.lessOrEqual = lessOrEqual;
    function compare2(a5, b5) {
      if (a5.length !== b5.length) {
        return 0;
      }
      var result = 0;
      for (var i6 = 0; i6 < a5.length; i6++) {
        result |= a5[i6] ^ b5[i6];
      }
      return 1 & result - 1 >>> 8;
    }
    exports.compare = compare2;
    function equal(a5, b5) {
      if (a5.length === 0 || b5.length === 0) {
        return false;
      }
      return compare2(a5, b5) !== 0;
    }
    exports.equal = equal;
  }
});

// node_modules/@stablelib/poly1305/lib/poly1305.js
var require_poly1305 = __commonJS({
  "node_modules/@stablelib/poly1305/lib/poly1305.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constant_time_1 = require_constant_time();
    var wipe_1 = require_wipe();
    exports.DIGEST_LENGTH = 16;
    var Poly1305 = (
      /** @class */
      function() {
        function Poly13052(key2) {
          this.digestLength = exports.DIGEST_LENGTH;
          this._buffer = new Uint8Array(16);
          this._r = new Uint16Array(10);
          this._h = new Uint16Array(10);
          this._pad = new Uint16Array(8);
          this._leftover = 0;
          this._fin = 0;
          this._finished = false;
          var t0 = key2[0] | key2[1] << 8;
          this._r[0] = t0 & 8191;
          var t1 = key2[2] | key2[3] << 8;
          this._r[1] = (t0 >>> 13 | t1 << 3) & 8191;
          var t22 = key2[4] | key2[5] << 8;
          this._r[2] = (t1 >>> 10 | t22 << 6) & 7939;
          var t3 = key2[6] | key2[7] << 8;
          this._r[3] = (t22 >>> 7 | t3 << 9) & 8191;
          var t4 = key2[8] | key2[9] << 8;
          this._r[4] = (t3 >>> 4 | t4 << 12) & 255;
          this._r[5] = t4 >>> 1 & 8190;
          var t5 = key2[10] | key2[11] << 8;
          this._r[6] = (t4 >>> 14 | t5 << 2) & 8191;
          var t6 = key2[12] | key2[13] << 8;
          this._r[7] = (t5 >>> 11 | t6 << 5) & 8065;
          var t7 = key2[14] | key2[15] << 8;
          this._r[8] = (t6 >>> 8 | t7 << 8) & 8191;
          this._r[9] = t7 >>> 5 & 127;
          this._pad[0] = key2[16] | key2[17] << 8;
          this._pad[1] = key2[18] | key2[19] << 8;
          this._pad[2] = key2[20] | key2[21] << 8;
          this._pad[3] = key2[22] | key2[23] << 8;
          this._pad[4] = key2[24] | key2[25] << 8;
          this._pad[5] = key2[26] | key2[27] << 8;
          this._pad[6] = key2[28] | key2[29] << 8;
          this._pad[7] = key2[30] | key2[31] << 8;
        }
        Poly13052.prototype._blocks = function(m4, mpos, bytes) {
          var hibit = this._fin ? 0 : 1 << 11;
          var h0 = this._h[0], h1 = this._h[1], h22 = this._h[2], h32 = this._h[3], h42 = this._h[4], h52 = this._h[5], h62 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];
          var r0 = this._r[0], r1 = this._r[1], r22 = this._r[2], r32 = this._r[3], r42 = this._r[4], r52 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];
          while (bytes >= 16) {
            var t0 = m4[mpos + 0] | m4[mpos + 1] << 8;
            h0 += t0 & 8191;
            var t1 = m4[mpos + 2] | m4[mpos + 3] << 8;
            h1 += (t0 >>> 13 | t1 << 3) & 8191;
            var t22 = m4[mpos + 4] | m4[mpos + 5] << 8;
            h22 += (t1 >>> 10 | t22 << 6) & 8191;
            var t3 = m4[mpos + 6] | m4[mpos + 7] << 8;
            h32 += (t22 >>> 7 | t3 << 9) & 8191;
            var t4 = m4[mpos + 8] | m4[mpos + 9] << 8;
            h42 += (t3 >>> 4 | t4 << 12) & 8191;
            h52 += t4 >>> 1 & 8191;
            var t5 = m4[mpos + 10] | m4[mpos + 11] << 8;
            h62 += (t4 >>> 14 | t5 << 2) & 8191;
            var t6 = m4[mpos + 12] | m4[mpos + 13] << 8;
            h7 += (t5 >>> 11 | t6 << 5) & 8191;
            var t7 = m4[mpos + 14] | m4[mpos + 15] << 8;
            h8 += (t6 >>> 8 | t7 << 8) & 8191;
            h9 += t7 >>> 5 | hibit;
            var c7 = 0;
            var d0 = c7;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h22 * (5 * r8);
            d0 += h32 * (5 * r7);
            d0 += h42 * (5 * r6);
            c7 = d0 >>> 13;
            d0 &= 8191;
            d0 += h52 * (5 * r52);
            d0 += h62 * (5 * r42);
            d0 += h7 * (5 * r32);
            d0 += h8 * (5 * r22);
            d0 += h9 * (5 * r1);
            c7 += d0 >>> 13;
            d0 &= 8191;
            var d1 = c7;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h22 * (5 * r9);
            d1 += h32 * (5 * r8);
            d1 += h42 * (5 * r7);
            c7 = d1 >>> 13;
            d1 &= 8191;
            d1 += h52 * (5 * r6);
            d1 += h62 * (5 * r52);
            d1 += h7 * (5 * r42);
            d1 += h8 * (5 * r32);
            d1 += h9 * (5 * r22);
            c7 += d1 >>> 13;
            d1 &= 8191;
            var d22 = c7;
            d22 += h0 * r22;
            d22 += h1 * r1;
            d22 += h22 * r0;
            d22 += h32 * (5 * r9);
            d22 += h42 * (5 * r8);
            c7 = d22 >>> 13;
            d22 &= 8191;
            d22 += h52 * (5 * r7);
            d22 += h62 * (5 * r6);
            d22 += h7 * (5 * r52);
            d22 += h8 * (5 * r42);
            d22 += h9 * (5 * r32);
            c7 += d22 >>> 13;
            d22 &= 8191;
            var d32 = c7;
            d32 += h0 * r32;
            d32 += h1 * r22;
            d32 += h22 * r1;
            d32 += h32 * r0;
            d32 += h42 * (5 * r9);
            c7 = d32 >>> 13;
            d32 &= 8191;
            d32 += h52 * (5 * r8);
            d32 += h62 * (5 * r7);
            d32 += h7 * (5 * r6);
            d32 += h8 * (5 * r52);
            d32 += h9 * (5 * r42);
            c7 += d32 >>> 13;
            d32 &= 8191;
            var d42 = c7;
            d42 += h0 * r42;
            d42 += h1 * r32;
            d42 += h22 * r22;
            d42 += h32 * r1;
            d42 += h42 * r0;
            c7 = d42 >>> 13;
            d42 &= 8191;
            d42 += h52 * (5 * r9);
            d42 += h62 * (5 * r8);
            d42 += h7 * (5 * r7);
            d42 += h8 * (5 * r6);
            d42 += h9 * (5 * r52);
            c7 += d42 >>> 13;
            d42 &= 8191;
            var d52 = c7;
            d52 += h0 * r52;
            d52 += h1 * r42;
            d52 += h22 * r32;
            d52 += h32 * r22;
            d52 += h42 * r1;
            c7 = d52 >>> 13;
            d52 &= 8191;
            d52 += h52 * r0;
            d52 += h62 * (5 * r9);
            d52 += h7 * (5 * r8);
            d52 += h8 * (5 * r7);
            d52 += h9 * (5 * r6);
            c7 += d52 >>> 13;
            d52 &= 8191;
            var d6 = c7;
            d6 += h0 * r6;
            d6 += h1 * r52;
            d6 += h22 * r42;
            d6 += h32 * r32;
            d6 += h42 * r22;
            c7 = d6 >>> 13;
            d6 &= 8191;
            d6 += h52 * r1;
            d6 += h62 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c7 += d6 >>> 13;
            d6 &= 8191;
            var d7 = c7;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h22 * r52;
            d7 += h32 * r42;
            d7 += h42 * r32;
            c7 = d7 >>> 13;
            d7 &= 8191;
            d7 += h52 * r22;
            d7 += h62 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c7 += d7 >>> 13;
            d7 &= 8191;
            var d8 = c7;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h22 * r6;
            d8 += h32 * r52;
            d8 += h42 * r42;
            c7 = d8 >>> 13;
            d8 &= 8191;
            d8 += h52 * r32;
            d8 += h62 * r22;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c7 += d8 >>> 13;
            d8 &= 8191;
            var d9 = c7;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h22 * r7;
            d9 += h32 * r6;
            d9 += h42 * r52;
            c7 = d9 >>> 13;
            d9 &= 8191;
            d9 += h52 * r42;
            d9 += h62 * r32;
            d9 += h7 * r22;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c7 += d9 >>> 13;
            d9 &= 8191;
            c7 = (c7 << 2) + c7 | 0;
            c7 = c7 + d0 | 0;
            d0 = c7 & 8191;
            c7 = c7 >>> 13;
            d1 += c7;
            h0 = d0;
            h1 = d1;
            h22 = d22;
            h32 = d32;
            h42 = d42;
            h52 = d52;
            h62 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
          }
          this._h[0] = h0;
          this._h[1] = h1;
          this._h[2] = h22;
          this._h[3] = h32;
          this._h[4] = h42;
          this._h[5] = h52;
          this._h[6] = h62;
          this._h[7] = h7;
          this._h[8] = h8;
          this._h[9] = h9;
        };
        Poly13052.prototype.finish = function(mac, macpos) {
          if (macpos === void 0) {
            macpos = 0;
          }
          var g7 = new Uint16Array(10);
          var c7;
          var mask;
          var f5;
          var i6;
          if (this._leftover) {
            i6 = this._leftover;
            this._buffer[i6++] = 1;
            for (; i6 < 16; i6++) {
              this._buffer[i6] = 0;
            }
            this._fin = 1;
            this._blocks(this._buffer, 0, 16);
          }
          c7 = this._h[1] >>> 13;
          this._h[1] &= 8191;
          for (i6 = 2; i6 < 10; i6++) {
            this._h[i6] += c7;
            c7 = this._h[i6] >>> 13;
            this._h[i6] &= 8191;
          }
          this._h[0] += c7 * 5;
          c7 = this._h[0] >>> 13;
          this._h[0] &= 8191;
          this._h[1] += c7;
          c7 = this._h[1] >>> 13;
          this._h[1] &= 8191;
          this._h[2] += c7;
          g7[0] = this._h[0] + 5;
          c7 = g7[0] >>> 13;
          g7[0] &= 8191;
          for (i6 = 1; i6 < 10; i6++) {
            g7[i6] = this._h[i6] + c7;
            c7 = g7[i6] >>> 13;
            g7[i6] &= 8191;
          }
          g7[9] -= 1 << 13;
          mask = (c7 ^ 1) - 1;
          for (i6 = 0; i6 < 10; i6++) {
            g7[i6] &= mask;
          }
          mask = ~mask;
          for (i6 = 0; i6 < 10; i6++) {
            this._h[i6] = this._h[i6] & mask | g7[i6];
          }
          this._h[0] = (this._h[0] | this._h[1] << 13) & 65535;
          this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 65535;
          this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 65535;
          this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 65535;
          this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 65535;
          this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 65535;
          this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 65535;
          this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 65535;
          f5 = this._h[0] + this._pad[0];
          this._h[0] = f5 & 65535;
          for (i6 = 1; i6 < 8; i6++) {
            f5 = (this._h[i6] + this._pad[i6] | 0) + (f5 >>> 16) | 0;
            this._h[i6] = f5 & 65535;
          }
          mac[macpos + 0] = this._h[0] >>> 0;
          mac[macpos + 1] = this._h[0] >>> 8;
          mac[macpos + 2] = this._h[1] >>> 0;
          mac[macpos + 3] = this._h[1] >>> 8;
          mac[macpos + 4] = this._h[2] >>> 0;
          mac[macpos + 5] = this._h[2] >>> 8;
          mac[macpos + 6] = this._h[3] >>> 0;
          mac[macpos + 7] = this._h[3] >>> 8;
          mac[macpos + 8] = this._h[4] >>> 0;
          mac[macpos + 9] = this._h[4] >>> 8;
          mac[macpos + 10] = this._h[5] >>> 0;
          mac[macpos + 11] = this._h[5] >>> 8;
          mac[macpos + 12] = this._h[6] >>> 0;
          mac[macpos + 13] = this._h[6] >>> 8;
          mac[macpos + 14] = this._h[7] >>> 0;
          mac[macpos + 15] = this._h[7] >>> 8;
          this._finished = true;
          return this;
        };
        Poly13052.prototype.update = function(m4) {
          var mpos = 0;
          var bytes = m4.length;
          var want;
          if (this._leftover) {
            want = 16 - this._leftover;
            if (want > bytes) {
              want = bytes;
            }
            for (var i6 = 0; i6 < want; i6++) {
              this._buffer[this._leftover + i6] = m4[mpos + i6];
            }
            bytes -= want;
            mpos += want;
            this._leftover += want;
            if (this._leftover < 16) {
              return this;
            }
            this._blocks(this._buffer, 0, 16);
            this._leftover = 0;
          }
          if (bytes >= 16) {
            want = bytes - bytes % 16;
            this._blocks(m4, mpos, want);
            mpos += want;
            bytes -= want;
          }
          if (bytes) {
            for (var i6 = 0; i6 < bytes; i6++) {
              this._buffer[this._leftover + i6] = m4[mpos + i6];
            }
            this._leftover += bytes;
          }
          return this;
        };
        Poly13052.prototype.digest = function() {
          if (this._finished) {
            throw new Error("Poly1305 was finished");
          }
          var mac = new Uint8Array(16);
          this.finish(mac);
          return mac;
        };
        Poly13052.prototype.clean = function() {
          wipe_1.wipe(this._buffer);
          wipe_1.wipe(this._r);
          wipe_1.wipe(this._h);
          wipe_1.wipe(this._pad);
          this._leftover = 0;
          this._fin = 0;
          this._finished = true;
          return this;
        };
        return Poly13052;
      }()
    );
    exports.Poly1305 = Poly1305;
    function oneTimeAuth(key2, data) {
      var h7 = new Poly1305(key2);
      h7.update(data);
      var digest2 = h7.digest();
      h7.clean();
      return digest2;
    }
    exports.oneTimeAuth = oneTimeAuth;
    function equal(a5, b5) {
      if (a5.length !== exports.DIGEST_LENGTH || b5.length !== exports.DIGEST_LENGTH) {
        return false;
      }
      return constant_time_1.equal(a5, b5);
    }
    exports.equal = equal;
  }
});

// node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js
var require_chacha20poly1305 = __commonJS({
  "node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var chacha_1 = require_chacha();
    var poly1305_1 = require_poly1305();
    var wipe_1 = require_wipe();
    var binary_1 = require_binary();
    var constant_time_1 = require_constant_time();
    exports.KEY_LENGTH = 32;
    exports.NONCE_LENGTH = 12;
    exports.TAG_LENGTH = 16;
    var ZEROS = new Uint8Array(16);
    var ChaCha20Poly1305 = (
      /** @class */
      function() {
        function ChaCha20Poly13052(key2) {
          this.nonceLength = exports.NONCE_LENGTH;
          this.tagLength = exports.TAG_LENGTH;
          if (key2.length !== exports.KEY_LENGTH) {
            throw new Error("ChaCha20Poly1305 needs 32-byte key");
          }
          this._key = new Uint8Array(key2);
        }
        ChaCha20Poly13052.prototype.seal = function(nonce, plaintext, associatedData, dst) {
          if (nonce.length > 16) {
            throw new Error("ChaCha20Poly1305: incorrect nonce length");
          }
          var counter = new Uint8Array(16);
          counter.set(nonce, counter.length - nonce.length);
          var authKey = new Uint8Array(32);
          chacha_1.stream(this._key, counter, authKey, 4);
          var resultLength = plaintext.length + this.tagLength;
          var result;
          if (dst) {
            if (dst.length !== resultLength) {
              throw new Error("ChaCha20Poly1305: incorrect destination length");
            }
            result = dst;
          } else {
            result = new Uint8Array(resultLength);
          }
          chacha_1.streamXOR(this._key, counter, plaintext, result, 4);
          this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);
          wipe_1.wipe(counter);
          return result;
        };
        ChaCha20Poly13052.prototype.open = function(nonce, sealed, associatedData, dst) {
          if (nonce.length > 16) {
            throw new Error("ChaCha20Poly1305: incorrect nonce length");
          }
          if (sealed.length < this.tagLength) {
            return null;
          }
          var counter = new Uint8Array(16);
          counter.set(nonce, counter.length - nonce.length);
          var authKey = new Uint8Array(32);
          chacha_1.stream(this._key, counter, authKey, 4);
          var calculatedTag = new Uint8Array(this.tagLength);
          this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);
          if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {
            return null;
          }
          var resultLength = sealed.length - this.tagLength;
          var result;
          if (dst) {
            if (dst.length !== resultLength) {
              throw new Error("ChaCha20Poly1305: incorrect destination length");
            }
            result = dst;
          } else {
            result = new Uint8Array(resultLength);
          }
          chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);
          wipe_1.wipe(counter);
          return result;
        };
        ChaCha20Poly13052.prototype.clean = function() {
          wipe_1.wipe(this._key);
          return this;
        };
        ChaCha20Poly13052.prototype._authenticate = function(tagOut, authKey, ciphertext, associatedData) {
          var h7 = new poly1305_1.Poly1305(authKey);
          if (associatedData) {
            h7.update(associatedData);
            if (associatedData.length % 16 > 0) {
              h7.update(ZEROS.subarray(associatedData.length % 16));
            }
          }
          h7.update(ciphertext);
          if (ciphertext.length % 16 > 0) {
            h7.update(ZEROS.subarray(ciphertext.length % 16));
          }
          var length2 = new Uint8Array(8);
          if (associatedData) {
            binary_1.writeUint64LE(associatedData.length, length2);
          }
          h7.update(length2);
          binary_1.writeUint64LE(ciphertext.length, length2);
          h7.update(length2);
          var tag = h7.digest();
          for (var i6 = 0; i6 < tag.length; i6++) {
            tagOut[i6] = tag[i6];
          }
          h7.clean();
          wipe_1.wipe(tag);
          wipe_1.wipe(length2);
        };
        return ChaCha20Poly13052;
      }()
    );
    exports.ChaCha20Poly1305 = ChaCha20Poly1305;
  }
});

// node_modules/@stablelib/hash/lib/hash.js
var require_hash2 = __commonJS({
  "node_modules/@stablelib/hash/lib/hash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function isSerializableHash(h7) {
      return typeof h7.saveState !== "undefined" && typeof h7.restoreState !== "undefined" && typeof h7.cleanSavedState !== "undefined";
    }
    exports.isSerializableHash = isSerializableHash;
  }
});

// node_modules/@stablelib/hmac/lib/hmac.js
var require_hmac = __commonJS({
  "node_modules/@stablelib/hmac/lib/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var hash_1 = require_hash2();
    var constant_time_1 = require_constant_time();
    var wipe_1 = require_wipe();
    var HMAC = (
      /** @class */
      function() {
        function HMAC2(hash2, key2) {
          this._finished = false;
          this._inner = new hash2();
          this._outer = new hash2();
          this.blockSize = this._outer.blockSize;
          this.digestLength = this._outer.digestLength;
          var pad = new Uint8Array(this.blockSize);
          if (key2.length > this.blockSize) {
            this._inner.update(key2).finish(pad).clean();
          } else {
            pad.set(key2);
          }
          for (var i6 = 0; i6 < pad.length; i6++) {
            pad[i6] ^= 54;
          }
          this._inner.update(pad);
          for (var i6 = 0; i6 < pad.length; i6++) {
            pad[i6] ^= 54 ^ 92;
          }
          this._outer.update(pad);
          if (hash_1.isSerializableHash(this._inner) && hash_1.isSerializableHash(this._outer)) {
            this._innerKeyedState = this._inner.saveState();
            this._outerKeyedState = this._outer.saveState();
          }
          wipe_1.wipe(pad);
        }
        HMAC2.prototype.reset = function() {
          if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {
            throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");
          }
          this._inner.restoreState(this._innerKeyedState);
          this._outer.restoreState(this._outerKeyedState);
          this._finished = false;
          return this;
        };
        HMAC2.prototype.clean = function() {
          if (hash_1.isSerializableHash(this._inner)) {
            this._inner.cleanSavedState(this._innerKeyedState);
          }
          if (hash_1.isSerializableHash(this._outer)) {
            this._outer.cleanSavedState(this._outerKeyedState);
          }
          this._inner.clean();
          this._outer.clean();
        };
        HMAC2.prototype.update = function(data) {
          this._inner.update(data);
          return this;
        };
        HMAC2.prototype.finish = function(out) {
          if (this._finished) {
            this._outer.finish(out);
            return this;
          }
          this._inner.finish(out);
          this._outer.update(out.subarray(0, this.digestLength)).finish(out);
          this._finished = true;
          return this;
        };
        HMAC2.prototype.digest = function() {
          var out = new Uint8Array(this.digestLength);
          this.finish(out);
          return out;
        };
        HMAC2.prototype.saveState = function() {
          if (!hash_1.isSerializableHash(this._inner)) {
            throw new Error("hmac: can't saveState() because hash doesn't implement it");
          }
          return this._inner.saveState();
        };
        HMAC2.prototype.restoreState = function(savedState) {
          if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {
            throw new Error("hmac: can't restoreState() because hash doesn't implement it");
          }
          this._inner.restoreState(savedState);
          this._outer.restoreState(this._outerKeyedState);
          this._finished = false;
          return this;
        };
        HMAC2.prototype.cleanSavedState = function(savedState) {
          if (!hash_1.isSerializableHash(this._inner)) {
            throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");
          }
          this._inner.cleanSavedState(savedState);
        };
        return HMAC2;
      }()
    );
    exports.HMAC = HMAC;
    function hmac2(hash2, key2, data) {
      var h7 = new HMAC(hash2, key2);
      h7.update(data);
      var digest2 = h7.digest();
      h7.clean();
      return digest2;
    }
    exports.hmac = hmac2;
    exports.equal = constant_time_1.equal;
  }
});

// node_modules/@stablelib/hkdf/lib/hkdf.js
var require_hkdf = __commonJS({
  "node_modules/@stablelib/hkdf/lib/hkdf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var hmac_1 = require_hmac();
    var wipe_1 = require_wipe();
    var HKDF = (
      /** @class */
      function() {
        function HKDF2(hash2, key2, salt, info) {
          if (salt === void 0) {
            salt = new Uint8Array(0);
          }
          this._counter = new Uint8Array(1);
          this._hash = hash2;
          this._info = info;
          var okm = hmac_1.hmac(this._hash, salt, key2);
          this._hmac = new hmac_1.HMAC(hash2, okm);
          this._buffer = new Uint8Array(this._hmac.digestLength);
          this._bufpos = this._buffer.length;
        }
        HKDF2.prototype._fillBuffer = function() {
          this._counter[0]++;
          var ctr = this._counter[0];
          if (ctr === 0) {
            throw new Error("hkdf: cannot expand more");
          }
          this._hmac.reset();
          if (ctr > 1) {
            this._hmac.update(this._buffer);
          }
          if (this._info) {
            this._hmac.update(this._info);
          }
          this._hmac.update(this._counter);
          this._hmac.finish(this._buffer);
          this._bufpos = 0;
        };
        HKDF2.prototype.expand = function(length2) {
          var out = new Uint8Array(length2);
          for (var i6 = 0; i6 < out.length; i6++) {
            if (this._bufpos === this._buffer.length) {
              this._fillBuffer();
            }
            out[i6] = this._buffer[this._bufpos++];
          }
          return out;
        };
        HKDF2.prototype.clean = function() {
          this._hmac.clean();
          wipe_1.wipe(this._buffer);
          wipe_1.wipe(this._counter);
          this._bufpos = 0;
        };
        return HKDF2;
      }()
    );
    exports.HKDF = HKDF;
  }
});

// node_modules/@stablelib/sha256/lib/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@stablelib/sha256/lib/sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    exports.DIGEST_LENGTH = 32;
    exports.BLOCK_SIZE = 64;
    var SHA256 = (
      /** @class */
      function() {
        function SHA2562() {
          this.digestLength = exports.DIGEST_LENGTH;
          this.blockSize = exports.BLOCK_SIZE;
          this._state = new Int32Array(8);
          this._temp = new Int32Array(64);
          this._buffer = new Uint8Array(128);
          this._bufferLength = 0;
          this._bytesHashed = 0;
          this._finished = false;
          this.reset();
        }
        SHA2562.prototype._initState = function() {
          this._state[0] = 1779033703;
          this._state[1] = 3144134277;
          this._state[2] = 1013904242;
          this._state[3] = 2773480762;
          this._state[4] = 1359893119;
          this._state[5] = 2600822924;
          this._state[6] = 528734635;
          this._state[7] = 1541459225;
        };
        SHA2562.prototype.reset = function() {
          this._initState();
          this._bufferLength = 0;
          this._bytesHashed = 0;
          this._finished = false;
          return this;
        };
        SHA2562.prototype.clean = function() {
          wipe_1.wipe(this._buffer);
          wipe_1.wipe(this._temp);
          this.reset();
        };
        SHA2562.prototype.update = function(data, dataLength) {
          if (dataLength === void 0) {
            dataLength = data.length;
          }
          if (this._finished) {
            throw new Error("SHA256: can't update because hash was finished.");
          }
          var dataPos = 0;
          this._bytesHashed += dataLength;
          if (this._bufferLength > 0) {
            while (this._bufferLength < this.blockSize && dataLength > 0) {
              this._buffer[this._bufferLength++] = data[dataPos++];
              dataLength--;
            }
            if (this._bufferLength === this.blockSize) {
              hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
              this._bufferLength = 0;
            }
          }
          if (dataLength >= this.blockSize) {
            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
            dataLength %= this.blockSize;
          }
          while (dataLength > 0) {
            this._buffer[this._bufferLength++] = data[dataPos++];
            dataLength--;
          }
          return this;
        };
        SHA2562.prototype.finish = function(out) {
          if (!this._finished) {
            var bytesHashed = this._bytesHashed;
            var left = this._bufferLength;
            var bitLenHi = bytesHashed / 536870912 | 0;
            var bitLenLo = bytesHashed << 3;
            var padLength = bytesHashed % 64 < 56 ? 64 : 128;
            this._buffer[left] = 128;
            for (var i6 = left + 1; i6 < padLength - 8; i6++) {
              this._buffer[i6] = 0;
            }
            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
            this._finished = true;
          }
          for (var i6 = 0; i6 < this.digestLength / 4; i6++) {
            binary_1.writeUint32BE(this._state[i6], out, i6 * 4);
          }
          return this;
        };
        SHA2562.prototype.digest = function() {
          var out = new Uint8Array(this.digestLength);
          this.finish(out);
          return out;
        };
        SHA2562.prototype.saveState = function() {
          if (this._finished) {
            throw new Error("SHA256: cannot save finished state");
          }
          return {
            state: new Int32Array(this._state),
            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
            bufferLength: this._bufferLength,
            bytesHashed: this._bytesHashed
          };
        };
        SHA2562.prototype.restoreState = function(savedState) {
          this._state.set(savedState.state);
          this._bufferLength = savedState.bufferLength;
          if (savedState.buffer) {
            this._buffer.set(savedState.buffer);
          }
          this._bytesHashed = savedState.bytesHashed;
          this._finished = false;
          return this;
        };
        SHA2562.prototype.cleanSavedState = function(savedState) {
          wipe_1.wipe(savedState.state);
          if (savedState.buffer) {
            wipe_1.wipe(savedState.buffer);
          }
          savedState.bufferLength = 0;
          savedState.bytesHashed = 0;
        };
        return SHA2562;
      }()
    );
    exports.SHA256 = SHA256;
    var K5 = new Int32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    function hashBlocks(w6, v8, p5, pos, len) {
      while (len >= 64) {
        var a5 = v8[0];
        var b5 = v8[1];
        var c7 = v8[2];
        var d6 = v8[3];
        var e4 = v8[4];
        var f5 = v8[5];
        var g7 = v8[6];
        var h7 = v8[7];
        for (var i6 = 0; i6 < 16; i6++) {
          var j5 = pos + i6 * 4;
          w6[i6] = binary_1.readUint32BE(p5, j5);
        }
        for (var i6 = 16; i6 < 64; i6++) {
          var u4 = w6[i6 - 2];
          var t1 = (u4 >>> 17 | u4 << 32 - 17) ^ (u4 >>> 19 | u4 << 32 - 19) ^ u4 >>> 10;
          u4 = w6[i6 - 15];
          var t22 = (u4 >>> 7 | u4 << 32 - 7) ^ (u4 >>> 18 | u4 << 32 - 18) ^ u4 >>> 3;
          w6[i6] = (t1 + w6[i6 - 7] | 0) + (t22 + w6[i6 - 16] | 0);
        }
        for (var i6 = 0; i6 < 64; i6++) {
          var t1 = (((e4 >>> 6 | e4 << 32 - 6) ^ (e4 >>> 11 | e4 << 32 - 11) ^ (e4 >>> 25 | e4 << 32 - 25)) + (e4 & f5 ^ ~e4 & g7) | 0) + (h7 + (K5[i6] + w6[i6] | 0) | 0) | 0;
          var t22 = ((a5 >>> 2 | a5 << 32 - 2) ^ (a5 >>> 13 | a5 << 32 - 13) ^ (a5 >>> 22 | a5 << 32 - 22)) + (a5 & b5 ^ a5 & c7 ^ b5 & c7) | 0;
          h7 = g7;
          g7 = f5;
          f5 = e4;
          e4 = d6 + t1 | 0;
          d6 = c7;
          c7 = b5;
          b5 = a5;
          a5 = t1 + t22 | 0;
        }
        v8[0] += a5;
        v8[1] += b5;
        v8[2] += c7;
        v8[3] += d6;
        v8[4] += e4;
        v8[5] += f5;
        v8[6] += g7;
        v8[7] += h7;
        pos += 64;
        len -= 64;
      }
      return pos;
    }
    function hash2(data) {
      var h7 = new SHA256();
      h7.update(data);
      var digest2 = h7.digest();
      h7.clean();
      return digest2;
    }
    exports.hash = hash2;
  }
});

// node_modules/@stablelib/x25519/lib/x25519.js
var require_x25519 = __commonJS({
  "node_modules/@stablelib/x25519/lib/x25519.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sharedKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.scalarMultBase = exports.scalarMult = exports.SHARED_KEY_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = void 0;
    var random_1 = require_random();
    var wipe_1 = require_wipe();
    exports.PUBLIC_KEY_LENGTH = 32;
    exports.SECRET_KEY_LENGTH = 32;
    exports.SHARED_KEY_LENGTH = 32;
    function gf(init2) {
      const r6 = new Float64Array(16);
      if (init2) {
        for (let i6 = 0; i6 < init2.length; i6++) {
          r6[i6] = init2[i6];
        }
      }
      return r6;
    }
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var _121665 = gf([56129, 1]);
    function car25519(o6) {
      let c7 = 1;
      for (let i6 = 0; i6 < 16; i6++) {
        let v8 = o6[i6] + c7 + 65535;
        c7 = Math.floor(v8 / 65536);
        o6[i6] = v8 - c7 * 65536;
      }
      o6[0] += c7 - 1 + 37 * (c7 - 1);
    }
    function sel25519(p5, q4, b5) {
      const c7 = ~(b5 - 1);
      for (let i6 = 0; i6 < 16; i6++) {
        const t3 = c7 & (p5[i6] ^ q4[i6]);
        p5[i6] ^= t3;
        q4[i6] ^= t3;
      }
    }
    function pack25519(o6, n6) {
      const m4 = gf();
      const t3 = gf();
      for (let i6 = 0; i6 < 16; i6++) {
        t3[i6] = n6[i6];
      }
      car25519(t3);
      car25519(t3);
      car25519(t3);
      for (let j5 = 0; j5 < 2; j5++) {
        m4[0] = t3[0] - 65517;
        for (let i6 = 1; i6 < 15; i6++) {
          m4[i6] = t3[i6] - 65535 - (m4[i6 - 1] >> 16 & 1);
          m4[i6 - 1] &= 65535;
        }
        m4[15] = t3[15] - 32767 - (m4[14] >> 16 & 1);
        const b5 = m4[15] >> 16 & 1;
        m4[14] &= 65535;
        sel25519(t3, m4, 1 - b5);
      }
      for (let i6 = 0; i6 < 16; i6++) {
        o6[2 * i6] = t3[i6] & 255;
        o6[2 * i6 + 1] = t3[i6] >> 8;
      }
    }
    function unpack25519(o6, n6) {
      for (let i6 = 0; i6 < 16; i6++) {
        o6[i6] = n6[2 * i6] + (n6[2 * i6 + 1] << 8);
      }
      o6[15] &= 32767;
    }
    function add3(o6, a5, b5) {
      for (let i6 = 0; i6 < 16; i6++) {
        o6[i6] = a5[i6] + b5[i6];
      }
    }
    function sub(o6, a5, b5) {
      for (let i6 = 0; i6 < 16; i6++) {
        o6[i6] = a5[i6] - b5[i6];
      }
    }
    function mul3(o6, a5, b5) {
      let v8, c7, t0 = 0, t1 = 0, t22 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t222 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b5[0], b1 = b5[1], b22 = b5[2], b32 = b5[3], b42 = b5[4], b52 = b5[5], b6 = b5[6], b7 = b5[7], b8 = b5[8], b9 = b5[9], b10 = b5[10], b11 = b5[11], b12 = b5[12], b13 = b5[13], b14 = b5[14], b15 = b5[15];
      v8 = a5[0];
      t0 += v8 * b0;
      t1 += v8 * b1;
      t22 += v8 * b22;
      t3 += v8 * b32;
      t4 += v8 * b42;
      t5 += v8 * b52;
      t6 += v8 * b6;
      t7 += v8 * b7;
      t8 += v8 * b8;
      t9 += v8 * b9;
      t10 += v8 * b10;
      t11 += v8 * b11;
      t12 += v8 * b12;
      t13 += v8 * b13;
      t14 += v8 * b14;
      t15 += v8 * b15;
      v8 = a5[1];
      t1 += v8 * b0;
      t22 += v8 * b1;
      t3 += v8 * b22;
      t4 += v8 * b32;
      t5 += v8 * b42;
      t6 += v8 * b52;
      t7 += v8 * b6;
      t8 += v8 * b7;
      t9 += v8 * b8;
      t10 += v8 * b9;
      t11 += v8 * b10;
      t12 += v8 * b11;
      t13 += v8 * b12;
      t14 += v8 * b13;
      t15 += v8 * b14;
      t16 += v8 * b15;
      v8 = a5[2];
      t22 += v8 * b0;
      t3 += v8 * b1;
      t4 += v8 * b22;
      t5 += v8 * b32;
      t6 += v8 * b42;
      t7 += v8 * b52;
      t8 += v8 * b6;
      t9 += v8 * b7;
      t10 += v8 * b8;
      t11 += v8 * b9;
      t12 += v8 * b10;
      t13 += v8 * b11;
      t14 += v8 * b12;
      t15 += v8 * b13;
      t16 += v8 * b14;
      t17 += v8 * b15;
      v8 = a5[3];
      t3 += v8 * b0;
      t4 += v8 * b1;
      t5 += v8 * b22;
      t6 += v8 * b32;
      t7 += v8 * b42;
      t8 += v8 * b52;
      t9 += v8 * b6;
      t10 += v8 * b7;
      t11 += v8 * b8;
      t12 += v8 * b9;
      t13 += v8 * b10;
      t14 += v8 * b11;
      t15 += v8 * b12;
      t16 += v8 * b13;
      t17 += v8 * b14;
      t18 += v8 * b15;
      v8 = a5[4];
      t4 += v8 * b0;
      t5 += v8 * b1;
      t6 += v8 * b22;
      t7 += v8 * b32;
      t8 += v8 * b42;
      t9 += v8 * b52;
      t10 += v8 * b6;
      t11 += v8 * b7;
      t12 += v8 * b8;
      t13 += v8 * b9;
      t14 += v8 * b10;
      t15 += v8 * b11;
      t16 += v8 * b12;
      t17 += v8 * b13;
      t18 += v8 * b14;
      t19 += v8 * b15;
      v8 = a5[5];
      t5 += v8 * b0;
      t6 += v8 * b1;
      t7 += v8 * b22;
      t8 += v8 * b32;
      t9 += v8 * b42;
      t10 += v8 * b52;
      t11 += v8 * b6;
      t12 += v8 * b7;
      t13 += v8 * b8;
      t14 += v8 * b9;
      t15 += v8 * b10;
      t16 += v8 * b11;
      t17 += v8 * b12;
      t18 += v8 * b13;
      t19 += v8 * b14;
      t20 += v8 * b15;
      v8 = a5[6];
      t6 += v8 * b0;
      t7 += v8 * b1;
      t8 += v8 * b22;
      t9 += v8 * b32;
      t10 += v8 * b42;
      t11 += v8 * b52;
      t12 += v8 * b6;
      t13 += v8 * b7;
      t14 += v8 * b8;
      t15 += v8 * b9;
      t16 += v8 * b10;
      t17 += v8 * b11;
      t18 += v8 * b12;
      t19 += v8 * b13;
      t20 += v8 * b14;
      t21 += v8 * b15;
      v8 = a5[7];
      t7 += v8 * b0;
      t8 += v8 * b1;
      t9 += v8 * b22;
      t10 += v8 * b32;
      t11 += v8 * b42;
      t12 += v8 * b52;
      t13 += v8 * b6;
      t14 += v8 * b7;
      t15 += v8 * b8;
      t16 += v8 * b9;
      t17 += v8 * b10;
      t18 += v8 * b11;
      t19 += v8 * b12;
      t20 += v8 * b13;
      t21 += v8 * b14;
      t222 += v8 * b15;
      v8 = a5[8];
      t8 += v8 * b0;
      t9 += v8 * b1;
      t10 += v8 * b22;
      t11 += v8 * b32;
      t12 += v8 * b42;
      t13 += v8 * b52;
      t14 += v8 * b6;
      t15 += v8 * b7;
      t16 += v8 * b8;
      t17 += v8 * b9;
      t18 += v8 * b10;
      t19 += v8 * b11;
      t20 += v8 * b12;
      t21 += v8 * b13;
      t222 += v8 * b14;
      t23 += v8 * b15;
      v8 = a5[9];
      t9 += v8 * b0;
      t10 += v8 * b1;
      t11 += v8 * b22;
      t12 += v8 * b32;
      t13 += v8 * b42;
      t14 += v8 * b52;
      t15 += v8 * b6;
      t16 += v8 * b7;
      t17 += v8 * b8;
      t18 += v8 * b9;
      t19 += v8 * b10;
      t20 += v8 * b11;
      t21 += v8 * b12;
      t222 += v8 * b13;
      t23 += v8 * b14;
      t24 += v8 * b15;
      v8 = a5[10];
      t10 += v8 * b0;
      t11 += v8 * b1;
      t12 += v8 * b22;
      t13 += v8 * b32;
      t14 += v8 * b42;
      t15 += v8 * b52;
      t16 += v8 * b6;
      t17 += v8 * b7;
      t18 += v8 * b8;
      t19 += v8 * b9;
      t20 += v8 * b10;
      t21 += v8 * b11;
      t222 += v8 * b12;
      t23 += v8 * b13;
      t24 += v8 * b14;
      t25 += v8 * b15;
      v8 = a5[11];
      t11 += v8 * b0;
      t12 += v8 * b1;
      t13 += v8 * b22;
      t14 += v8 * b32;
      t15 += v8 * b42;
      t16 += v8 * b52;
      t17 += v8 * b6;
      t18 += v8 * b7;
      t19 += v8 * b8;
      t20 += v8 * b9;
      t21 += v8 * b10;
      t222 += v8 * b11;
      t23 += v8 * b12;
      t24 += v8 * b13;
      t25 += v8 * b14;
      t26 += v8 * b15;
      v8 = a5[12];
      t12 += v8 * b0;
      t13 += v8 * b1;
      t14 += v8 * b22;
      t15 += v8 * b32;
      t16 += v8 * b42;
      t17 += v8 * b52;
      t18 += v8 * b6;
      t19 += v8 * b7;
      t20 += v8 * b8;
      t21 += v8 * b9;
      t222 += v8 * b10;
      t23 += v8 * b11;
      t24 += v8 * b12;
      t25 += v8 * b13;
      t26 += v8 * b14;
      t27 += v8 * b15;
      v8 = a5[13];
      t13 += v8 * b0;
      t14 += v8 * b1;
      t15 += v8 * b22;
      t16 += v8 * b32;
      t17 += v8 * b42;
      t18 += v8 * b52;
      t19 += v8 * b6;
      t20 += v8 * b7;
      t21 += v8 * b8;
      t222 += v8 * b9;
      t23 += v8 * b10;
      t24 += v8 * b11;
      t25 += v8 * b12;
      t26 += v8 * b13;
      t27 += v8 * b14;
      t28 += v8 * b15;
      v8 = a5[14];
      t14 += v8 * b0;
      t15 += v8 * b1;
      t16 += v8 * b22;
      t17 += v8 * b32;
      t18 += v8 * b42;
      t19 += v8 * b52;
      t20 += v8 * b6;
      t21 += v8 * b7;
      t222 += v8 * b8;
      t23 += v8 * b9;
      t24 += v8 * b10;
      t25 += v8 * b11;
      t26 += v8 * b12;
      t27 += v8 * b13;
      t28 += v8 * b14;
      t29 += v8 * b15;
      v8 = a5[15];
      t15 += v8 * b0;
      t16 += v8 * b1;
      t17 += v8 * b22;
      t18 += v8 * b32;
      t19 += v8 * b42;
      t20 += v8 * b52;
      t21 += v8 * b6;
      t222 += v8 * b7;
      t23 += v8 * b8;
      t24 += v8 * b9;
      t25 += v8 * b10;
      t26 += v8 * b11;
      t27 += v8 * b12;
      t28 += v8 * b13;
      t29 += v8 * b14;
      t30 += v8 * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t22 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t222;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      c7 = 1;
      v8 = t0 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t0 = v8 - c7 * 65536;
      v8 = t1 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t1 = v8 - c7 * 65536;
      v8 = t22 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t22 = v8 - c7 * 65536;
      v8 = t3 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t3 = v8 - c7 * 65536;
      v8 = t4 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t4 = v8 - c7 * 65536;
      v8 = t5 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t5 = v8 - c7 * 65536;
      v8 = t6 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t6 = v8 - c7 * 65536;
      v8 = t7 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t7 = v8 - c7 * 65536;
      v8 = t8 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t8 = v8 - c7 * 65536;
      v8 = t9 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t9 = v8 - c7 * 65536;
      v8 = t10 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t10 = v8 - c7 * 65536;
      v8 = t11 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t11 = v8 - c7 * 65536;
      v8 = t12 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t12 = v8 - c7 * 65536;
      v8 = t13 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t13 = v8 - c7 * 65536;
      v8 = t14 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t14 = v8 - c7 * 65536;
      v8 = t15 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t15 = v8 - c7 * 65536;
      t0 += c7 - 1 + 37 * (c7 - 1);
      c7 = 1;
      v8 = t0 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t0 = v8 - c7 * 65536;
      v8 = t1 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t1 = v8 - c7 * 65536;
      v8 = t22 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t22 = v8 - c7 * 65536;
      v8 = t3 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t3 = v8 - c7 * 65536;
      v8 = t4 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t4 = v8 - c7 * 65536;
      v8 = t5 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t5 = v8 - c7 * 65536;
      v8 = t6 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t6 = v8 - c7 * 65536;
      v8 = t7 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t7 = v8 - c7 * 65536;
      v8 = t8 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t8 = v8 - c7 * 65536;
      v8 = t9 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t9 = v8 - c7 * 65536;
      v8 = t10 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t10 = v8 - c7 * 65536;
      v8 = t11 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t11 = v8 - c7 * 65536;
      v8 = t12 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t12 = v8 - c7 * 65536;
      v8 = t13 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t13 = v8 - c7 * 65536;
      v8 = t14 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t14 = v8 - c7 * 65536;
      v8 = t15 + c7 + 65535;
      c7 = Math.floor(v8 / 65536);
      t15 = v8 - c7 * 65536;
      t0 += c7 - 1 + 37 * (c7 - 1);
      o6[0] = t0;
      o6[1] = t1;
      o6[2] = t22;
      o6[3] = t3;
      o6[4] = t4;
      o6[5] = t5;
      o6[6] = t6;
      o6[7] = t7;
      o6[8] = t8;
      o6[9] = t9;
      o6[10] = t10;
      o6[11] = t11;
      o6[12] = t12;
      o6[13] = t13;
      o6[14] = t14;
      o6[15] = t15;
    }
    function square(o6, a5) {
      mul3(o6, a5, a5);
    }
    function inv25519(o6, inp) {
      const c7 = gf();
      for (let i6 = 0; i6 < 16; i6++) {
        c7[i6] = inp[i6];
      }
      for (let i6 = 253; i6 >= 0; i6--) {
        square(c7, c7);
        if (i6 !== 2 && i6 !== 4) {
          mul3(c7, c7, inp);
        }
      }
      for (let i6 = 0; i6 < 16; i6++) {
        o6[i6] = c7[i6];
      }
    }
    function scalarMult(n6, p5) {
      const z7 = new Uint8Array(32);
      const x8 = new Float64Array(80);
      const a5 = gf(), b5 = gf(), c7 = gf(), d6 = gf(), e4 = gf(), f5 = gf();
      for (let i6 = 0; i6 < 31; i6++) {
        z7[i6] = n6[i6];
      }
      z7[31] = n6[31] & 127 | 64;
      z7[0] &= 248;
      unpack25519(x8, p5);
      for (let i6 = 0; i6 < 16; i6++) {
        b5[i6] = x8[i6];
      }
      a5[0] = d6[0] = 1;
      for (let i6 = 254; i6 >= 0; --i6) {
        const r6 = z7[i6 >>> 3] >>> (i6 & 7) & 1;
        sel25519(a5, b5, r6);
        sel25519(c7, d6, r6);
        add3(e4, a5, c7);
        sub(a5, a5, c7);
        add3(c7, b5, d6);
        sub(b5, b5, d6);
        square(d6, e4);
        square(f5, a5);
        mul3(a5, c7, a5);
        mul3(c7, b5, e4);
        add3(e4, a5, c7);
        sub(a5, a5, c7);
        square(b5, a5);
        sub(c7, d6, f5);
        mul3(a5, c7, _121665);
        add3(a5, a5, d6);
        mul3(c7, c7, a5);
        mul3(a5, d6, f5);
        mul3(d6, b5, x8);
        square(b5, e4);
        sel25519(a5, b5, r6);
        sel25519(c7, d6, r6);
      }
      for (let i6 = 0; i6 < 16; i6++) {
        x8[i6 + 16] = a5[i6];
        x8[i6 + 32] = c7[i6];
        x8[i6 + 48] = b5[i6];
        x8[i6 + 64] = d6[i6];
      }
      const x32 = x8.subarray(32);
      const x16 = x8.subarray(16);
      inv25519(x32, x32);
      mul3(x16, x16, x32);
      const q4 = new Uint8Array(32);
      pack25519(q4, x16);
      return q4;
    }
    exports.scalarMult = scalarMult;
    function scalarMultBase(n6) {
      return scalarMult(n6, _9);
    }
    exports.scalarMultBase = scalarMultBase;
    function generateKeyPairFromSeed2(seed) {
      if (seed.length !== exports.SECRET_KEY_LENGTH) {
        throw new Error(`x25519: seed must be ${exports.SECRET_KEY_LENGTH} bytes`);
      }
      const secretKey = new Uint8Array(seed);
      const publicKey = scalarMultBase(secretKey);
      return {
        publicKey,
        secretKey
      };
    }
    exports.generateKeyPairFromSeed = generateKeyPairFromSeed2;
    function generateKeyPair3(prng) {
      const seed = (0, random_1.randomBytes)(32, prng);
      const result = generateKeyPairFromSeed2(seed);
      (0, wipe_1.wipe)(seed);
      return result;
    }
    exports.generateKeyPair = generateKeyPair3;
    function sharedKey2(mySecretKey, theirPublicKey, rejectZero = false) {
      if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {
        throw new Error("X25519: incorrect secret key length");
      }
      if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {
        throw new Error("X25519: incorrect public key length");
      }
      const result = scalarMult(mySecretKey, theirPublicKey);
      if (rejectZero) {
        let zeros2 = 0;
        for (let i6 = 0; i6 < result.length; i6++) {
          zeros2 |= result[i6];
        }
        if (zeros2 === 0) {
          throw new Error("X25519: invalid shared key");
        }
      }
      return result;
    }
    exports.sharedKey = sharedKey2;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode3() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode3;
    function isBrowser2() {
      return !isReactNative() && !isNode3();
    }
    exports.isBrowser = isBrowser2;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs8 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto2(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/ws/browser.js
var require_browser4 = __commonJS({
  "node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/lodash.isequal/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.isequal/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER2 = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e4) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array, predicate) {
      var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length2) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length2 = values.length, offset = array.length;
      while (++index < length2) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arraySome(array, predicate) {
      var index = -1, length2 = array == null ? 0 : array.length;
      while (++index < length2) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseTimes(n6, iteratee) {
      var index = -1, result = Array(n6);
      while (++index < n6) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key2) {
      return cache.has(key2);
    }
    function getValue(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key2) {
        result[++index] = [key2, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key2) {
      var result = this.has(key2) && delete this.__data__[key2];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key2];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
    }
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
    }
    function hashSet(key2, value) {
      var data = this.__data__;
      this.size += this.has(key2) ? 0 : 1;
      data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    function listCacheSet(key2, value) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        ++this.size;
        data.push([key2, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key2) {
      var result = getMapData(this, key2)["delete"](key2);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    function mapCacheSet(key2, value) {
      var data = getMapData(this, key2), size = data.size;
      data.set(key2, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length2 = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length2) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key2) {
      var data = this.__data__, result = data["delete"](key2);
      this.size = data.size;
      return result;
    }
    function stackGet(key2) {
      return this.__data__.get(key2);
    }
    function stackHas(key2) {
      return this.__data__.has(key2);
    }
    function stackSet(key2, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key2, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key2, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length2 = result.length;
      for (var key2 in value) {
        if ((inherited || hasOwnProperty.call(value, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
        isIndex(key2, length2)))) {
          result.push(key2);
        }
      }
      return result;
    }
    function assocIndexOf(array, key2) {
      var length2 = array.length;
      while (length2--) {
        if (eq4(array[length2][0], key2)) {
          return length2;
        }
      }
      return -1;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key2 in Object(object)) {
        if (hasOwnProperty.call(object, key2) && key2 != "constructor") {
          result.push(key2);
        }
      }
      return result;
    }
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq4(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key2 = objProps[index];
        if (!(isPartial ? key2 in other : hasOwnProperty.call(other, key2))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key2 = objProps[index];
        var objValue = object[key2], othValue = other[key2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key2 == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys2, getSymbols);
    }
    function getMapData(map, key2) {
      var data = map.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key2) {
      var value = getValue(object, key2);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e4) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function isIndex(value, length2) {
      length2 = length2 == null ? MAX_SAFE_INTEGER2 : length2;
      return !!length2 && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e4) {
        }
        try {
          return func + "";
        } catch (e4) {
        }
      }
      return "";
    }
    function eq4(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys2(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module.exports = isEqual;
  }
});

// node_modules/@jnwng/walletconnect-solana/lib/esm/adapter.js
init_index_browser_esm();
var import_qrcode_modal = __toESM(require_cjs4(), 1);

// node_modules/@walletconnect/core/dist/index.es.js
var import_events7 = __toESM(require_events());

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events = __toESM(require_events());
var import_time = __toESM(require_cjs5());

// node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var n2 = class extends IEvents {
  constructor(e4) {
    super();
  }
};
var s3 = import_time.FIVE_SECONDS;
var r3 = { pulse: "heartbeat_pulse" };
var i3 = class _i2 extends n2 {
  constructor(e4) {
    super(e4), this.events = new import_events.EventEmitter(), this.interval = s3, this.interval = (e4 == null ? void 0 : e4.interval) || s3;
  }
  static async init(e4) {
    const t3 = new _i2(e4);
    return await t3.init(), t3;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e4, t3) {
    this.events.on(e4, t3);
  }
  once(e4, t3) {
    this.events.once(e4, t3);
  }
  off(e4, t3) {
    this.events.off(e4, t3);
  }
  removeListener(e4, t3) {
    this.events.removeListener(e4, t3);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r3.pulse);
  }
};

// node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key2, value) {
  if (key2 === "__proto__" || key2 === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key2);
    return;
  }
  return value;
}
function warnKeyDropped(key2) {
  console.warn(`[destr] Dropping "${key2}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  const _value = value.trim();
  if (
    // eslint-disable-next-line unicorn/prefer-at
    value[0] === '"' && value.endsWith('"') && !value.includes("\\")
  ) {
    return _value.slice(1, -1);
  }
  if (_value.length <= 9) {
    const _lval = _value.toLowerCase();
    if (_lval === "true") {
      return true;
    }
    if (_lval === "false") {
      return false;
    }
    if (_lval === "undefined") {
      return void 0;
    }
    if (_lval === "null") {
      return null;
    }
    if (_lval === "nan") {
      return Number.NaN;
    }
    if (_lval === "infinity") {
      return Number.POSITIVE_INFINITY;
    }
    if (_lval === "-infinity") {
      return Number.NEGATIVE_INFINITY;
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// node_modules/unstorage/dist/shared/unstorage.BqzpVTXx.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c7) => c7.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key2) {
  var _a;
  if (!key2) {
    return "";
  }
  return ((_a = key2.split("?")[0]) == null ? void 0 : _a.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "")) || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base4) {
  base4 = normalizeKey(base4);
  return base4 ? base4 + ":" : "";
}

// node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key2) {
      return data.has(key2);
    },
    getItem(key2) {
      return data.get(key2) ?? null;
    },
    getItemRaw(key2) {
      return data.get(key2) ?? null;
    },
    setItem(key2, value) {
      data.set(key2, value);
    },
    setItemRaw(key2, value) {
      data.set(key2, value);
    },
    removeItem(key2) {
      data.delete(key2);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key2) => {
    for (const base4 of context.mountpoints) {
      if (key2.startsWith(base4)) {
        return {
          base: base4,
          relativeKey: key2.slice(base4.length),
          driver: context.mounts[base4]
        };
      }
    }
    return {
      base: "",
      relativeKey: key2,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base4, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base4) || includeParent && base4.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base4.length > mountpoint.length ? base4.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key2) => {
    if (!context.watching) {
      return;
    }
    key2 = normalizeKey(key2);
    for (const listener of context.watchListeners) {
      listener(event, key2);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key2 = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key2);
      getBatch(mount).items.push({
        key: key2,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r6) => r6.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key2, opts = {}) {
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key2, opts = {}) {
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r6) => r6.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key2, opts = {}) {
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key2, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key2);
      }
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify(value), opts);
      if (!driver.watch) {
        onChange("update", key2);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key2, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key2, opts);
      }
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key2);
      }
    },
    async removeItem(key2, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key2);
      }
    },
    // Meta
    async getMeta(key2, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key2 = normalizeKey(key2);
      const { relativeKey, driver } = getMount(key2);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key2, value, opts = {}) {
      return this.setItem(key2 + "$", value, opts);
    },
    removeMeta(key2, opts = {}) {
      return this.removeItem(key2 + "$", opts);
    },
    // Keys
    async getKeys(base4, opts = {}) {
      base4 = normalizeBaseKey(base4);
      const mounts = getMounts(base4, true);
      let maskedMounts = [];
      const allKeys = [];
      for (const mount of mounts) {
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key2 of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key2);
          if (!maskedMounts.some((p5) => fullKey.startsWith(p5))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p5) => !p5.startsWith(mount.mountpoint))
        ];
      }
      return base4 ? allKeys.filter(
        (key2) => key2.startsWith(base4) && key2[key2.length - 1] !== "$"
      ) : allKeys.filter((key2) => key2[key2.length - 1] !== "$");
    },
    // Utils
    async clear(base4, opts = {}) {
      base4 = normalizeBaseKey(base4);
      await Promise.all(
        getMounts(base4, false).map(async (m4) => {
          if (m4.driver.clear) {
            return asyncCall(m4.driver.clear, m4.relativeBase, opts);
          }
          if (m4.driver.removeItem) {
            const keys2 = await m4.driver.getKeys(m4.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key2) => m4.driver.removeItem(key2, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base4, driver) {
      base4 = normalizeBaseKey(base4);
      if (base4 && context.mounts[base4]) {
        throw new Error(`already mounted at ${base4}`);
      }
      if (base4) {
        context.mountpoints.push(base4);
        context.mountpoints.sort((a5, b5) => b5.length - a5.length);
      }
      context.mounts[base4] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base4)).then((unwatcher) => {
          context.unwatch[base4] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base4, _dispose = true) {
      var _a, _b;
      base4 = normalizeBaseKey(base4);
      if (!base4 || !context.mounts[base4]) {
        return;
      }
      if (context.watching && base4 in context.unwatch) {
        (_b = (_a = context.unwatch)[base4]) == null ? void 0 : _b.call(_a);
        delete context.unwatch[base4];
      }
      if (_dispose) {
        await dispose(context.mounts[base4]);
      }
      context.mountpoints = context.mountpoints.filter((key2) => key2 !== base4);
      delete context.mounts[base4];
    },
    getMount(key2 = "") {
      key2 = normalizeKey(key2) + ":";
      const m4 = getMount(key2);
      return {
        driver: m4.driver,
        base: m4.base
      };
    },
    getMounts(base4 = "", opts = {}) {
      base4 = normalizeKey(base4);
      const mounts = getMounts(base4, opts.parents);
      return mounts.map((m4) => ({
        driver: m4.driver,
        base: m4.mountpoint
      }));
    },
    // Aliases
    keys: (base4, opts = {}) => storage.getKeys(base4, opts),
    get: (key2, opts = {}) => storage.getItem(key2, opts),
    set: (key2, value, opts = {}) => storage.setItem(key2, value, opts),
    has: (key2, opts = {}) => storage.hasItem(key2, opts),
    del: (key2, opts = {}) => storage.removeItem(key2, opts),
    remove: (key2, opts = {}) => storage.removeItem(key2, opts)
  };
  return storage;
}
function watch(driver, onChange, base4) {
  return driver.watch ? driver.watch((event, key2) => onChange(event, base4 + key2)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  const request = indexedDB.open(dbName);
  request.onupgradeneeded = () => request.result.createObjectStore(storeName);
  const dbp = promisifyRequest(request);
  return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key2, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key2)));
}
function set(key2, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key2);
    return promisifyRequest(store.transaction);
  });
}
function del(key2, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key2);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_8, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_8, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse3(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify3(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x3 = "idb-keyval";
var z3 = (i6 = {}) => {
  const t3 = i6.base && i6.base.length > 0 ? `${i6.base}:` : "", e4 = (s5) => t3 + s5;
  let n6;
  return i6.dbName && i6.storeName && (n6 = createStore(i6.dbName, i6.storeName)), { name: x3, options: i6, async hasItem(s5) {
    return !(typeof await get(e4(s5), n6) > "u");
  }, async getItem(s5) {
    return await get(e4(s5), n6) ?? null;
  }, setItem(s5, a5) {
    return set(e4(s5), a5, n6);
  }, removeItem(s5) {
    return del(e4(s5), n6);
  }, getKeys() {
    return keys(n6);
  }, clear() {
    return clear(n6);
  } };
};
var D3 = "WALLET_CONNECT_V2_INDEXED_DB";
var E4 = "keyvaluestorage";
var _4 = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z3({ dbName: D3, storeName: E4 }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t3) => [t3.key, t3.value]);
  }
  async getItem(t3) {
    const e4 = await this.indexedDb.getItem(t3);
    if (e4 !== null) return e4;
  }
  async setItem(t3, e4) {
    await this.indexedDb.setItem(t3, safeJsonStringify3(e4));
  }
  async removeItem(t3) {
    await this.indexedDb.removeItem(t3);
  }
};
var l4 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c3 = { exports: {} };
(function() {
  let i6;
  function t3() {
  }
  i6 = t3, i6.prototype.getItem = function(e4) {
    return this.hasOwnProperty(e4) ? String(this[e4]) : null;
  }, i6.prototype.setItem = function(e4, n6) {
    this[e4] = String(n6);
  }, i6.prototype.removeItem = function(e4) {
    delete this[e4];
  }, i6.prototype.clear = function() {
    const e4 = this;
    Object.keys(e4).forEach(function(n6) {
      e4[n6] = void 0, delete e4[n6];
    });
  }, i6.prototype.key = function(e4) {
    return e4 = e4 || 0, Object.keys(this)[e4];
  }, i6.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l4 < "u" && l4.localStorage ? c3.exports = l4.localStorage : typeof window < "u" && window.localStorage ? c3.exports = window.localStorage : c3.exports = new t3();
})();
function k3(i6) {
  var t3;
  return [i6[0], safeJsonParse3((t3 = i6[1]) != null ? t3 : "")];
}
var K2 = class {
  constructor() {
    this.localStorage = c3.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k3);
  }
  async getItem(t3) {
    const e4 = this.localStorage.getItem(t3);
    if (e4 !== null) return safeJsonParse3(e4);
  }
  async setItem(t3, e4) {
    this.localStorage.setItem(t3, safeJsonStringify3(e4));
  }
  async removeItem(t3) {
    this.localStorage.removeItem(t3);
  }
};
var N3 = "wc_storage_version";
var y3 = 1;
var O2 = async (i6, t3, e4) => {
  const n6 = N3, s5 = await t3.getItem(n6);
  if (s5 && s5 >= y3) {
    e4(t3);
    return;
  }
  const a5 = await i6.getKeys();
  if (!a5.length) {
    e4(t3);
    return;
  }
  const m4 = [];
  for (; a5.length; ) {
    const r6 = a5.shift();
    if (!r6) continue;
    const o6 = r6.toLowerCase();
    if (o6.includes("wc@") || o6.includes("walletconnect") || o6.includes("wc_") || o6.includes("wallet_connect")) {
      const f5 = await i6.getItem(r6);
      await t3.setItem(r6, f5), m4.push(r6);
    }
  }
  await t3.setItem(n6, y3), e4(t3), j3(i6, m4);
};
var j3 = async (i6, t3) => {
  t3.length && t3.forEach(async (e4) => {
    await i6.removeItem(e4);
  });
};
var h3 = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e4) => {
      this.storage = e4, this.initialized = true;
    };
    const t3 = new K2();
    this.storage = t3;
    try {
      const e4 = new _4();
      O2(t3, e4, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t3) {
    return await this.initialize(), this.storage.getItem(t3);
  }
  async setItem(t3, e4) {
    return await this.initialize(), this.storage.setItem(t3, e4);
  }
  async removeItem(t3) {
    return await this.initialize(), this.storage.removeItem(t3);
  }
  async initialize() {
    this.initialized || await new Promise((t3) => {
      const e4 = setInterval(() => {
        this.initialized && (clearInterval(e4), t3());
      }, 20);
    });
  }
};

// node_modules/@walletconnect/logger/dist/index.es.js
var import_pino = __toESM(require_browser2());
var import_pino2 = __toESM(require_browser2());
var c4 = { level: "info" };
var n3 = "custom_context";
var l5 = 1e3 * 1024;
var O3 = class {
  constructor(e4) {
    this.nodeValue = e4, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
  }
  get value() {
    return this.nodeValue;
  }
  get size() {
    return this.sizeInBytes;
  }
};
var d3 = class {
  constructor(e4) {
    this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e4, this.sizeInBytes = 0;
  }
  append(e4) {
    const t3 = new O3(e4);
    if (t3.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e4} with size ${t3.size}`);
    for (; this.size + t3.size > this.maxSizeInBytes; ) this.shift();
    this.head ? (this.tail && (this.tail.next = t3), this.tail = t3) : (this.head = t3, this.tail = t3), this.lengthInNodes++, this.sizeInBytes += t3.size;
  }
  shift() {
    if (!this.head) return;
    const e4 = this.head;
    this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e4.size;
  }
  toArray() {
    const e4 = [];
    let t3 = this.head;
    for (; t3 !== null; ) e4.push(t3.value), t3 = t3.next;
    return e4;
  }
  get length() {
    return this.lengthInNodes;
  }
  get size() {
    return this.sizeInBytes;
  }
  toOrderedArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let e4 = this.head;
    return { next: () => {
      if (!e4) return { done: true, value: null };
      const t3 = e4.value;
      return e4 = e4.next, { done: false, value: t3 };
    } };
  }
};
var L3 = class {
  constructor(e4, t3 = l5) {
    this.level = e4 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t3, this.logs = new d3(this.MAX_LOG_SIZE_IN_BYTES);
  }
  forwardToConsole(e4, t3) {
    t3 === import_pino.levels.values.error ? console.error(e4) : t3 === import_pino.levels.values.warn ? console.warn(e4) : t3 === import_pino.levels.values.debug ? console.debug(e4) : t3 === import_pino.levels.values.trace ? console.trace(e4) : console.log(e4);
  }
  appendToLogs(e4) {
    this.logs.append(safeJsonStringify3({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e4 }));
    const t3 = typeof e4 == "string" ? JSON.parse(e4).level : e4.level;
    t3 >= this.levelValue && this.forwardToConsole(e4, t3);
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = new d3(this.MAX_LOG_SIZE_IN_BYTES);
  }
  getLogArray() {
    return Array.from(this.logs);
  }
  logsToBlob(e4) {
    const t3 = this.getLogArray();
    return t3.push(safeJsonStringify3({ extraMetadata: e4 })), new Blob(t3, { type: "application/json" });
  }
};
var m3 = class {
  constructor(e4, t3 = l5) {
    this.baseChunkLogger = new L3(e4, t3);
  }
  write(e4) {
    this.baseChunkLogger.appendToLogs(e4);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e4) {
    return this.baseChunkLogger.logsToBlob(e4);
  }
  downloadLogsBlobInBrowser(e4) {
    const t3 = URL.createObjectURL(this.logsToBlob(e4)), o6 = document.createElement("a");
    o6.href = t3, o6.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o6), o6.click(), document.body.removeChild(o6), URL.revokeObjectURL(t3);
  }
};
var B2 = class {
  constructor(e4, t3 = l5) {
    this.baseChunkLogger = new L3(e4, t3);
  }
  write(e4) {
    this.baseChunkLogger.appendToLogs(e4);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e4) {
    return this.baseChunkLogger.logsToBlob(e4);
  }
};
var x4 = Object.defineProperty;
var S2 = Object.defineProperties;
var _5 = Object.getOwnPropertyDescriptors;
var p3 = Object.getOwnPropertySymbols;
var T4 = Object.prototype.hasOwnProperty;
var z4 = Object.prototype.propertyIsEnumerable;
var f3 = (r6, e4, t3) => e4 in r6 ? x4(r6, e4, { enumerable: true, configurable: true, writable: true, value: t3 }) : r6[e4] = t3;
var i4 = (r6, e4) => {
  for (var t3 in e4 || (e4 = {})) T4.call(e4, t3) && f3(r6, t3, e4[t3]);
  if (p3) for (var t3 of p3(e4)) z4.call(e4, t3) && f3(r6, t3, e4[t3]);
  return r6;
};
var g3 = (r6, e4) => S2(r6, _5(e4));
function k4(r6) {
  return g3(i4({}, r6), { level: (r6 == null ? void 0 : r6.level) || c4.level });
}
function v3(r6, e4 = n3) {
  return r6[e4] || "";
}
function b2(r6, e4, t3 = n3) {
  return r6[t3] = e4, r6;
}
function y4(r6, e4 = n3) {
  let t3 = "";
  return typeof r6.bindings > "u" ? t3 = v3(r6, e4) : t3 = r6.bindings().context || "", t3;
}
function w4(r6, e4, t3 = n3) {
  const o6 = y4(r6, t3);
  return o6.trim() ? `${o6}/${e4}` : e4;
}
function E5(r6, e4, t3 = n3) {
  const o6 = w4(r6, e4, t3), a5 = r6.child({ context: o6 });
  return b2(a5, o6, t3);
}
function C3(r6) {
  var e4, t3;
  const o6 = new m3((e4 = r6.opts) == null ? void 0 : e4.level, r6.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g3(i4({}, r6.opts), { level: "trace", browser: g3(i4({}, (t3 = r6.opts) == null ? void 0 : t3.browser), { write: (a5) => o6.write(a5) }) })), chunkLoggerController: o6 };
}
function I3(r6) {
  var e4;
  const t3 = new B2((e4 = r6.opts) == null ? void 0 : e4.level, r6.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g3(i4({}, r6.opts), { level: "trace" }), t3), chunkLoggerController: t3 };
}
function A4(r6) {
  return typeof r6.loggerOverride < "u" && typeof r6.loggerOverride != "string" ? { logger: r6.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C3(r6) : I3(r6);
}

// node_modules/@walletconnect/types/dist/index.es.js
var import_events4 = __toESM(require_events());
var n4 = class extends IEvents {
  constructor(s5) {
    super(), this.opts = s5, this.protocol = "wc", this.version = 2;
  }
};
var h5 = class extends IEvents {
  constructor(s5, t3) {
    super(), this.core = s5, this.logger = t3, this.records = /* @__PURE__ */ new Map();
  }
};
var a4 = class {
  constructor(s5, t3) {
    this.logger = s5, this.core = t3;
  }
};
var g4 = class extends IEvents {
  constructor(s5, t3) {
    super(), this.relayer = s5, this.logger = t3;
  }
};
var u3 = class extends IEvents {
  constructor(s5) {
    super();
  }
};
var p4 = class {
  constructor(s5, t3, e4, f5) {
    this.core = s5, this.logger = t3, this.name = e4;
  }
};
var d4 = class extends IEvents {
  constructor(s5, t3) {
    super(), this.relayer = s5, this.logger = t3;
  }
};
var x5 = class extends IEvents {
  constructor(s5, t3) {
    super(), this.core = s5, this.logger = t3;
  }
};
var y5 = class {
  constructor(s5, t3, e4) {
    this.core = s5, this.logger = t3, this.store = e4;
  }
};
var v4 = class {
  constructor(s5, t3) {
    this.projectId = s5, this.logger = t3;
  }
};
var C4 = class {
  constructor(s5, t3, e4) {
    this.core = s5, this.logger = t3, this.telemetryEnabled = e4;
  }
};
var S3 = class {
  constructor(s5) {
    this.opts = s5, this.protocol = "wc", this.version = 2;
  }
};
var M3 = class {
  constructor(s5) {
    this.client = s5;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_time4 = __toESM(require_cjs5());

// node_modules/@walletconnect/relay-auth/dist/esm/api.js
var ed25519 = __toESM(require_ed25519());
var import_random = __toESM(require_random());
var import_time2 = __toESM(require_cjs5());

// node_modules/@walletconnect/relay-auth/dist/esm/constants.js
var JWT_IRIDIUM_ALG = "EdDSA";
var JWT_IRIDIUM_TYP = "JWT";
var JWT_DELIMITER = ".";
var JWT_ENCODING = "base64url";
var JSON_ENCODING = "utf8";
var DATA_ENCODING = "utf8";
var DID_DELIMITER = ":";
var DID_PREFIX = "did";
var DID_METHOD = "key";
var MULTICODEC_ED25519_ENCODING = "base58btc";
var MULTICODEC_ED25519_BASE = "z";
var MULTICODEC_ED25519_HEADER = "K36";
var KEY_PAIR_SEED_LENGTH = 32;

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size));
  }
  return new Uint8Array(size);
}

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/concat.js
function concat(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// node_modules/multiformats/esm/vendor/base-x.js
function base(ALPHABET, name2) {
  if (ALPHABET.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j5 = 0; j5 < BASE_MAP.length; j5++) {
    BASE_MAP[j5] = 255;
  }
  for (var i6 = 0; i6 < ALPHABET.length; i6++) {
    var x8 = ALPHABET.charAt(i6);
    var xc = x8.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x8 + " is ambiguous");
    }
    BASE_MAP[xc] = i6;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode8(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i7 = 0;
      for (var it1 = size - 1; (carry !== 0 || i7 < length2) && it1 !== -1; it1--, i7++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i7;
      pbegin++;
    }
    var it22 = size - length2;
    while (it22 !== size && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size; ++it22) {
      str += ALPHABET.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i7 = 0;
      for (var it32 = size - 1; (carry !== 0 || i7 < length2) && it32 !== -1; it32--, i7++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i7;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size - length2;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size - it4));
    var j6 = zeroes;
    while (it4 !== size) {
      vch[j6++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string3) {
    var buffer = decodeUnsafe(string3);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode8,
    decodeUnsafe,
    decode: decode8
  };
}
var src = base;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa, bb) => {
  if (aa === bb)
    return true;
  if (aa.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii2 = 0; ii2 < aa.byteLength; ii2++) {
    if (aa[ii2] !== bb[ii2]) {
      return false;
    }
  }
  return true;
};
var coerce = (o6) => {
  if (o6 instanceof Uint8Array && o6.constructor.name === "Uint8Array")
    return o6;
  if (o6 instanceof ArrayBuffer)
    return new Uint8Array(o6);
  if (ArrayBuffer.isView(o6)) {
    return new Uint8Array(o6.buffer, o6.byteOffset, o6.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString = (str) => new TextEncoder().encode(str);
var toString = (b5) => new TextDecoder().decode(b5);

// node_modules/multiformats/esm/src/bases/base.js
var Encoder = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder) {
    return or(this, decoder);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder(name2, prefix, baseEncode);
    this.decoder = new Decoder(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from = ({ name: name2, prefix, encode: encode8, decode: decode8 }) => new Codec(name2, prefix, encode8, decode8);
var baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
  const { encode: encode8, decode: decode8 } = base_x_default(alphabet2, name2);
  return from({
    prefix,
    name: name2,
    encode: encode8,
    decode: (text) => coerce(decode8(text))
  });
};
var decode = (string3, alphabet2, bitsPerChar, name2) => {
  const codes = {};
  for (let i6 = 0; i6 < alphabet2.length; ++i6) {
    codes[alphabet2[i6]] = i6;
  }
  let end = string3.length;
  while (string3[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer = 0;
  let written = 0;
  for (let i6 = 0; i6 < end; ++i6) {
    const value = codes[string3[i6]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode = (data, alphabet2, bitsPerChar) => {
  const pad = alphabet2[alphabet2.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer = 0;
  for (let i6 = 0; i6 < data.length; ++i6) {
    buffer = buffer << 8 | data[i6];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet2[mask & buffer >> bits];
    }
  }
  if (bits) {
    out += alphabet2[mask & buffer << bitsPerChar - bits];
  }
  if (pad) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
  return from({
    prefix,
    name: name2,
    encode(input) {
      return encode(input, alphabet2, bitsPerChar);
    },
    decode(input) {
      return decode(input, alphabet2, bitsPerChar, name2);
    }
  });
};

// node_modules/multiformats/esm/src/bases/identity.js
var identity = from({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString(buf),
  decode: (str) => fromString(str)
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base2
});
var base2 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base16,
  base16upper: () => base16upper
});
var base16 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base32,
  base32hex: () => base32hex,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base32 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base64,
  base64pad: () => base64pad,
  base64url: () => base64url,
  base64urlpad: () => base64urlpad
});
var base64 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet.reduce((p5, c7, i6) => {
  p5[i6] = c7;
  return p5;
}, []);
var alphabetCharsToBytes = alphabet.reduce((p5, c7, i6) => {
  p5[c7.codePointAt(0)] = i6;
  return p5;
}, []);
function encode2(data) {
  return data.reduce((p5, c7) => {
    p5 += alphabetBytesToChars[c7];
    return p5;
  }, "");
}
function decode2(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode2,
  decode: decode2
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha256,
  sha512: () => sha512
});

// node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode3;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode3(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode3.bytes = offset - oldOffset + 1;
  return out;
}
var decode3 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b5, l7 = buf.length;
  do {
    if (counter >= l7) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b5 = buf[counter++];
    res += shift < 28 ? (b5 & REST$1) << shift : (b5 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b5 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N32 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N22 ? 2 : value < N32 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode3,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// node_modules/multiformats/esm/src/varint.js
var decode4 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// node_modules/multiformats/esm/src/hashes/digest.js
var create = (code2, digest2) => {
  const size = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size);
  const bytes = new Uint8Array(digestOffset + size);
  encodeTo(code2, bytes, 0);
  encodeTo(size, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size, digest2, bytes);
};
var decode5 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode4(bytes);
  const [size, digestOffset] = decode4(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size, digest2, bytes);
};
var equals2 = (a5, b5) => {
  if (a5 === b5) {
    return true;
  } else {
    return a5.code === b5.code && a5.size === b5.size && equals(a5.bytes, b5.bytes);
  }
};
var Digest = class {
  constructor(code2, size, digest2, bytes) {
    this.code = code2;
    this.size = size;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// node_modules/multiformats/esm/src/hashes/hasher.js
var from2 = ({ name: name2, code: code2, encode: encode8 }) => new Hasher(name2, code2, encode8);
var Hasher = class {
  constructor(name2, code2, encode8) {
    this.name = name2;
    this.code = code2;
    this.encode = encode8;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create(this.code, result) : result.then((digest2) => create(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha256 = from2({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha512 = from2({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode4 = coerce;
var digest = (input) => create(code, encode4(input));
var identity2 = {
  code,
  name,
  encode: encode4,
  digest
};

// node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version12, code2, multihash, bytes) {
    this.code = code2;
    this.version = version12;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base4) {
    const { bytes, version: version12, _baseCache } = this;
    switch (version12) {
      case 0:
        return toStringV0(bytes, _baseCache, base4 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base4 || base32.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version12, code: code2, multihash, bytes } = value;
      return new _CID(version12, code2, multihash, bytes || encodeCID(version12, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version12, multihash, code: code2 } = value;
      const digest2 = decode5(multihash);
      return _CID.create(version12, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version12, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version12) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version12, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version12, code2, digest2.bytes);
        return new _CID(version12, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i6, length2] = decode4(initialBytes.subarray(offset));
      offset += length2;
      return i6;
    };
    let version12 = next();
    let codec = DAG_PB_CODE;
    if (version12 === 18) {
      version12 = 0;
      offset = 0;
    } else if (version12 === 1) {
      codec = next();
    }
    if (version12 !== 0 && version12 !== 1) {
      throw new RangeError(`Invalid CID version ${version12}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size = offset + digestSize;
    const multihashSize = size - prefixSize;
    return {
      version: version12,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size
    };
  }
  static parse(source, base4) {
    const [prefix, bytes] = parseCIDtoBytes(source, base4);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base4) => {
  switch (source[0]) {
    case "Q": {
      const decoder = base4 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder = base4 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(source)
      ];
    }
    case base32.prefix: {
      const decoder = base4 || base32;
      return [
        base32.prefix,
        decoder.decode(source)
      ];
    }
    default: {
      if (base4 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base4.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base4) => {
  const { prefix } = base4;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base4.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base4.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base4) => {
  const { prefix } = base4;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base4.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version12, code2, multihash) => {
  const codeOffset = encodingLength(version12);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version12, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode8, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode8
    },
    decoder: { decode: decode8 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string3 = "a";
  for (let i6 = 0; i6 < buf.length; i6++) {
    string3 += String.fromCharCode(buf[i6]);
  }
  return string3;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i6 = 0; i6 < str.length; i6++) {
    buf[i6] = str.charCodeAt(i6);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/to-string.js
function toString2(array, encoding = "utf8") {
  const base4 = bases_default[encoding];
  if (!base4) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base4.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/from-string.js
function fromString2(string3, encoding = "utf8") {
  const base4 = bases_default[encoding];
  if (!base4) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string3, "utf-8"));
  }
  return base4.decoder.decode(`${base4.prefix}${string3}`);
}

// node_modules/@walletconnect/relay-auth/dist/esm/utils.js
function decodeJSON(str) {
  return safeJsonParse3(toString2(fromString2(str, JWT_ENCODING), JSON_ENCODING));
}
function encodeJSON(val) {
  return toString2(fromString2(safeJsonStringify3(val), JSON_ENCODING), JWT_ENCODING);
}
function encodeIss(publicKey) {
  const header = fromString2(MULTICODEC_ED25519_HEADER, MULTICODEC_ED25519_ENCODING);
  const multicodec = MULTICODEC_ED25519_BASE + toString2(concat([header, publicKey]), MULTICODEC_ED25519_ENCODING);
  return [DID_PREFIX, DID_METHOD, multicodec].join(DID_DELIMITER);
}
function encodeSig(bytes) {
  return toString2(bytes, JWT_ENCODING);
}
function decodeSig(encoded) {
  return fromString2(encoded, JWT_ENCODING);
}
function encodeData(params) {
  return fromString2([encodeJSON(params.header), encodeJSON(params.payload)].join(JWT_DELIMITER), DATA_ENCODING);
}
function encodeJWT(params) {
  return [
    encodeJSON(params.header),
    encodeJSON(params.payload),
    encodeSig(params.signature)
  ].join(JWT_DELIMITER);
}
function decodeJWT(jwt) {
  const params = jwt.split(JWT_DELIMITER);
  const header = decodeJSON(params[0]);
  const payload = decodeJSON(params[1]);
  const signature2 = decodeSig(params[2]);
  const data = fromString2(params.slice(0, 2).join(JWT_DELIMITER), DATA_ENCODING);
  return { header, payload, signature: signature2, data };
}

// node_modules/@walletconnect/relay-auth/dist/esm/api.js
function generateKeyPair(seed = (0, import_random.randomBytes)(KEY_PAIR_SEED_LENGTH)) {
  return ed25519.generateKeyPairFromSeed(seed);
}
async function signJWT(sub, aud, ttl, keyPair2, iat = (0, import_time2.fromMiliseconds)(Date.now())) {
  const header = { alg: JWT_IRIDIUM_ALG, typ: JWT_IRIDIUM_TYP };
  const iss = encodeIss(keyPair2.publicKey);
  const exp = iat + ttl;
  const payload = { iss, sub, aud, iat, exp };
  const data = encodeData({ header, payload });
  const signature2 = ed25519.sign(keyPair2.secretKey, data);
  return encodeJWT({ header, payload, signature: signature2 });
}

// node_modules/detect-browser/es/index.js
var __spreadArray = function(to2, from3, pack) {
  if (pack || arguments.length === 2) for (var i6 = 0, l7 = from3.length, ar2; i6 < l7; i6++) {
    if (ar2 || !(i6 in from3)) {
      if (!ar2) ar2 = Array.prototype.slice.call(from3, 0, i6);
      ar2[i6] = from3[i6];
    }
  }
  return to2.concat(ar2 || Array.prototype.slice.call(from3));
};
var BrowserInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function BrowserInfo3(name2, version12, os) {
      this.name = name2;
      this.version = version12;
      this.os = os;
      this.type = "browser";
    }
    return BrowserInfo3;
  }()
);
var NodeInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function NodeInfo3(version12) {
      this.version = version12;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo3;
  }()
);
var SearchBotDeviceInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function SearchBotDeviceInfo3(name2, version12, os, bot) {
      this.name = name2;
      this.version = version12;
      this.os = os;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo3;
  }()
);
var BotInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function BotInfo3() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo3;
  }()
);
var ReactNativeInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function ReactNativeInfo3() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo3;
  }()
);
var SEARCHBOX_UA_REGEX2 = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX2 = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS2 = 3;
var userAgentRules2 = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX2]
];
var operatingSystemRules2 = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect2(userAgent) {
  if (!!userAgent) {
    return parseUserAgent2(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo2();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent2(navigator.userAgent);
  }
  return getNodeVersion2();
}
function matchUserAgent2(ua) {
  return ua !== "" && userAgentRules2.reduce(function(matched, _a) {
    var browser = _a[0], regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent2(ua) {
  var matchedRule = matchUserAgent2(ua);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo2();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS2) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts2(REQUIRED_VERSION_PARTS2 - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version12 = versionParts.join(".");
  var os = detectOS3(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX2.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo2(name2, version12, os, searchBotMatch[1]);
  }
  return new BrowserInfo2(name2, version12, os);
}
function detectOS3(ua) {
  for (var ii2 = 0, count = operatingSystemRules2.length; ii2 < count; ii2++) {
    var _a = operatingSystemRules2[ii2], os = _a[0], regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os;
    }
  }
  return null;
}
function getNodeVersion2() {
  var isNode3 = typeof process !== "undefined" && process.version;
  return isNode3 ? new NodeInfo2(process.version.slice(1)) : null;
}
function createVersionParts2(count) {
  var output = [];
  for (var ii2 = 0; ii2 < count; ii2++) {
    output.push("0");
  }
  return output;
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_time3 = __toESM(require_cjs5());
var import_window_getters = __toESM(require_cjs6());
var import_window_metadata = __toESM(require_cjs7());
var q3 = __toESM(require_query_string());

// node_modules/@ethersproject/keccak256/lib.esm/index.js
var import_js_sha3 = __toESM(require_sha3());

// node_modules/@ethersproject/logger/lib.esm/_version.js
var version2 = "logger/5.7.0";

// node_modules/@ethersproject/logger/lib.esm/index.js
var _permanentCensorErrors = false;
var _censorErrors = false;
var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
var _logLevel = LogLevels["default"];
var _globalLogger = null;
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _normalizeError = _checkNormalize();
var LogLevel;
(function(LogLevel2) {
  LogLevel2["DEBUG"] = "DEBUG";
  LogLevel2["INFO"] = "INFO";
  LogLevel2["WARNING"] = "WARNING";
  LogLevel2["ERROR"] = "ERROR";
  LogLevel2["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode2["TIMEOUT"] = "TIMEOUT";
  ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
  ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
var HEX = "0123456789abcdef";
var Logger = class _Logger {
  constructor(version12) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version12,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel > LogLevels[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(_Logger.levels.DEBUG, args);
  }
  info(...args) {
    this._log(_Logger.levels.INFO, args);
  }
  warn(...args) {
    this._log(_Logger.levels.WARNING, args);
  }
  makeError(message, code2, params) {
    if (_censorErrors) {
      return this.makeError("censored error", code2, {});
    }
    if (!code2) {
      code2 = _Logger.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key2) => {
      const value = params[key2];
      try {
        if (value instanceof Uint8Array) {
          let hex = "";
          for (let i6 = 0; i6 < value.length; i6++) {
            hex += HEX[value[i6] >> 4];
            hex += HEX[value[i6] & 15];
          }
          messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key2 + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
      }
    });
    messageDetails.push(`code=${code2}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message;
    let url = "";
    switch (code2) {
      case ErrorCode.NUMERIC_FAULT: {
        url = "NUMERIC_FAULT";
        const fault = message;
        switch (fault) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            url += "-" + fault;
            break;
          case "negative-power":
          case "negative-width":
            url += "-unsupported";
            break;
          case "unbound-bitwise-result":
            url += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode.CALL_EXCEPTION:
      case ErrorCode.INSUFFICIENT_FUNDS:
      case ErrorCode.MISSING_NEW:
      case ErrorCode.NONCE_EXPIRED:
      case ErrorCode.REPLACEMENT_UNDERPRICED:
      case ErrorCode.TRANSACTION_REPLACED:
      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
        url = code2;
        break;
    }
    if (url) {
      message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
    }
    if (messageDetails.length) {
      message += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message);
    error.reason = reason;
    error.code = code2;
    Object.keys(params).forEach(function(key2) {
      error[key2] = params[key2];
    });
    return error;
  }
  throwError(message, code2, params) {
    throw this.makeError(message, code2, params);
  }
  throwArgumentError(message, name2, value) {
    return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
      argument: name2,
      value
    });
  }
  assert(condition, message, code2, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message, code2, params);
  }
  assertArgument(condition, message, name2, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message, name2, value);
  }
  checkNormalize(message) {
    if (message == null) {
      message = "platform missing String.prototype.normalize";
    }
    if (_normalizeError) {
      this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError
      });
    }
  }
  checkSafeUint53(value, message) {
    if (typeof value !== "number") {
      return;
    }
    if (message == null) {
      message = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message) {
    if (message) {
      message = ": " + message;
    } else {
      message = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger) {
      _globalLogger = new _Logger(version2);
    }
    return _globalLogger;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels[logLevel.toLowerCase()];
    if (level == null) {
      _Logger.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel = level;
  }
  static from(version12) {
    return new _Logger(version12);
  }
};
Logger.errors = ErrorCode;
Logger.levels = LogLevel;

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var version3 = "bytes/5.7.0";

// node_modules/@ethersproject/bytes/lib.esm/index.js
var logger = new Logger(version3);
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i6 = 0; i6 < value.length; i6++) {
    const v8 = value[i6];
    if (!isInteger(v8) || v8 < 0 || v8 >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i6 = 0; i6 < hex.length; i6 += 2) {
      result.push(parseInt(hex.substring(i6, i6 + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat2(items) {
  const objects = items.map((item) => arrayify(item));
  const length2 = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length2);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function zeroPad(value, length2) {
  value = arrayify(value);
  if (value.length > length2) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length2);
  result.set(value, length2 - value.length);
  return addSlice(result);
}
function isHexString(value, length2) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length2 && value.length !== 2 + 2 * length2) {
    return false;
  }
  return true;
}
var HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i6 = 0; i6 < value.length; i6++) {
      let v8 = value[i6];
      result += HexCharacters[(v8 & 240) >> 4] + HexCharacters[v8 & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexZeroPad(value, length2) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length2 + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length2 + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes = arrayify(signature2);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs3 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs3);
      const recoveryParam = vs3[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs3[0] &= 127;
      const s5 = hexlify(vs3);
      if (result.s == null) {
        result.s = s5;
      } else if (result.s !== s5) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs2 = arrayify(result.s);
    if (vs2[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs2[0] |= 128;
    }
    const _vs = hexlify(vs2);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}

// node_modules/@ethersproject/keccak256/lib.esm/index.js
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var import_bn = __toESM(require_bn());

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version4 = "bignumber/5.7.0";

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var BN = import_bn.default.BN;
var logger2 = new Logger(version4);
var _constructorGuard = {};
var MAX_SAFE = 9007199254740991;
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
var _warnedToStringRadix = false;
var BigNumber = class _BigNumber {
  constructor(constructorGuard, hex) {
    if (constructorGuard !== _constructorGuard) {
      logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber(toBN(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber(toBN(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return _BigNumber.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber(toBN(this).add(toBN(other)));
  }
  sub(other) {
    return toBigNumber(toBN(this).sub(toBN(other)));
  }
  div(other) {
    const o6 = _BigNumber.from(other);
    if (o6.isZero()) {
      throwFault("division-by-zero", "div");
    }
    return toBigNumber(toBN(this).div(toBN(other)));
  }
  mul(other) {
    return toBigNumber(toBN(this).mul(toBN(other)));
  }
  mod(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("division-by-zero", "mod");
    }
    return toBigNumber(toBN(this).umod(value));
  }
  pow(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("negative-power", "pow");
    }
    return toBigNumber(toBN(this).pow(value));
  }
  and(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "and");
    }
    return toBigNumber(toBN(this).and(value));
  }
  or(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "or");
    }
    return toBigNumber(toBN(this).or(value));
  }
  xor(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "xor");
    }
    return toBigNumber(toBN(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "mask");
    }
    return toBigNumber(toBN(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shl");
    }
    return toBigNumber(toBN(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shr");
    }
    return toBigNumber(toBN(this).shrn(value));
  }
  eq(other) {
    return toBN(this).eq(toBN(other));
  }
  lt(other) {
    return toBN(this).lt(toBN(other));
  }
  lte(other) {
    return toBN(this).lte(toBN(other));
  }
  gt(other) {
    return toBN(this).gt(toBN(other));
  }
  gte(other) {
    return toBN(this).gte(toBN(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN(this).isZero();
  }
  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch (error) {
      throwFault("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e4) {
    }
    return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix) {
          _warnedToStringRadix = true;
          logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key2) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof _BigNumber) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new _BigNumber(_constructorGuard, toHex(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new _BigNumber(_constructorGuard, toHex(new BN(value)));
      }
      return logger2.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE || value <= -MAX_SAFE) {
        throwFault("overflow", "BigNumber.from", value);
      }
      return _BigNumber.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return _BigNumber.from(anyValue.toString());
    }
    if (isBytes(anyValue)) {
      return _BigNumber.from(hexlify(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();
        if (typeof hex === "string") {
          return _BigNumber.from(hex);
        }
      } else {
        let hex = anyValue._hex;
        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }
        if (typeof hex === "string") {
          if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
            return _BigNumber.from(hex);
          }
        }
      }
    }
    return logger2.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
};
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
var logger3 = new Logger(version4);
var _constructorGuard2 = {};
var Zero = BigNumber.from(0);
var NegativeOne = BigNumber.from(-1);
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
var zeros = "0";
while (zeros.length < 256) {
  zeros += zeros;
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e4) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var FixedFormat = class _FixedFormat {
  constructor(constructorGuard, signed2, width, decimals) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed2;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof _FixedFormat) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed2 = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed2 = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger3.throwArgumentError("invalid fixed format", "format", value);
        }
        signed2 = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key2, type, defaultValue) => {
        if (value[key2] == null) {
          return defaultValue;
        }
        if (typeof value[key2] !== type) {
          logger3.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
        }
        return value[key2];
      };
      signed2 = check("signed", "boolean", signed2);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new _FixedFormat(_constructorGuard2, signed2, width, decimals);
  }
};
var FixedNumber = class _FixedNumber {
  constructor(constructorGuard, hex, value, format) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a5 = parseFixed(this._value, this.format.decimals);
    const b5 = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a5.add(b5), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a5 = parseFixed(this._value, this.format.decimals);
    const b5 = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a5.sub(b5), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a5 = parseFixed(this._value, this.format.decimals);
    const b5 = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a5.mul(b5).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a5 = parseFixed(this._value, this.format.decimals);
    const b5 = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a5.mul(this.format._multiplier).div(b5), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = _FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = _FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  // @TODO: Support other rounding algorithms
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
    const bump = BUMP.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid byte width", "width", width);
    }
    const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad(hex, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return _FixedNumber.fromString(this._value, format);
  }
  static fromValue(value, decimals, format) {
    if (format == null && decimals != null && !isBigNumberish(decimals)) {
      format = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format == null) {
      format = "fixed";
    }
    return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
  }
  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    const numeric = parseFixed(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero)) {
      throwFault2("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex = null;
    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = hexZeroPad(hex, fixedFormat.width / 8);
    }
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    if (arrayify(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static from(value, format) {
    if (typeof value === "string") {
      return _FixedNumber.fromString(value, format);
    }
    if (isBytes(value)) {
      return _FixedNumber.fromBytes(value, format);
    }
    try {
      return _FixedNumber.fromValue(value, 0, format);
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
};
var ONE = FixedNumber.from(1);
var BUMP = FixedNumber.from("0.5");

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2 = BigNumber.from(-1);
var Zero2 = BigNumber.from(0);
var One = BigNumber.from(1);
var Two = BigNumber.from(2);
var WeiPerEther = BigNumber.from("1000000000000000000");
var MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
var MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// node_modules/@ethersproject/strings/lib.esm/_version.js
var version5 = "strings/5.7.0";

// node_modules/@ethersproject/strings/lib.esm/utf8.js
var logger4 = new Logger(version5);
var UnicodeNormalizationForm;
(function(UnicodeNormalizationForm2) {
  UnicodeNormalizationForm2["current"] = "";
  UnicodeNormalizationForm2["NFC"] = "NFC";
  UnicodeNormalizationForm2["NFD"] = "NFD";
  UnicodeNormalizationForm2["NFKC"] = "NFKC";
  UnicodeNormalizationForm2["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function(Utf8ErrorReason2) {
  Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
  Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
  Utf8ErrorReason2["OVERRUN"] = "string overrun";
  Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
  Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
  Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
  Utf8ErrorReason2["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger4.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i6 = 0;
    for (let o6 = offset + 1; o6 < bytes.length; o6++) {
      if (bytes[o6] >> 6 !== 2) {
        break;
      }
      i6++;
    }
    return i6;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger4.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i6 = 0; i6 < str.length; i6++) {
    const c7 = str.charCodeAt(i6);
    if (c7 < 128) {
      result.push(c7);
    } else if (c7 < 2048) {
      result.push(c7 >> 6 | 192);
      result.push(c7 & 63 | 128);
    } else if ((c7 & 64512) == 55296) {
      i6++;
      const c22 = str.charCodeAt(i6);
      if (i6 >= str.length || (c22 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c7 & 1023) << 10) + (c22 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c7 >> 12 | 224);
      result.push(c7 >> 6 & 63 | 128);
      result.push(c7 & 63 | 128);
    }
  }
  return arrayify(result);
}

// node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i6 = 0; i6 < data.length; i6 += 4) {
    result.push(parseInt(data.substring(i6, i6 + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo2 = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo2 += parseInt(comps[0], 16);
    result[lo2] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi2 = 0;
  return data.split(",").map((v8) => {
    let comps = v8.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo2 = hi2 + parseInt(comps[0], 16);
    hi2 = parseInt(comps[1], 16);
    return { l: lo2, h: hi2 };
  });
}
var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v8) => parseInt(v8, 16));
var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

// node_modules/@ethersproject/hash/lib.esm/_version.js
var version6 = "hash/5.7.0";

// node_modules/@ethersproject/base64/lib.esm/base64.js
function decode6(textData) {
  textData = atob(textData);
  const data = [];
  for (let i6 = 0; i6 < textData.length; i6++) {
    data.push(textData.charCodeAt(i6));
  }
  return arrayify(data);
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  const result = [];
  const forEach = result.forEach;
  const flatDeep = function(arr, depth2) {
    forEach.call(arr, function(val) {
      if (depth2 > 0 && Array.isArray(val)) {
        flatDeep(val, depth2 - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  const result = {};
  for (let i6 = 0; i6 < array.length; i6++) {
    const value = array[i6];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes) {
  let pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i6 = 1; i6 < symbol_count; i6++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N11 = 31;
  const FULL = Math.pow(2, N11);
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i6 = 0; i6 < N11; i6++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a5 = low + Math.floor(range * acc[start] / total);
    let b5 = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a5 ^ b5) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a5 = a5 << 1 & MASK;
      b5 = b5 << 1 & MASK | 1;
    }
    while (a5 & ~b5 & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a5 = a5 << 1 ^ HALF;
      b5 = (b5 ^ HALF) << 1 | HALF | 1;
    }
    low = a5;
    range = 1 + b5 - a5;
  }
  let offset = symbol_count - 4;
  return symbols.map((x8) => {
    switch (x8 - offset) {
      case 3:
        return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x8 - 1;
    }
  });
}
function read_payload(v8) {
  let pos = 0;
  return () => v8[pos++];
}
function read_compressed_payload(bytes) {
  return read_payload(decode_arithmetic(bytes));
}
function signed(i6) {
  return i6 & 1 ? ~i6 >> 1 : i6 >> 1;
}
function read_counts(n6, next) {
  let v8 = Array(n6);
  for (let i6 = 0; i6 < n6; i6++)
    v8[i6] = 1 + next();
  return v8;
}
function read_ascending(n6, next) {
  let v8 = Array(n6);
  for (let i6 = 0, x8 = -1; i6 < n6; i6++)
    v8[i6] = x8 += 1 + next();
  return v8;
}
function read_deltas(n6, next) {
  let v8 = Array(n6);
  for (let i6 = 0, x8 = 0; i6 < n6; i6++)
    v8[i6] = x8 += signed(next());
  return v8;
}
function read_member_array(next, lookup) {
  let v8 = read_ascending(next(), next);
  let n6 = next();
  let vX = read_ascending(n6, next);
  let vN = read_counts(n6, next);
  for (let i6 = 0; i6 < n6; i6++) {
    for (let j5 = 0; j5 < vN[i6]; j5++) {
      v8.push(vX[i6] + j5);
    }
  }
  return lookup ? v8.map((x8) => lookup[x8]) : v8;
}
function read_mapped_map(next) {
  let ret = [];
  while (true) {
    let w6 = next();
    if (w6 == 0)
      break;
    ret.push(read_linear_table(w6, next));
  }
  while (true) {
    let w6 = next() - 1;
    if (w6 < 0)
      break;
    ret.push(read_replacement_table(w6, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  let v8 = [];
  while (true) {
    let i6 = next();
    if (i6 == 0)
      break;
    v8.push(i6);
  }
  return v8;
}
function read_transposed(n6, w6, next) {
  let m4 = Array(n6).fill(void 0).map(() => []);
  for (let i6 = 0; i6 < w6; i6++) {
    read_deltas(n6, next).forEach((x8, j5) => m4[j5].push(x8));
  }
  return m4;
}
function read_linear_table(w6, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_zero_terminated_array(next);
  let m4 = read_transposed(vN.length, 1 + w6, next);
  return flat(m4.map((v8, i6) => {
    const x8 = v8[0], ys2 = v8.slice(1);
    return Array(vN[i6]).fill(void 0).map((_8, j5) => {
      let j_dy = j5 * dy;
      return [x8 + j5 * dx, ys2.map((y7) => y7 + j_dy)];
    });
  }));
}
function read_replacement_table(w6, next) {
  let n6 = 1 + next();
  let m4 = read_transposed(n6, 1 + w6, next);
  return m4.map((v8) => [v8[0], v8.slice(1)]);
}
function read_emoji_trie(next) {
  let sorted = read_member_array(next).sort((a5, b5) => a5 - b5);
  return read2();
  function read2() {
    let branches = [];
    while (true) {
      let keys2 = read_member_array(next, sorted);
      if (keys2.length == 0)
        break;
      branches.push({ set: new Set(keys2), node: read2() });
    }
    branches.sort((a5, b5) => b5.set.size - a5.set.size);
    let temp = next();
    let valid = temp % 3;
    temp = temp / 3 | 0;
    let fe0f = !!(temp & 1);
    temp >>= 1;
    let save = temp == 1;
    let check = temp == 2;
    return { branches, valid, fe0f, save, check };
  }
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
function getData() {
  return read_compressed_payload(decode6(""));
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var r4 = getData();
var VALID = new Set(read_member_array(r4));
var IGNORED = new Set(read_member_array(r4));
var MAPPED = read_mapped_map(r4);
var EMOJI_ROOT = read_emoji_trie(r4);

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var logger5 = new Logger(version6);
var Zeros = new Uint8Array(32);
Zeros.fill(0);

// node_modules/@ethersproject/hash/lib.esm/message.js
var messagePrefix = "Ethereum Signed Message:\n";
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat2([
    toUtf8Bytes(messagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var version7 = "rlp/5.7.0";

// node_modules/@ethersproject/rlp/lib.esm/index.js
var logger6 = new Logger(version7);

// node_modules/@ethersproject/address/lib.esm/_version.js
var version8 = "address/5.7.0";

// node_modules/@ethersproject/address/lib.esm/index.js
var logger7 = new Logger(version8);
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i6 = 0; i6 < 40; i6++) {
    expanded[i6] = chars[i6].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i6 = 0; i6 < 40; i6 += 2) {
    if (hashed[i6 >> 1] >> 4 >= 8) {
      chars[i6] = chars[i6].toUpperCase();
    }
    if ((hashed[i6 >> 1] & 15) >= 8) {
      chars[i6 + 1] = chars[i6 + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function log10(x8) {
  if (Math.log10) {
    return Math.log10(x8);
  }
  return Math.log(x8) / Math.LN10;
}
var ibanLookup = {};
for (let i6 = 0; i6 < 10; i6++) {
  ibanLookup[String(i6)] = String(i6);
}
for (let i6 = 0; i6 < 26; i6++) {
  ibanLookup[String.fromCharCode(65 + i6)] = String(10 + i6);
}
var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c7) => {
    return ibanLookup[c7];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger7.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger7.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  return result;
}

// node_modules/@ethersproject/properties/lib.esm/_version.js
var version9 = "properties/5.7.0";

// node_modules/@ethersproject/properties/lib.esm/index.js
var logger8 = new Logger(version9);
function defineReadOnly(object, name2, value) {
  Object.defineProperty(object, name2, {
    enumerable: true,
    value,
    writable: false
  });
}

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
var logger9 = new Logger(version6);
var padding = new Uint8Array(32);
padding.fill(0);
var NegativeOne3 = BigNumber.from(-1);
var Zero3 = BigNumber.from(0);
var One2 = BigNumber.from(1);
var MaxUint2562 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var hexTrue = hexZeroPad(One2.toHexString(), 32);
var hexFalse = hexZeroPad(Zero3.toHexString(), 32);
function checkString(key2) {
  return function(value) {
    if (typeof value !== "string") {
      logger9.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);
    }
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(value) {
    try {
      return BigNumber.from(value).toString();
    } catch (error) {
    }
    return logger9.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
  },
  verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    return logger9.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function(value) {
    try {
      const bytes = arrayify(value);
      if (bytes.length !== 32) {
        throw new Error("bad length");
      }
      return hexlify(bytes);
    } catch (error) {
    }
    return logger9.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
  }
};

// node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
var import_bn2 = __toESM(require_bn2());
var import_hash = __toESM(require_hash());
function createCommonjsModule(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base4) {
      return commonjsRequire(path, base4 === void 0 || base4 === null ? module.path : base4);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var minimalisticAssert = assert;
function assert(val, msg) {
  if (!val)
    throw new Error(msg || "Assertion failed");
}
assert.equal = function assertEqual(l7, r6, msg) {
  if (l7 != r6)
    throw new Error(msg || "Assertion failed: " + l7 + " != " + r6);
};
var utils_1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var utils = exports;
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== "string") {
      for (var i6 = 0; i6 < msg.length; i6++)
        res[i6] = msg[i6] | 0;
      return res;
    }
    if (enc === "hex") {
      msg = msg.replace(/[^a-z0-9]+/ig, "");
      if (msg.length % 2 !== 0)
        msg = "0" + msg;
      for (var i6 = 0; i6 < msg.length; i6 += 2)
        res.push(parseInt(msg[i6] + msg[i6 + 1], 16));
    } else {
      for (var i6 = 0; i6 < msg.length; i6++) {
        var c7 = msg.charCodeAt(i6);
        var hi2 = c7 >> 8;
        var lo2 = c7 & 255;
        if (hi2)
          res.push(hi2, lo2);
        else
          res.push(lo2);
      }
    }
    return res;
  }
  utils.toArray = toArray;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  function toHex2(msg) {
    var res = "";
    for (var i6 = 0; i6 < msg.length; i6++)
      res += zero2(msg[i6].toString(16));
    return res;
  }
  utils.toHex = toHex2;
  utils.encode = function encode8(arr, enc) {
    if (enc === "hex")
      return toHex2(arr);
    else
      return arr;
  };
});
var utils_1$1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var utils = exports;
  utils.assert = minimalisticAssert;
  utils.toArray = utils_1.toArray;
  utils.zero2 = utils_1.zero2;
  utils.toHex = utils_1.toHex;
  utils.encode = utils_1.encode;
  function getNAF2(num, w6, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws2 = 1 << w6 + 1;
    var k7 = num.clone();
    for (var i6 = 0; i6 < naf.length; i6++) {
      var z7;
      var mod = k7.andln(ws2 - 1);
      if (k7.isOdd()) {
        if (mod > (ws2 >> 1) - 1)
          z7 = (ws2 >> 1) - mod;
        else
          z7 = mod;
        k7.isubn(z7);
      } else {
        z7 = 0;
      }
      naf[i6] = z7;
      k7.iushrn(1);
    }
    return naf;
  }
  utils.getNAF = getNAF2;
  function getJSF2(k1, k22) {
    var jsf = [
      [],
      []
    ];
    k1 = k1.clone();
    k22 = k22.clone();
    var d1 = 0;
    var d22 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k22.andln(3) + d22 & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);
      var u22;
      if ((m24 & 1) === 0) {
        u22 = 0;
      } else {
        m8 = k22.andln(7) + d22 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u22 = -m24;
        else
          u22 = m24;
      }
      jsf[1].push(u22);
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d22 === u22 + 1)
        d22 = 1 - d22;
      k1.iushrn(1);
      k22.iushrn(1);
    }
    return jsf;
  }
  utils.getJSF = getJSF2;
  function cachedProperty(obj, name2, computer) {
    var key2 = "_" + name2;
    obj.prototype[name2] = function cachedProperty2() {
      return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;
  function parseBytes(bytes) {
    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
  }
  utils.parseBytes = parseBytes;
  function intFromLE(bytes) {
    return new import_bn2.default(bytes, "hex", "le");
  }
  utils.intFromLE = intFromLE;
});
var getNAF = utils_1$1.getNAF;
var getJSF = utils_1$1.getJSF;
var assert$1 = utils_1$1.assert;
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new import_bn2.default(conf.p, 16);
  this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);
  this.zero = new import_bn2.default(0).toRed(this.red);
  this.one = new import_bn2.default(1).toRed(this.red);
  this.two = new import_bn2.default(2).toRed(this.red);
  this.n = conf.n && new import_bn2.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
var base3 = BaseCurve;
BaseCurve.prototype.point = function point() {
  throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
  throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p5, k7) {
  assert$1(p5.precomputed);
  var doubles = p5._getDoubles();
  var naf = getNAF(k7, 1, this._bitLength);
  var I6 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I6 /= 3;
  var repr = [];
  var j5;
  var nafW;
  for (j5 = 0; j5 < naf.length; j5 += doubles.step) {
    nafW = 0;
    for (var l7 = j5 + doubles.step - 1; l7 >= j5; l7--)
      nafW = (nafW << 1) + naf[l7];
    repr.push(nafW);
  }
  var a5 = this.jpoint(null, null, null);
  var b5 = this.jpoint(null, null, null);
  for (var i6 = I6; i6 > 0; i6--) {
    for (j5 = 0; j5 < repr.length; j5++) {
      nafW = repr[j5];
      if (nafW === i6)
        b5 = b5.mixedAdd(doubles.points[j5]);
      else if (nafW === -i6)
        b5 = b5.mixedAdd(doubles.points[j5].neg());
    }
    a5 = a5.add(b5);
  }
  return a5.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p5, k7) {
  var w6 = 4;
  var nafPoints = p5._getNAFPoints(w6);
  w6 = nafPoints.wnd;
  var wnd = nafPoints.points;
  var naf = getNAF(k7, w6, this._bitLength);
  var acc = this.jpoint(null, null, null);
  for (var i6 = naf.length - 1; i6 >= 0; i6--) {
    for (var l7 = 0; i6 >= 0 && naf[i6] === 0; i6--)
      l7++;
    if (i6 >= 0)
      l7++;
    acc = acc.dblp(l7);
    if (i6 < 0)
      break;
    var z7 = naf[i6];
    assert$1(z7 !== 0);
    if (p5.type === "affine") {
      if (z7 > 0)
        acc = acc.mixedAdd(wnd[z7 - 1 >> 1]);
      else
        acc = acc.mixedAdd(wnd[-z7 - 1 >> 1].neg());
    } else {
      if (z7 > 0)
        acc = acc.add(wnd[z7 - 1 >> 1]);
      else
        acc = acc.add(wnd[-z7 - 1 >> 1].neg());
    }
  }
  return p5.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;
  var max = 0;
  var i6;
  var j5;
  var p5;
  for (i6 = 0; i6 < len; i6++) {
    p5 = points[i6];
    var nafPoints = p5._getNAFPoints(defW);
    wndWidth[i6] = nafPoints.wnd;
    wnd[i6] = nafPoints.points;
  }
  for (i6 = len - 1; i6 >= 1; i6 -= 2) {
    var a5 = i6 - 1;
    var b5 = i6;
    if (wndWidth[a5] !== 1 || wndWidth[b5] !== 1) {
      naf[a5] = getNAF(coeffs[a5], wndWidth[a5], this._bitLength);
      naf[b5] = getNAF(coeffs[b5], wndWidth[b5], this._bitLength);
      max = Math.max(naf[a5].length, max);
      max = Math.max(naf[b5].length, max);
      continue;
    }
    var comb = [
      points[a5],
      /* 1 */
      null,
      /* 3 */
      null,
      /* 5 */
      points[b5]
      /* 7 */
    ];
    if (points[a5].y.cmp(points[b5].y) === 0) {
      comb[1] = points[a5].add(points[b5]);
      comb[2] = points[a5].toJ().mixedAdd(points[b5].neg());
    } else if (points[a5].y.cmp(points[b5].y.redNeg()) === 0) {
      comb[1] = points[a5].toJ().mixedAdd(points[b5]);
      comb[2] = points[a5].add(points[b5].neg());
    } else {
      comb[1] = points[a5].toJ().mixedAdd(points[b5]);
      comb[2] = points[a5].toJ().mixedAdd(points[b5].neg());
    }
    var index = [
      -3,
      /* -1 -1 */
      -1,
      /* -1 0 */
      -5,
      /* -1 1 */
      -7,
      /* 0 -1 */
      0,
      /* 0 0 */
      7,
      /* 0 1 */
      5,
      /* 1 -1 */
      1,
      /* 1 0 */
      3
      /* 1 1 */
    ];
    var jsf = getJSF(coeffs[a5], coeffs[b5]);
    max = Math.max(jsf[0].length, max);
    naf[a5] = new Array(max);
    naf[b5] = new Array(max);
    for (j5 = 0; j5 < max; j5++) {
      var ja = jsf[0][j5] | 0;
      var jb = jsf[1][j5] | 0;
      naf[a5][j5] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b5][j5] = 0;
      wnd[a5] = comb;
    }
  }
  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i6 = max; i6 >= 0; i6--) {
    var k7 = 0;
    while (i6 >= 0) {
      var zero = true;
      for (j5 = 0; j5 < len; j5++) {
        tmp[j5] = naf[j5][i6] | 0;
        if (tmp[j5] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k7++;
      i6--;
    }
    if (i6 >= 0)
      k7++;
    acc = acc.dblp(k7);
    if (i6 < 0)
      break;
    for (j5 = 0; j5 < len; j5++) {
      var z7 = tmp[j5];
      p5;
      if (z7 === 0)
        continue;
      else if (z7 > 0)
        p5 = wnd[j5][z7 - 1 >> 1];
      else if (z7 < 0)
        p5 = wnd[j5][-z7 - 1 >> 1].neg();
      if (p5.type === "affine")
        acc = acc.mixedAdd(p5);
      else
        acc = acc.add(p5);
    }
  }
  for (i6 = 0; i6 < len; i6++)
    wnd[i6] = null;
  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
  throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate2() {
  return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils_1$1.toArray(bytes, enc);
  var len = this.p.byteLength();
  if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 6)
      assert$1(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 7)
      assert$1(bytes[bytes.length - 1] % 2 === 1);
    var res = this.point(
      bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len)
    );
    return res;
  } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
  }
  throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x8 = this.getX().toArray("be", len);
  if (compact)
    return [this.getY().isEven() ? 2 : 3].concat(x8);
  return [4].concat(x8, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode7(enc, compact) {
  return utils_1$1.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;
  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;
  return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k7) {
  if (!this.precomputed)
    return false;
  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;
  return doubles.points.length >= Math.ceil((k7.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;
  var doubles = [this];
  var acc = this;
  for (var i6 = 0; i6 < power; i6 += step) {
    for (var j5 = 0; j5 < step; j5++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step,
    points: doubles
  };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;
  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl3 = max === 1 ? null : this.dbl();
  for (var i6 = 1; i6 < max; i6++)
    res[i6] = res[i6 - 1].add(dbl3);
  return {
    wnd,
    points: res
  };
};
BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};
BasePoint.prototype.dblp = function dblp(k7) {
  var r6 = this;
  for (var i6 = 0; i6 < k7; i6++)
    r6 = r6.dbl();
  return r6;
};
var inherits_browser = createCommonjsModule(function(module) {
  if (typeof Object.create === "function") {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});
var assert$2 = utils_1$1.assert;
function ShortCurve(conf) {
  base3.call(this, "short", conf);
  this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
  this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits_browser(ShortCurve, base3);
var short_1 = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new import_bn2.default(conf.lambda, 16);
  } else {
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new import_bn2.default(vec.a, 16),
        b: new import_bn2.default(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }
  return {
    beta,
    lambda,
    basis
  };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  var red = num === this.p ? this.red : import_bn2.default.mont(num);
  var tinv = new import_bn2.default(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var s5 = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  var l1 = ntinv.redAdd(s5).fromRed();
  var l22 = ntinv.redSub(s5).fromRed();
  return [l1, l22];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
  var u4 = lambda;
  var v8 = this.n.clone();
  var x1 = new import_bn2.default(1);
  var y1 = new import_bn2.default(0);
  var x22 = new import_bn2.default(0);
  var y22 = new import_bn2.default(1);
  var a0;
  var b0;
  var a1;
  var b1;
  var a22;
  var b22;
  var prevR;
  var i6 = 0;
  var r6;
  var x8;
  while (u4.cmpn(0) !== 0) {
    var q4 = v8.div(u4);
    r6 = v8.sub(q4.mul(u4));
    x8 = x22.sub(q4.mul(x1));
    var y7 = y22.sub(q4.mul(y1));
    if (!a1 && r6.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r6.neg();
      b1 = x8;
    } else if (a1 && ++i6 === 2) {
      break;
    }
    prevR = r6;
    v8 = u4;
    u4 = r6;
    x22 = x1;
    x1 = x8;
    y22 = y1;
    y1 = y7;
  }
  a22 = r6.neg();
  b22 = x8;
  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a22.sqr().add(b22.sqr());
  if (len2.cmp(len1) >= 0) {
    a22 = a0;
    b22 = b0;
  }
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a22.negative) {
    a22 = a22.neg();
    b22 = b22.neg();
  }
  return [
    { a: a1, b: b1 },
    { a: a22, b: b22 }
  ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k7) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v22 = basis[1];
  var c1 = v22.b.mul(k7).divRound(this.n);
  var c22 = v1.b.neg().mul(k7).divRound(this.n);
  var p1 = c1.mul(v1.a);
  var p22 = c22.mul(v22.a);
  var q1 = c1.mul(v1.b);
  var q22 = c22.mul(v22.b);
  var k1 = k7.sub(p1).sub(p22);
  var k22 = q1.add(q22).neg();
  return { k1, k2: k22 };
};
ShortCurve.prototype.pointFromX = function pointFromX(x8, odd) {
  x8 = new import_bn2.default(x8, 16);
  if (!x8.red)
    x8 = x8.toRed(this.red);
  var y22 = x8.redSqr().redMul(x8).redIAdd(x8.redMul(this.a)).redIAdd(this.b);
  var y7 = y22.redSqrt();
  if (y7.redSqr().redSub(y22).cmp(this.zero) !== 0)
    throw new Error("invalid point");
  var isOdd = y7.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y7 = y7.redNeg();
  return this.point(x8, y7);
};
ShortCurve.prototype.validate = function validate3(point3) {
  if (point3.inf)
    return true;
  var x8 = point3.x;
  var y7 = point3.y;
  var ax = this.a.redMul(x8);
  var rhs = x8.redSqr().redMul(x8).redIAdd(ax).redIAdd(this.b);
  return y7.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i6 = 0; i6 < points.length; i6++) {
    var split = this._endoSplit(coeffs[i6]);
    var p5 = points[i6];
    var beta = p5._getBeta();
    if (split.k1.negative) {
      split.k1.ineg();
      p5 = p5.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }
    npoints[i6 * 2] = p5;
    npoints[i6 * 2 + 1] = beta;
    ncoeffs[i6 * 2] = split.k1;
    ncoeffs[i6 * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i6 * 2, jacobianResult);
  for (var j5 = 0; j5 < i6 * 2; j5++) {
    npoints[j5] = null;
    ncoeffs[j5] = null;
  }
  return res;
};
function Point(curve, x8, y7, isRed) {
  base3.BasePoint.call(this, curve, "affine");
  if (x8 === null && y7 === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new import_bn2.default(x8, 16);
    this.y = new import_bn2.default(y7, 16);
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits_browser(Point, base3.BasePoint);
ShortCurve.prototype.point = function point2(x8, y7, isRed) {
  return new Point(this, x8, y7, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta2() {
  if (!this.curve.endo)
    return;
  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p5) {
      return curve.point(p5.x.redMul(curve.endo.beta), p5.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};
Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [this.x, this.y];
  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === "string")
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;
  function obj2point(obj2) {
    return curve.point(obj2[0], obj2[1], red);
  }
  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};
Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return "<EC Point Infinity>";
  return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};
Point.prototype.add = function add(p5) {
  if (this.inf)
    return p5;
  if (p5.inf)
    return this;
  if (this.eq(p5))
    return this.dbl();
  if (this.neg().eq(p5))
    return this.curve.point(null, null);
  if (this.x.cmp(p5.x) === 0)
    return this.curve.point(null, null);
  var c7 = this.y.redSub(p5.y);
  if (c7.cmpn(0) !== 0)
    c7 = c7.redMul(this.x.redSub(p5.x).redInvm());
  var nx = c7.redSqr().redISub(this.x).redISub(p5.x);
  var ny = c7.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);
  var a5 = this.curve.a;
  var x22 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c7 = x22.redAdd(x22).redIAdd(x22).redIAdd(a5).redMul(dyinv);
  var nx = c7.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c7.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
  return this.x.fromRed();
};
Point.prototype.getY = function getY() {
  return this.y.fromRed();
};
Point.prototype.mul = function mul(k7) {
  k7 = new import_bn2.default(k7, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k7))
    return this.curve._fixedNafMul(this, k7);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([this], [k7]);
  else
    return this.curve._wnafMul(this, k7);
};
Point.prototype.mulAdd = function mulAdd(k1, p22, k22) {
  var points = [this, p22];
  var coeffs = [k1, k22];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p22, k22) {
  var points = [this, p22];
  var coeffs = [k1, k22];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq2(p5) {
  return this === p5 || this.inf === p5.inf && (this.inf || this.x.cmp(p5.x) === 0 && this.y.cmp(p5.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;
  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p5) {
      return p5.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};
Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};
function JPoint(curve, x8, y7, z7) {
  base3.BasePoint.call(this, curve, "jacobian");
  if (x8 === null && y7 === null && z7 === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new import_bn2.default(0);
  } else {
    this.x = new import_bn2.default(x8, 16);
    this.y = new import_bn2.default(y7, 16);
    this.z = new import_bn2.default(z7, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
inherits_browser(JPoint, base3.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x8, y7, z7) {
  return new JPoint(this, x8, y7, z7);
};
JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);
  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);
  return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg2() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add2(p5) {
  if (this.isInfinity())
    return p5;
  if (p5.isInfinity())
    return this;
  var pz2 = p5.z.redSqr();
  var z22 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u22 = p5.x.redMul(z22);
  var s1 = this.y.redMul(pz2.redMul(p5.z));
  var s22 = p5.y.redMul(z22.redMul(this.z));
  var h7 = u1.redSub(u22);
  var r6 = s1.redSub(s22);
  if (h7.cmpn(0) === 0) {
    if (r6.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }
  var h22 = h7.redSqr();
  var h32 = h22.redMul(h7);
  var v8 = u1.redMul(h22);
  var nx = r6.redSqr().redIAdd(h32).redISub(v8).redISub(v8);
  var ny = r6.redMul(v8.redISub(nx)).redISub(s1.redMul(h32));
  var nz = this.z.redMul(p5.z).redMul(h7);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p5) {
  if (this.isInfinity())
    return p5.toJ();
  if (p5.isInfinity())
    return this;
  var z22 = this.z.redSqr();
  var u1 = this.x;
  var u22 = p5.x.redMul(z22);
  var s1 = this.y;
  var s22 = p5.y.redMul(z22).redMul(this.z);
  var h7 = u1.redSub(u22);
  var r6 = s1.redSub(s22);
  if (h7.cmpn(0) === 0) {
    if (r6.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }
  var h22 = h7.redSqr();
  var h32 = h22.redMul(h7);
  var v8 = u1.redMul(h22);
  var nx = r6.redSqr().redIAdd(h32).redISub(v8).redISub(v8);
  var ny = r6.redMul(v8.redISub(nx)).redISub(s1.redMul(h32));
  var nz = this.z.redMul(h7);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp2(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();
  var i6;
  if (this.curve.zeroA || this.curve.threeA) {
    var r6 = this;
    for (i6 = 0; i6 < pow; i6++)
      r6 = r6.dbl();
    return r6;
  }
  var a5 = this.curve.a;
  var tinv = this.curve.tinv;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jyd = jy.redAdd(jy);
  for (i6 = 0; i6 < pow; i6++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c7 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a5.redMul(jz4));
    var t1 = jx.redMul(jyd2);
    var nx = c7.redSqr().redISub(t1.redAdd(t1));
    var t22 = t1.redISub(nx);
    var dny = c7.redMul(t22);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i6 + 1 < pow)
      jz4 = jz4.redMul(jyd4);
    jx = nx;
    jz = nz;
    jyd = dny;
  }
  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl2() {
  if (this.isInfinity())
    return this;
  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  if (this.zOne) {
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var yyyy = yy.redSqr();
    var s5 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s5 = s5.redIAdd(s5);
    var m4 = xx.redAdd(xx).redIAdd(xx);
    var t3 = m4.redSqr().redISub(s5).redISub(s5);
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    nx = t3;
    ny = m4.redMul(s5.redISub(t3)).redISub(yyyy8);
    nz = this.y.redAdd(this.y);
  } else {
    var a5 = this.x.redSqr();
    var b5 = this.y.redSqr();
    var c7 = b5.redSqr();
    var d6 = this.x.redAdd(b5).redSqr().redISub(a5).redISub(c7);
    d6 = d6.redIAdd(d6);
    var e4 = a5.redAdd(a5).redIAdd(a5);
    var f5 = e4.redSqr();
    var c8 = c7.redIAdd(c7);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);
    nx = f5.redISub(d6).redISub(d6);
    ny = e4.redMul(d6.redISub(nx)).redISub(c8);
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  if (this.zOne) {
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var yyyy = yy.redSqr();
    var s5 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s5 = s5.redIAdd(s5);
    var m4 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    var t3 = m4.redSqr().redISub(s5).redISub(s5);
    nx = t3;
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m4.redMul(s5.redISub(t3)).redISub(yyyy8);
    nz = this.y.redAdd(this.y);
  } else {
    var delta = this.z.redSqr();
    var gamma = this.y.redSqr();
    var beta = this.x.redMul(gamma);
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
  var a5 = this.curve.a;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();
  var c7 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a5.redMul(jz4));
  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c7.redSqr().redISub(t1.redAdd(t1));
  var t22 = t1.redISub(nx);
  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c7.redMul(t22).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);
  var xx = this.x.redSqr();
  var yy = this.y.redSqr();
  var zz = this.z.redSqr();
  var yyyy = yy.redSqr();
  var m4 = xx.redAdd(xx).redIAdd(xx);
  var mm = m4.redSqr();
  var e4 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e4 = e4.redIAdd(e4);
  e4 = e4.redAdd(e4).redIAdd(e4);
  e4 = e4.redISub(mm);
  var ee2 = e4.redSqr();
  var t3 = yyyy.redIAdd(yyyy);
  t3 = t3.redIAdd(t3);
  t3 = t3.redIAdd(t3);
  t3 = t3.redIAdd(t3);
  var u4 = m4.redIAdd(e4).redSqr().redISub(mm).redISub(ee2).redISub(t3);
  var yyu4 = yy.redMul(u4);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee2).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  var ny = this.y.redMul(u4.redMul(t3.redISub(u4)).redISub(e4.redMul(ee2)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  var nz = this.z.redAdd(e4).redSqr().redISub(zz).redISub(ee2);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul2(k7, kbase) {
  k7 = new import_bn2.default(k7, kbase);
  return this.curve._wnafMul(this, k7);
};
JPoint.prototype.eq = function eq3(p5) {
  if (p5.type === "affine")
    return this.eq(p5.toJ());
  if (this === p5)
    return true;
  var z22 = this.z.redSqr();
  var pz2 = p5.z.redSqr();
  if (this.x.redMul(pz2).redISub(p5.x.redMul(z22)).cmpn(0) !== 0)
    return false;
  var z32 = z22.redMul(this.z);
  var pz3 = pz2.redMul(p5.z);
  return this.y.redMul(pz3).redISub(p5.y.redMul(z32)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x8) {
  var zs2 = this.z.redSqr();
  var rx = x8.toRed(this.curve.red).redMul(zs2);
  if (this.x.cmp(rx) === 0)
    return true;
  var xc = x8.clone();
  var t3 = this.curve.redN.redMul(zs2);
  for (; ; ) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;
    rx.redIAdd(t3);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};
JPoint.prototype.inspect = function inspect2() {
  if (this.isInfinity())
    return "<EC JPoint Infinity>";
  return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity2() {
  return this.z.cmpn(0) === 0;
};
var curve_1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var curve = exports;
  curve.base = base3;
  curve.short = short_1;
  curve.mont = /*RicMoo:ethers:require(./mont)*/
  null;
  curve.edwards = /*RicMoo:ethers:require(./edwards)*/
  null;
});
var curves_1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var curves = exports;
  var assert2 = utils_1$1.assert;
  function PresetCurve(options) {
    if (options.type === "short")
      this.curve = new curve_1.short(options);
    else if (options.type === "edwards")
      this.curve = new curve_1.edwards(options);
    else
      this.curve = new curve_1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert2(this.g.validate(), "Invalid curve");
    assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
  }
  curves.PresetCurve = PresetCurve;
  function defineCurve(name2, options) {
    Object.defineProperty(curves, name2, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }
  defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
      "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
  });
  defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
      "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
  });
  defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
      "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
  });
  defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: import_hash.default.sha384,
    gRed: false,
    g: [
      "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
      "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
  });
  defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: import_hash.default.sha512,
    gRed: false,
    g: [
      "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
      "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
  });
  defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "9"
    ]
  });
  defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
      // 4/5
      "6666666666666666666666666666666666666666666666666666666666666658"
    ]
  });
  var pre;
  try {
    pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/
    null.crash();
  } catch (e4) {
    pre = void 0;
  }
  defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: import_hash.default.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
      {
        a: "3086d221a7d46bcde86c90e49284eb15",
        b: "-e4437ed6010e88286f547fa90abfe4c3"
      },
      {
        a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
        b: "3086d221a7d46bcde86c90e49284eb15"
      }
    ],
    gRed: false,
    g: [
      "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
      "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
      pre
    ]
  });
});
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
  var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
  minimalisticAssert(
    entropy.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  );
  this._init(entropy, nonce, pers);
}
var hmacDrbg = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);
  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i6 = 0; i6 < this.V.length; i6++) {
    this.K[i6] = 0;
    this.V[i6] = 1;
  }
  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 281474976710656;
};
HmacDRBG.prototype._hmac = function hmac() {
  return new import_hash.default.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;
  this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
  if (typeof entropyEnc !== "string") {
    addEnc = add3;
    add3 = entropyEnc;
    entropyEnc = null;
  }
  entropy = utils_1.toArray(entropy, entropyEnc);
  add3 = utils_1.toArray(add3, addEnc);
  minimalisticAssert(
    entropy.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  );
  this._update(entropy.concat(add3 || []));
  this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error("Reseed is required");
  if (typeof enc !== "string") {
    addEnc = add3;
    add3 = enc;
    enc = null;
  }
  if (add3) {
    add3 = utils_1.toArray(add3, addEnc || "hex");
    this._update(add3);
  }
  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }
  var res = temp.slice(0, len);
  this._update(add3);
  this._reseed++;
  return utils_1.encode(res, enc);
};
var assert$3 = utils_1$1.assert;
function KeyPair(ec2, options) {
  this.ec = ec2;
  this.priv = null;
  this.pub = null;
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
var key = KeyPair;
KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(ec2, {
    pub,
    pubEnc: enc
  });
};
KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;
  return new KeyPair(ec2, {
    priv,
    privEnc: enc
  });
};
KeyPair.prototype.validate = function validate4() {
  var pub = this.getPublic();
  if (pub.isInfinity())
    return { result: false, reason: "Invalid public key" };
  if (!pub.validate())
    return { result: false, reason: "Public key is not a point" };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: "Public key * N != O" };
  return { result: true, reason: null };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (typeof compact === "string") {
    enc = compact;
    compact = null;
  }
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);
  if (!enc)
    return this.pub;
  return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === "hex")
    return this.priv.toString(16, 2);
  else
    return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
  this.priv = new import_bn2.default(key2, enc || 16);
  this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
  if (key2.x || key2.y) {
    if (this.ec.curve.type === "mont") {
      assert$3(key2.x, "Need x coordinate");
    } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
      assert$3(key2.x && key2.y, "Need both x and y coordinate");
    }
    this.pub = this.ec.curve.point(key2.x, key2.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key2, enc);
};
KeyPair.prototype.derive = function derive(pub) {
  if (!pub.validate()) {
    assert$3(pub.validate(), "public point not validated");
  }
  return pub.mul(this.priv).getX();
};
KeyPair.prototype.sign = function sign2(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify2(msg, signature2) {
  return this.ec.verify(msg, signature2, this);
};
KeyPair.prototype.inspect = function inspect3() {
  return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};
var assert$4 = utils_1$1.assert;
function Signature(options, enc) {
  if (options instanceof Signature)
    return options;
  if (this._importDER(options, enc))
    return;
  assert$4(options.r && options.s, "Signature without r or s");
  this.r = new import_bn2.default(options.r, 16);
  this.s = new import_bn2.default(options.s, 16);
  if (options.recoveryParam === void 0)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
var signature = Signature;
function Position() {
  this.place = 0;
}
function getLength(buf, p5) {
  var initial = buf[p5.place++];
  if (!(initial & 128)) {
    return initial;
  }
  var octetLen = initial & 15;
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val = 0;
  for (var i6 = 0, off = p5.place; i6 < octetLen; i6++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }
  if (val <= 127) {
    return false;
  }
  p5.place = off;
  return val;
}
function rmPadding(buf) {
  var i6 = 0;
  var len = buf.length - 1;
  while (!buf[i6] && !(buf[i6 + 1] & 128) && i6 < len) {
    i6++;
  }
  if (i6 === 0) {
    return buf;
  }
  return buf.slice(i6);
}
Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils_1$1.toArray(data, enc);
  var p5 = new Position();
  if (data[p5.place++] !== 48) {
    return false;
  }
  var len = getLength(data, p5);
  if (len === false) {
    return false;
  }
  if (len + p5.place !== data.length) {
    return false;
  }
  if (data[p5.place++] !== 2) {
    return false;
  }
  var rlen = getLength(data, p5);
  if (rlen === false) {
    return false;
  }
  var r6 = data.slice(p5.place, rlen + p5.place);
  p5.place += rlen;
  if (data[p5.place++] !== 2) {
    return false;
  }
  var slen = getLength(data, p5);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p5.place) {
    return false;
  }
  var s5 = data.slice(p5.place, slen + p5.place);
  if (r6[0] === 0) {
    if (r6[1] & 128) {
      r6 = r6.slice(1);
    } else {
      return false;
    }
  }
  if (s5[0] === 0) {
    if (s5[1] & 128) {
      s5 = s5.slice(1);
    } else {
      return false;
    }
  }
  this.r = new import_bn2.default(r6);
  this.s = new import_bn2.default(s5);
  this.recoveryParam = null;
  return true;
};
function constructLength(arr, len) {
  if (len < 128) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 128);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 255);
  }
  arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
  var r6 = this.r.toArray();
  var s5 = this.s.toArray();
  if (r6[0] & 128)
    r6 = [0].concat(r6);
  if (s5[0] & 128)
    s5 = [0].concat(s5);
  r6 = rmPadding(r6);
  s5 = rmPadding(s5);
  while (!s5[0] && !(s5[1] & 128)) {
    s5 = s5.slice(1);
  }
  var arr = [2];
  constructLength(arr, r6.length);
  arr = arr.concat(r6);
  arr.push(2);
  constructLength(arr, s5.length);
  var backHalf = arr.concat(s5);
  var res = [48];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils_1$1.encode(res, enc);
};
var rand = (
  /*RicMoo:ethers:require(brorand)*/
  function() {
    throw new Error("unsupported");
  }
);
var assert$5 = utils_1$1.assert;
function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);
  if (typeof options === "string") {
    assert$5(
      Object.prototype.hasOwnProperty.call(curves_1, options),
      "Unknown curve " + options
    );
    options = curves_1[options];
  }
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);
  this.hash = options.hash || options.curve.hash;
}
var ec = EC;
EC.prototype.keyPair = function keyPair(options) {
  return new key(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return key.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return key.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};
  var drbg = new hmacDrbg({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || "utf8",
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || "utf8",
    nonce: this.n.toArray()
  });
  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new import_bn2.default(2));
  for (; ; ) {
    var priv = new import_bn2.default(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;
    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};
EC.prototype.sign = function sign3(msg, key2, enc, options) {
  if (typeof enc === "object") {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};
  key2 = this.keyFromPrivate(key2, enc);
  msg = this._truncateToN(new import_bn2.default(msg, 16));
  var bytes = this.n.byteLength();
  var bkey = key2.getPrivate().toArray("be", bytes);
  var nonce = msg.toArray("be", bytes);
  var drbg = new hmacDrbg({
    hash: this.hash,
    entropy: bkey,
    nonce,
    pers: options.pers,
    persEnc: options.persEnc || "utf8"
  });
  var ns1 = this.n.sub(new import_bn2.default(1));
  for (var iter = 0; ; iter++) {
    var k7 = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));
    k7 = this._truncateToN(k7, true);
    if (k7.cmpn(1) <= 0 || k7.cmp(ns1) >= 0)
      continue;
    var kp = this.g.mul(k7);
    if (kp.isInfinity())
      continue;
    var kpX = kp.getX();
    var r6 = kpX.umod(this.n);
    if (r6.cmpn(0) === 0)
      continue;
    var s5 = k7.invm(this.n).mul(r6.mul(key2.getPrivate()).iadd(msg));
    s5 = s5.umod(this.n);
    if (s5.cmpn(0) === 0)
      continue;
    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r6) !== 0 ? 2 : 0);
    if (options.canonical && s5.cmp(this.nh) > 0) {
      s5 = this.n.sub(s5);
      recoveryParam ^= 1;
    }
    return new signature({ r: r6, s: s5, recoveryParam });
  }
};
EC.prototype.verify = function verify3(msg, signature$1, key2, enc) {
  msg = this._truncateToN(new import_bn2.default(msg, 16));
  key2 = this.keyFromPublic(key2, enc);
  signature$1 = new signature(signature$1, "hex");
  var r6 = signature$1.r;
  var s5 = signature$1.s;
  if (r6.cmpn(1) < 0 || r6.cmp(this.n) >= 0)
    return false;
  if (s5.cmpn(1) < 0 || s5.cmp(this.n) >= 0)
    return false;
  var sinv = s5.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u22 = sinv.mul(r6).umod(this.n);
  var p5;
  if (!this.curve._maxwellTrick) {
    p5 = this.g.mulAdd(u1, key2.getPublic(), u22);
    if (p5.isInfinity())
      return false;
    return p5.getX().umod(this.n).cmp(r6) === 0;
  }
  p5 = this.g.jmulAdd(u1, key2.getPublic(), u22);
  if (p5.isInfinity())
    return false;
  return p5.eqXToP(r6);
};
EC.prototype.recoverPubKey = function(msg, signature$1, j5, enc) {
  assert$5((3 & j5) === j5, "The recovery param is more than two bits");
  signature$1 = new signature(signature$1, enc);
  var n6 = this.n;
  var e4 = new import_bn2.default(msg);
  var r6 = signature$1.r;
  var s5 = signature$1.s;
  var isYOdd = j5 & 1;
  var isSecondKey = j5 >> 1;
  if (r6.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error("Unable to find sencond key candinate");
  if (isSecondKey)
    r6 = this.curve.pointFromX(r6.add(this.curve.n), isYOdd);
  else
    r6 = this.curve.pointFromX(r6, isYOdd);
  var rInv = signature$1.r.invm(n6);
  var s1 = n6.sub(e4).mul(rInv).umod(n6);
  var s22 = s5.mul(rInv).umod(n6);
  return this.g.mulAdd(s1, r6, s22);
};
EC.prototype.getKeyRecoveryParam = function(e4, signature$1, Q4, enc) {
  signature$1 = new signature(signature$1, enc);
  if (signature$1.recoveryParam !== null)
    return signature$1.recoveryParam;
  for (var i6 = 0; i6 < 4; i6++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e4, signature$1, i6);
    } catch (e5) {
      continue;
    }
    if (Qprime.eq(Q4))
      return i6;
  }
  throw new Error("Unable to find valid recovery factor");
};
var elliptic_1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var elliptic = exports;
  elliptic.version = /*RicMoo:ethers*/
  { version: "6.5.4" }.version;
  elliptic.utils = utils_1$1;
  elliptic.rand = /*RicMoo:ethers:require(brorand)*/
  function() {
    throw new Error("unsupported");
  };
  elliptic.curve = curve_1;
  elliptic.curves = curves_1;
  elliptic.ec = ec;
  elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/
  null;
});
var EC$1 = elliptic_1.ec;

// node_modules/@ethersproject/signing-key/lib.esm/_version.js
var version10 = "signing-key/5.7.0";

// node_modules/@ethersproject/signing-key/lib.esm/index.js
var logger10 = new Logger(version10);
var _curve = null;
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
var SigningKey = class {
  constructor(privateKey) {
    defineReadOnly(this, "curve", "secp256k1");
    defineReadOnly(this, "privateKey", hexlify(privateKey));
    if (hexDataLength(this.privateKey) !== 32) {
      logger10.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
    }
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
    defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
    defineReadOnly(this, "_isSigningKey", true);
  }
  _addPoint(other) {
    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
    const p1 = getCurve().keyFromPublic(arrayify(other));
    return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
  }
  signDigest(digest2) {
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    const digestBytes = arrayify(digest2);
    if (digestBytes.length !== 32) {
      logger10.throwArgumentError("bad digest length", "digest", digest2);
    }
    const signature2 = keyPair2.sign(digestBytes, { canonical: true });
    return splitSignature({
      recoveryParam: signature2.recoveryParam,
      r: hexZeroPad("0x" + signature2.r.toString(16), 32),
      s: hexZeroPad("0x" + signature2.s.toString(16), 32)
    });
  }
  computeSharedSecret(otherKey) {
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
    return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
  }
  static isSigningKey(value) {
    return !!(value && value._isSigningKey);
  }
};
function recoverPublicKey(digest2, signature2) {
  const sig = splitSignature(signature2);
  const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(digest2), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
  const bytes = arrayify(key2);
  if (bytes.length === 32) {
    const signingKey = new SigningKey(bytes);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }
  return logger10.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}

// node_modules/@ethersproject/transactions/lib.esm/_version.js
var version11 = "transactions/5.7.0";

// node_modules/@ethersproject/transactions/lib.esm/index.js
var logger11 = new Logger(version11);
var TransactionTypes;
(function(TransactionTypes2) {
  TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
  TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
  TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
})(TransactionTypes || (TransactionTypes = {}));
function computeAddress(key2) {
  const publicKey = computePublicKey(key2);
  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest2, signature2) {
  return computeAddress(recoverPublicKey(arrayify(digest2), signature2));
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_chacha20poly1305 = __toESM(require_chacha20poly1305());
var import_hkdf = __toESM(require_hkdf());
var import_random2 = __toESM(require_random());
var import_sha256 = __toESM(require_sha256());
var _e = __toESM(require_x25519());

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe2(size = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return globalThis.Buffer.allocUnsafe(size);
  }
  return new Uint8Array(size);
}

// node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe2(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return output;
}

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec2(name2, prefix, encode8, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode8
    },
    decoder: { decode: decode8 }
  };
}
var string2 = createCodec2("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii2 = createCodec2("ascii", "a", (buf) => {
  let string3 = "a";
  for (let i6 = 0; i6 < buf.length; i6++) {
    string3 += String.fromCharCode(buf[i6]);
  }
  return string3;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe2(str.length);
  for (let i6 = 0; i6 < str.length; i6++) {
    buf[i6] = str.charCodeAt(i6);
  }
  return buf;
});
var BASES2 = {
  utf8: string2,
  "utf-8": string2,
  hex: bases.base16,
  latin1: ascii2,
  ascii: ascii2,
  binary: ascii2,
  ...bases
};
var bases_default2 = BASES2;

// node_modules/uint8arrays/esm/src/from-string.js
function fromString3(string3, encoding = "utf8") {
  const base4 = bases_default2[encoding];
  if (!base4) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(string3, "utf8");
  }
  return base4.decoder.decode(`${base4.prefix}${string3}`);
}

// node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base4 = bases_default2[encoding];
  if (!base4) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base4.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_elliptic2 = __toESM(require_elliptic());

// node_modules/@walletconnect/relay-api/dist/index.es.js
var C5 = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/@walletconnect/utils/dist/index.es.js
var H3 = ":";
function re(e4) {
  const [n6, t3] = e4.split(H3);
  return { namespace: n6, reference: t3 };
}
function oe(e4) {
  const [n6, t3, r6] = e4.split(H3);
  return { namespace: n6, reference: t3, address: r6 };
}
function W2(e4, n6) {
  return e4.includes(":") ? [e4] : n6.chains || [];
}
var gt = Object.defineProperty;
var Ke = Object.getOwnPropertySymbols;
var vt = Object.prototype.hasOwnProperty;
var bt = Object.prototype.propertyIsEnumerable;
var Le = (e4, n6, t3) => n6 in e4 ? gt(e4, n6, { enumerable: true, configurable: true, writable: true, value: t3 }) : e4[n6] = t3;
var Fe = (e4, n6) => {
  for (var t3 in n6 || (n6 = {})) vt.call(n6, t3) && Le(e4, t3, n6[t3]);
  if (Ke) for (var t3 of Ke(n6)) bt.call(n6, t3) && Le(e4, t3, n6[t3]);
  return e4;
};
var qe = "ReactNative";
var y6 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var He = "js";
function ce() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function $3() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === qe;
}
function Ot() {
  return $3() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Nt() {
  return $3() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function V2() {
  return !ce() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function A5() {
  return $3() ? y6.reactNative : ce() ? y6.node : V2() ? y6.browser : y6.unknown;
}
function St() {
  var e4;
  try {
    return $3() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (e4 = global.Application) == null ? void 0 : e4.applicationId : void 0;
  } catch {
    return;
  }
}
function We(e4, n6) {
  let t3 = q3.parse(e4);
  return t3 = Fe(Fe({}, t3), n6), e4 = q3.stringify(t3), e4;
}
function $t() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function Je() {
  if (A5() === y6.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: t3, Version: r6 } = global.Platform;
    return [t3, r6].join("-");
  }
  const e4 = detect2();
  if (e4 === null) return "unknown";
  const n6 = e4.os ? e4.os.replace(" ", "").toLowerCase() : "unknown";
  return e4.type === "browser" ? [n6, e4.name, e4.version].join("-") : [n6, e4.version].join("-");
}
function ze() {
  var e4;
  const n6 = A5();
  return n6 === y6.browser ? [n6, ((e4 = (0, import_window_getters.getLocation)()) == null ? void 0 : e4.host) || "unknown"].join(":") : n6;
}
function Ge(e4, n6, t3) {
  const r6 = Je(), o6 = ze();
  return [[e4, n6].join("-"), [He, t3].join("-"), r6, o6].join("/");
}
function It({ protocol: e4, version: n6, relayUrl: t3, sdkVersion: r6, auth: o6, projectId: s5, useOnCloseEvent: i6, bundleId: u4, packageName: l7 }) {
  const c7 = t3.split("?"), d6 = Ge(e4, n6, r6), a5 = { auth: o6, ua: d6, projectId: s5, useOnCloseEvent: i6 || void 0, packageName: l7 || void 0, bundleId: u4 || void 0 }, f5 = We(c7[1] || "", a5);
  return c7[0] + "?" + f5;
}
function R2(e4, n6) {
  return e4.filter((t3) => n6.includes(t3)).length === e4.length;
}
function At(e4) {
  return Object.fromEntries(e4.entries());
}
function Ct(e4) {
  return new Map(Object.entries(e4));
}
function Dt(e4 = import_time3.FIVE_MINUTES, n6) {
  const t3 = (0, import_time3.toMiliseconds)(e4 || import_time3.FIVE_MINUTES);
  let r6, o6, s5, i6;
  return { resolve: (u4) => {
    s5 && r6 && (clearTimeout(s5), r6(u4), i6 = Promise.resolve(u4));
  }, reject: (u4) => {
    s5 && o6 && (clearTimeout(s5), o6(u4));
  }, done: () => new Promise((u4, l7) => {
    if (i6) return u4(i6);
    s5 = setTimeout(() => {
      const c7 = new Error(n6);
      i6 = Promise.reject(c7), l7(c7);
    }, t3), r6 = u4, o6 = l7;
  }) };
}
function xt(e4, n6, t3) {
  return new Promise(async (r6, o6) => {
    const s5 = setTimeout(() => o6(new Error(t3)), n6);
    try {
      const i6 = await e4;
      r6(i6);
    } catch (i6) {
      o6(i6);
    }
    clearTimeout(s5);
  });
}
function ae(e4, n6) {
  if (typeof n6 == "string" && n6.startsWith(`${e4}:`)) return n6;
  if (e4.toLowerCase() === "topic") {
    if (typeof n6 != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${n6}`;
  } else if (e4.toLowerCase() === "id") {
    if (typeof n6 != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${n6}`;
  }
  throw new Error(`Unknown expirer target type: ${e4}`);
}
function Vt(e4) {
  return ae("topic", e4);
}
function Mt(e4) {
  return ae("id", e4);
}
function Kt(e4) {
  const [n6, t3] = e4.split(":"), r6 = { id: void 0, topic: void 0 };
  if (n6 === "topic" && typeof t3 == "string") r6.topic = t3;
  else if (n6 === "id" && Number.isInteger(Number(t3))) r6.id = Number(t3);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${n6}:${t3}`);
  return r6;
}
function Lt(e4, n6) {
  return (0, import_time3.fromMiliseconds)((n6 || Date.now()) + (0, import_time3.toMiliseconds)(e4));
}
function Ft(e4) {
  return Date.now() >= (0, import_time3.toMiliseconds)(e4);
}
function qt(e4, n6) {
  return `${e4}${n6 ? `:${n6}` : ""}`;
}
function N10(e4 = [], n6 = []) {
  return [.../* @__PURE__ */ new Set([...e4, ...n6])];
}
async function Bt({ id: e4, topic: n6, wcDeepLink: t3 }) {
  var r6;
  try {
    if (!t3) return;
    const o6 = typeof t3 == "string" ? JSON.parse(t3) : t3, s5 = o6 == null ? void 0 : o6.href;
    if (typeof s5 != "string") return;
    const i6 = Xe(s5, e4, n6), u4 = A5();
    if (u4 === y6.browser) {
      if (!((r6 = (0, import_window_getters.getDocument)()) != null && r6.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      i6.startsWith("https://") || i6.startsWith("http://") ? window.open(i6, "_blank", "noreferrer noopener") : window.open(i6, en() ? "_blank" : "_self", "noreferrer noopener");
    } else u4 === y6.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i6);
  } catch (o6) {
    console.error(o6);
  }
}
function Xe(e4, n6, t3) {
  const r6 = `requestId=${n6}&sessionTopic=${t3}`;
  e4.endsWith("/") && (e4 = e4.slice(0, -1));
  let o6 = `${e4}`;
  if (e4.startsWith("https://t.me")) {
    const s5 = e4.includes("?") ? "&startapp=" : "?startapp=";
    o6 = `${o6}${s5}${nn(r6, true)}`;
  } else o6 = `${o6}/wc?${r6}`;
  return o6;
}
async function Ht(e4, n6) {
  let t3 = "";
  try {
    if (V2() && (t3 = localStorage.getItem(n6), t3)) return t3;
    t3 = await e4.getItem(n6);
  } catch (r6) {
    console.error(r6);
  }
  return t3;
}
function Wt(e4, n6) {
  if (!e4.includes(n6)) return null;
  const t3 = e4.split(/([&,?,=])/), r6 = t3.indexOf(n6);
  return t3[r6 + 2];
}
function Jt() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (e4) => {
    const n6 = Math.random() * 16 | 0;
    return (e4 === "x" ? n6 : n6 & 3 | 8).toString(16);
  });
}
function zt() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function en() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function nn(e4, n6 = false) {
  const t3 = Buffer.from(e4).toString("base64");
  return n6 ? t3.replace(/[=]/g, "") : t3;
}
function le(e4) {
  return Buffer.from(e4, "base64").toString("utf-8");
}
function Gt(e4) {
  return new Promise((n6) => setTimeout(n6, e4));
}
var Yt = "https://rpc.walletconnect.org/v1";
async function tn(e4, n6, t3, r6, o6, s5) {
  switch (t3.t) {
    case "eip191":
      return rn(e4, n6, t3.s);
    case "eip1271":
      return await on(e4, n6, t3.s, r6, o6, s5);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${t3.t}`);
  }
}
function rn(e4, n6, t3) {
  return recoverAddress(hashMessage(n6), t3).toLowerCase() === e4.toLowerCase();
}
async function on(e4, n6, t3, r6, o6, s5) {
  const i6 = re(r6);
  if (!i6.namespace || !i6.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r6}`);
  try {
    const u4 = "0x1626ba7e", l7 = "0000000000000000000000000000000000000000000000000000000000000040", c7 = "0000000000000000000000000000000000000000000000000000000000000041", d6 = t3.substring(2), a5 = hashMessage(n6).substring(2), f5 = u4 + a5 + l7 + c7 + d6, h7 = await fetch(`${s5 || Yt}/?chainId=${r6}&projectId=${o6}`, { method: "POST", body: JSON.stringify({ id: Qt(), jsonrpc: "2.0", method: "eth_call", params: [{ to: e4, data: f5 }, "latest"] }) }), { result: p5 } = await h7.json();
    return p5 ? p5.slice(0, u4.length).toLowerCase() === u4.toLowerCase() : false;
  } catch (u4) {
    return console.error("isValidEip1271Signature: ", u4), false;
  }
}
function Qt() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
var Zt = Object.defineProperty;
var Xt = Object.defineProperties;
var er = Object.getOwnPropertyDescriptors;
var sn = Object.getOwnPropertySymbols;
var nr = Object.prototype.hasOwnProperty;
var tr = Object.prototype.propertyIsEnumerable;
var cn = (e4, n6, t3) => n6 in e4 ? Zt(e4, n6, { enumerable: true, configurable: true, writable: true, value: t3 }) : e4[n6] = t3;
var de = (e4, n6) => {
  for (var t3 in n6 || (n6 = {})) nr.call(n6, t3) && cn(e4, t3, n6[t3]);
  if (sn) for (var t3 of sn(n6)) tr.call(n6, t3) && cn(e4, t3, n6[t3]);
  return e4;
};
var an = (e4, n6) => Xt(e4, er(n6));
var rr = "did:pkh:";
var z5 = (e4) => e4 == null ? void 0 : e4.split(":");
var un = (e4) => {
  const n6 = e4 && z5(e4);
  if (n6) return e4.includes(rr) ? n6[3] : n6[1];
};
var ln = (e4) => {
  const n6 = e4 && z5(e4);
  if (n6) return n6[2] + ":" + n6[3];
};
var fe = (e4) => {
  const n6 = e4 && z5(e4);
  if (n6) return n6.pop();
};
async function or2(e4) {
  const { cacao: n6, projectId: t3 } = e4, { s: r6, p: o6 } = n6, s5 = dn(o6, o6.iss), i6 = fe(o6.iss);
  return await tn(i6, s5, r6, ln(o6.iss), t3);
}
var dn = (e4, n6) => {
  const t3 = `${e4.domain} wants you to sign in with your Ethereum account:`, r6 = fe(n6);
  if (!e4.aud && !e4.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o6 = e4.statement || void 0;
  const s5 = `URI: ${e4.aud || e4.uri}`, i6 = `Version: ${e4.version}`, u4 = `Chain ID: ${un(n6)}`, l7 = `Nonce: ${e4.nonce}`, c7 = `Issued At: ${e4.iat}`, d6 = e4.exp ? `Expiration Time: ${e4.exp}` : void 0, a5 = e4.nbf ? `Not Before: ${e4.nbf}` : void 0, f5 = e4.requestId ? `Request ID: ${e4.requestId}` : void 0, h7 = e4.resources ? `Resources:${e4.resources.map((m4) => `
- ${m4}`).join("")}` : void 0, p5 = Y2(e4.resources);
  if (p5) {
    const m4 = I4(p5);
    o6 = he(o6, m4);
  }
  return [t3, r6, "", o6, "", s5, i6, u4, l7, c7, d6, a5, f5, h7].filter((m4) => m4 != null).join(`
`);
};
function hn(e4) {
  return Buffer.from(JSON.stringify(e4)).toString("base64");
}
function yn(e4) {
  return JSON.parse(Buffer.from(e4, "base64").toString("utf-8"));
}
function O4(e4) {
  if (!e4) throw new Error("No recap provided, value is undefined");
  if (!e4.att) throw new Error("No `att` property found");
  const n6 = Object.keys(e4.att);
  if (!(n6 != null && n6.length)) throw new Error("No resources found in `att` property");
  n6.forEach((t3) => {
    const r6 = e4.att[t3];
    if (Array.isArray(r6)) throw new Error(`Resource must be an object: ${t3}`);
    if (typeof r6 != "object") throw new Error(`Resource must be an object: ${t3}`);
    if (!Object.keys(r6).length) throw new Error(`Resource object is empty: ${t3}`);
    Object.keys(r6).forEach((o6) => {
      const s5 = r6[o6];
      if (!Array.isArray(s5)) throw new Error(`Ability limits ${o6} must be an array of objects, found: ${s5}`);
      if (!s5.length) throw new Error(`Value of ${o6} is empty array, must be an array with objects`);
      s5.forEach((i6) => {
        if (typeof i6 != "object") throw new Error(`Ability limits (${o6}) must be an array of objects, found: ${i6}`);
      });
    });
  });
}
function gn(e4, n6, t3, r6 = {}) {
  return t3 == null ? void 0 : t3.sort((o6, s5) => o6.localeCompare(s5)), { att: { [e4]: pe(n6, t3, r6) } };
}
function pe(e4, n6, t3 = {}) {
  n6 = n6 == null ? void 0 : n6.sort((o6, s5) => o6.localeCompare(s5));
  const r6 = n6.map((o6) => ({ [`${e4}/${o6}`]: [t3] }));
  return Object.assign({}, ...r6);
}
function G2(e4) {
  return O4(e4), `urn:recap:${hn(e4).replace(/=/g, "")}`;
}
function I4(e4) {
  const n6 = yn(e4.replace("urn:recap:", ""));
  return O4(n6), n6;
}
function ur(e4, n6, t3) {
  const r6 = gn(e4, n6, t3);
  return G2(r6);
}
function me(e4) {
  return e4 && e4.includes("urn:recap:");
}
function lr(e4, n6) {
  const t3 = I4(e4), r6 = I4(n6), o6 = bn(t3, r6);
  return G2(o6);
}
function bn(e4, n6) {
  O4(e4), O4(n6);
  const t3 = Object.keys(e4.att).concat(Object.keys(n6.att)).sort((o6, s5) => o6.localeCompare(s5)), r6 = { att: {} };
  return t3.forEach((o6) => {
    var s5, i6;
    Object.keys(((s5 = e4.att) == null ? void 0 : s5[o6]) || {}).concat(Object.keys(((i6 = n6.att) == null ? void 0 : i6[o6]) || {})).sort((u4, l7) => u4.localeCompare(l7)).forEach((u4) => {
      var l7, c7;
      r6.att[o6] = an(de({}, r6.att[o6]), { [u4]: ((l7 = e4.att[o6]) == null ? void 0 : l7[u4]) || ((c7 = n6.att[o6]) == null ? void 0 : c7[u4]) });
    });
  }), r6;
}
function he(e4 = "", n6) {
  O4(n6);
  const t3 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (e4.includes(t3)) return e4;
  const r6 = [];
  let o6 = 0;
  Object.keys(n6.att).forEach((u4) => {
    const l7 = Object.keys(n6.att[u4]).map((a5) => ({ ability: a5.split("/")[0], action: a5.split("/")[1] }));
    l7.sort((a5, f5) => a5.action.localeCompare(f5.action));
    const c7 = {};
    l7.forEach((a5) => {
      c7[a5.ability] || (c7[a5.ability] = []), c7[a5.ability].push(a5.action);
    });
    const d6 = Object.keys(c7).map((a5) => (o6++, `(${o6}) '${a5}': '${c7[a5].join("', '")}' for '${u4}'.`));
    r6.push(d6.join(", ").replace(".,", "."));
  });
  const s5 = r6.join(" "), i6 = `${t3}${s5}`;
  return `${e4 ? e4 + " " : ""}${i6}`;
}
function dr(e4) {
  var n6;
  const t3 = I4(e4);
  O4(t3);
  const r6 = (n6 = t3.att) == null ? void 0 : n6.eip155;
  return r6 ? Object.keys(r6).map((o6) => o6.split("/")[1]) : [];
}
function fr(e4) {
  const n6 = I4(e4);
  O4(n6);
  const t3 = [];
  return Object.values(n6.att).forEach((r6) => {
    Object.values(r6).forEach((o6) => {
      var s5;
      (s5 = o6 == null ? void 0 : o6[0]) != null && s5.chains && t3.push(o6[0].chains);
    });
  }), [...new Set(t3.flat())];
}
function Y2(e4) {
  if (!e4) return;
  const n6 = e4 == null ? void 0 : e4[e4.length - 1];
  return me(n6) ? n6 : void 0;
}
var ye = "base10";
var g5 = "base16";
var ge = "base64pad";
var pr = "base64url";
var k5 = "utf8";
var ve = 0;
var D4 = 1;
var M4 = 2;
var mr = 0;
var wn = 1;
var K3 = 12;
var be = 32;
function hr() {
  const e4 = _e.generateKeyPair();
  return { privateKey: toString3(e4.secretKey, g5), publicKey: toString3(e4.publicKey, g5) };
}
function yr() {
  const e4 = (0, import_random2.randomBytes)(be);
  return toString3(e4, g5);
}
function gr(e4, n6) {
  const t3 = _e.sharedKey(fromString3(e4, g5), fromString3(n6, g5), true), r6 = new import_hkdf.HKDF(import_sha256.SHA256, t3).expand(be);
  return toString3(r6, g5);
}
function vr(e4) {
  const n6 = (0, import_sha256.hash)(fromString3(e4, g5));
  return toString3(n6, g5);
}
function br(e4) {
  const n6 = (0, import_sha256.hash)(fromString3(e4, k5));
  return toString3(n6, g5);
}
function Ee(e4) {
  return fromString3(`${e4}`, ye);
}
function C6(e4) {
  return Number(toString3(e4, ye));
}
function Er(e4) {
  const n6 = Ee(typeof e4.type < "u" ? e4.type : ve);
  if (C6(n6) === D4 && typeof e4.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const t3 = typeof e4.senderPublicKey < "u" ? fromString3(e4.senderPublicKey, g5) : void 0, r6 = typeof e4.iv < "u" ? fromString3(e4.iv, g5) : (0, import_random2.randomBytes)(K3), o6 = new import_chacha20poly1305.ChaCha20Poly1305(fromString3(e4.symKey, g5)).seal(r6, fromString3(e4.message, k5));
  return we({ type: n6, sealed: o6, iv: r6, senderPublicKey: t3, encoding: e4.encoding });
}
function wr(e4, n6) {
  const t3 = Ee(M4), r6 = (0, import_random2.randomBytes)(K3), o6 = fromString3(e4, k5);
  return we({ type: t3, sealed: o6, iv: r6, encoding: n6 });
}
function Or(e4) {
  const n6 = new import_chacha20poly1305.ChaCha20Poly1305(fromString3(e4.symKey, g5)), { sealed: t3, iv: r6 } = Q2({ encoded: e4.encoded, encoding: e4 == null ? void 0 : e4.encoding }), o6 = n6.open(r6, t3);
  if (o6 === null) throw new Error("Failed to decrypt");
  return toString3(o6, k5);
}
function Nr(e4, n6) {
  const { sealed: t3 } = Q2({ encoded: e4, encoding: n6 });
  return toString3(t3, k5);
}
function we(e4) {
  const { encoding: n6 = ge } = e4;
  if (C6(e4.type) === M4) return toString3(concat3([e4.type, e4.sealed]), n6);
  if (C6(e4.type) === D4) {
    if (typeof e4.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat3([e4.type, e4.senderPublicKey, e4.iv, e4.sealed]), n6);
  }
  return toString3(concat3([e4.type, e4.iv, e4.sealed]), n6);
}
function Q2(e4) {
  const { encoded: n6, encoding: t3 = ge } = e4, r6 = fromString3(n6, t3), o6 = r6.slice(mr, wn), s5 = wn;
  if (C6(o6) === D4) {
    const c7 = s5 + be, d6 = c7 + K3, a5 = r6.slice(s5, c7), f5 = r6.slice(c7, d6), h7 = r6.slice(d6);
    return { type: o6, sealed: h7, iv: f5, senderPublicKey: a5 };
  }
  if (C6(o6) === M4) {
    const c7 = r6.slice(s5), d6 = (0, import_random2.randomBytes)(K3);
    return { type: o6, sealed: c7, iv: d6 };
  }
  const i6 = s5 + K3, u4 = r6.slice(s5, i6), l7 = r6.slice(i6);
  return { type: o6, sealed: l7, iv: u4 };
}
function Sr(e4, n6) {
  const t3 = Q2({ encoded: e4, encoding: n6 == null ? void 0 : n6.encoding });
  return On({ type: C6(t3.type), senderPublicKey: typeof t3.senderPublicKey < "u" ? toString3(t3.senderPublicKey, g5) : void 0, receiverPublicKey: n6 == null ? void 0 : n6.receiverPublicKey });
}
function On(e4) {
  const n6 = (e4 == null ? void 0 : e4.type) || ve;
  if (n6 === D4) {
    if (typeof (e4 == null ? void 0 : e4.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (e4 == null ? void 0 : e4.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: n6, senderPublicKey: e4 == null ? void 0 : e4.senderPublicKey, receiverPublicKey: e4 == null ? void 0 : e4.receiverPublicKey };
}
function $r(e4) {
  return e4.type === D4 && typeof e4.senderPublicKey == "string" && typeof e4.receiverPublicKey == "string";
}
function Rr(e4) {
  return e4.type === M4;
}
function Nn(e4) {
  return new import_elliptic2.ec("p256").keyFromPublic({ x: Buffer.from(e4.x, "base64").toString("hex"), y: Buffer.from(e4.y, "base64").toString("hex") }, "hex");
}
function Ir(e4) {
  let n6 = e4.replace(/-/g, "+").replace(/_/g, "/");
  const t3 = n6.length % 4;
  return t3 > 0 && (n6 += "=".repeat(4 - t3)), n6;
}
function Pr(e4) {
  return Buffer.from(Ir(e4), "base64");
}
function jr(e4, n6) {
  const [t3, r6, o6] = e4.split("."), s5 = Pr(o6);
  if (s5.length !== 64) throw new Error("Invalid signature length");
  const i6 = s5.slice(0, 32).toString("hex"), u4 = s5.slice(32, 64).toString("hex"), l7 = `${t3}.${r6}`, c7 = new import_sha256.SHA256().update(Buffer.from(l7)).digest(), d6 = Nn(n6), a5 = Buffer.from(c7).toString("hex");
  if (!d6.verify(a5, { r: i6, s: u4 })) throw new Error("Invalid signature");
  return decodeJWT(e4).payload;
}
var Sn = "irn";
function Tr(e4) {
  return (e4 == null ? void 0 : e4.relay) || { protocol: Sn };
}
function Ar(e4) {
  const n6 = C5[e4];
  if (typeof n6 > "u") throw new Error(`Relay Protocol not supported: ${e4}`);
  return n6;
}
var Cr = Object.defineProperty;
var Ur = Object.defineProperties;
var _r = Object.getOwnPropertyDescriptors;
var $n = Object.getOwnPropertySymbols;
var kr = Object.prototype.hasOwnProperty;
var Dr = Object.prototype.propertyIsEnumerable;
var Rn = (e4, n6, t3) => n6 in e4 ? Cr(e4, n6, { enumerable: true, configurable: true, writable: true, value: t3 }) : e4[n6] = t3;
var In = (e4, n6) => {
  for (var t3 in n6 || (n6 = {})) kr.call(n6, t3) && Rn(e4, t3, n6[t3]);
  if ($n) for (var t3 of $n(n6)) Dr.call(n6, t3) && Rn(e4, t3, n6[t3]);
  return e4;
};
var xr = (e4, n6) => Ur(e4, _r(n6));
function Pn(e4, n6 = "-") {
  const t3 = {}, r6 = "relay" + n6;
  return Object.keys(e4).forEach((o6) => {
    if (o6.startsWith(r6)) {
      const s5 = o6.replace(r6, ""), i6 = e4[o6];
      t3[s5] = i6;
    }
  }), t3;
}
function Vr(e4) {
  if (!e4.includes("wc:")) {
    const l7 = le(e4);
    l7 != null && l7.includes("wc:") && (e4 = l7);
  }
  e4 = e4.includes("wc://") ? e4.replace("wc://", "") : e4, e4 = e4.includes("wc:") ? e4.replace("wc:", "") : e4;
  const n6 = e4.indexOf(":"), t3 = e4.indexOf("?") !== -1 ? e4.indexOf("?") : void 0, r6 = e4.substring(0, n6), o6 = e4.substring(n6 + 1, t3).split("@"), s5 = typeof t3 < "u" ? e4.substring(t3) : "", i6 = q3.parse(s5), u4 = typeof i6.methods == "string" ? i6.methods.split(",") : void 0;
  return { protocol: r6, topic: jn(o6[0]), version: parseInt(o6[1], 10), symKey: i6.symKey, relay: Pn(i6), methods: u4, expiryTimestamp: i6.expiryTimestamp ? parseInt(i6.expiryTimestamp, 10) : void 0 };
}
function jn(e4) {
  return e4.startsWith("//") ? e4.substring(2) : e4;
}
function Tn(e4, n6 = "-") {
  const t3 = "relay", r6 = {};
  return Object.keys(e4).forEach((o6) => {
    const s5 = t3 + n6 + o6;
    e4[o6] && (r6[s5] = e4[o6]);
  }), r6;
}
function Mr(e4) {
  return `${e4.protocol}:${e4.topic}@${e4.version}?` + q3.stringify(In(xr(In({ symKey: e4.symKey }, Tn(e4.relay)), { expiryTimestamp: e4.expiryTimestamp }), e4.methods ? { methods: e4.methods.join(",") } : {}));
}
function Kr(e4, n6, t3) {
  return `${e4}?wc_ev=${t3}&topic=${n6}`;
}
function U3(e4) {
  const n6 = [];
  return e4.forEach((t3) => {
    const [r6, o6] = t3.split(":");
    n6.push(`${r6}:${o6}`);
  }), n6;
}
function Un(e4) {
  const n6 = [];
  return Object.values(e4).forEach((t3) => {
    n6.push(...U3(t3.accounts));
  }), n6;
}
function _n(e4, n6) {
  const t3 = [];
  return Object.values(e4).forEach((r6) => {
    U3(r6.accounts).includes(n6) && t3.push(...r6.methods);
  }), t3;
}
function kn(e4, n6) {
  const t3 = [];
  return Object.values(e4).forEach((r6) => {
    U3(r6.accounts).includes(n6) && t3.push(...r6.events);
  }), t3;
}
function xn(e4) {
  const n6 = {};
  return e4 == null ? void 0 : e4.forEach((t3) => {
    const [r6, o6] = t3.split(":");
    n6[r6] || (n6[r6] = { accounts: [], chains: [], events: [] }), n6[r6].accounts.push(t3), n6[r6].chains.push(`${r6}:${o6}`);
  }), n6;
}
function Yr(e4, n6) {
  n6 = n6.map((r6) => r6.replace("did:pkh:", ""));
  const t3 = xn(n6);
  for (const [r6, o6] of Object.entries(t3)) o6.methods ? o6.methods = N10(o6.methods, e4) : o6.methods = e4, o6.events = ["chainChanged", "accountsChanged"];
  return t3;
}
var Vn = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var Mn = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function S4(e4, n6) {
  const { message: t3, code: r6 } = Mn[e4];
  return { message: n6 ? `${t3} ${n6}` : t3, code: r6 };
}
function _6(e4, n6) {
  const { message: t3, code: r6 } = Vn[e4];
  return { message: n6 ? `${t3} ${n6}` : t3, code: r6 };
}
function L4(e4, n6) {
  return Array.isArray(e4) ? typeof n6 < "u" && e4.length ? e4.every(n6) : true : false;
}
function Z2(e4) {
  return Object.getPrototypeOf(e4) === Object.prototype && Object.keys(e4).length;
}
function P3(e4) {
  return typeof e4 > "u";
}
function b3(e4, n6) {
  return n6 && P3(e4) ? true : typeof e4 == "string" && !!e4.trim().length;
}
function X2(e4, n6) {
  return n6 && P3(e4) ? true : typeof e4 == "number" && !isNaN(e4);
}
function Qr(e4, n6) {
  const { requiredNamespaces: t3 } = n6, r6 = Object.keys(e4.namespaces), o6 = Object.keys(t3);
  let s5 = true;
  return R2(o6, r6) ? (r6.forEach((i6) => {
    const { accounts: u4, methods: l7, events: c7 } = e4.namespaces[i6], d6 = U3(u4), a5 = t3[i6];
    (!R2(W2(i6, a5), d6) || !R2(a5.methods, l7) || !R2(a5.events, c7)) && (s5 = false);
  }), s5) : false;
}
function F3(e4) {
  return b3(e4, false) && e4.includes(":") ? e4.split(":").length === 2 : false;
}
function Kn(e4) {
  if (b3(e4, false) && e4.includes(":")) {
    const n6 = e4.split(":");
    if (n6.length === 3) {
      const t3 = n6[0] + ":" + n6[1];
      return !!n6[2] && F3(t3);
    }
  }
  return false;
}
function Zr(e4) {
  function n6(t3) {
    try {
      return typeof new URL(t3) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (b3(e4, false)) {
      if (n6(e4)) return true;
      const t3 = le(e4);
      return n6(t3);
    }
  } catch {
  }
  return false;
}
function Xr(e4) {
  var n6;
  return (n6 = e4 == null ? void 0 : e4.proposer) == null ? void 0 : n6.publicKey;
}
function eo(e4) {
  return e4 == null ? void 0 : e4.topic;
}
function no(e4, n6) {
  let t3 = null;
  return b3(e4 == null ? void 0 : e4.publicKey, false) || (t3 = S4("MISSING_OR_INVALID", `${n6} controller public key should be a string`)), t3;
}
function Se(e4) {
  let n6 = true;
  return L4(e4) ? e4.length && (n6 = e4.every((t3) => b3(t3, false))) : n6 = false, n6;
}
function Ln(e4, n6, t3) {
  let r6 = null;
  return L4(n6) && n6.length ? n6.forEach((o6) => {
    r6 || F3(o6) || (r6 = _6("UNSUPPORTED_CHAINS", `${t3}, chain ${o6} should be a string and conform to "namespace:chainId" format`));
  }) : F3(e4) || (r6 = _6("UNSUPPORTED_CHAINS", `${t3}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r6;
}
function Fn(e4, n6, t3) {
  let r6 = null;
  return Object.entries(e4).forEach(([o6, s5]) => {
    if (r6) return;
    const i6 = Ln(o6, W2(o6, s5), `${n6} ${t3}`);
    i6 && (r6 = i6);
  }), r6;
}
function qn(e4, n6) {
  let t3 = null;
  return L4(e4) ? e4.forEach((r6) => {
    t3 || Kn(r6) || (t3 = _6("UNSUPPORTED_ACCOUNTS", `${n6}, account ${r6} should be a string and conform to "namespace:chainId:address" format`));
  }) : t3 = _6("UNSUPPORTED_ACCOUNTS", `${n6}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), t3;
}
function Bn(e4, n6) {
  let t3 = null;
  return Object.values(e4).forEach((r6) => {
    if (t3) return;
    const o6 = qn(r6 == null ? void 0 : r6.accounts, `${n6} namespace`);
    o6 && (t3 = o6);
  }), t3;
}
function Hn(e4, n6) {
  let t3 = null;
  return Se(e4 == null ? void 0 : e4.methods) ? Se(e4 == null ? void 0 : e4.events) || (t3 = _6("UNSUPPORTED_EVENTS", `${n6}, events should be an array of strings or empty array for no events`)) : t3 = _6("UNSUPPORTED_METHODS", `${n6}, methods should be an array of strings or empty array for no methods`), t3;
}
function $e(e4, n6) {
  let t3 = null;
  return Object.values(e4).forEach((r6) => {
    if (t3) return;
    const o6 = Hn(r6, `${n6}, namespace`);
    o6 && (t3 = o6);
  }), t3;
}
function to(e4, n6, t3) {
  let r6 = null;
  if (e4 && Z2(e4)) {
    const o6 = $e(e4, n6);
    o6 && (r6 = o6);
    const s5 = Fn(e4, n6, t3);
    s5 && (r6 = s5);
  } else r6 = S4("MISSING_OR_INVALID", `${n6}, ${t3} should be an object with data`);
  return r6;
}
function Wn(e4, n6) {
  let t3 = null;
  if (e4 && Z2(e4)) {
    const r6 = $e(e4, n6);
    r6 && (t3 = r6);
    const o6 = Bn(e4, n6);
    o6 && (t3 = o6);
  } else t3 = S4("MISSING_OR_INVALID", `${n6}, namespaces should be an object with data`);
  return t3;
}
function Jn(e4) {
  return b3(e4.protocol, true);
}
function ro(e4, n6) {
  let t3 = false;
  return n6 && !e4 ? t3 = true : e4 && L4(e4) && e4.length && e4.forEach((r6) => {
    t3 = Jn(r6);
  }), t3;
}
function oo(e4) {
  return typeof e4 == "number";
}
function so(e4) {
  return typeof e4 < "u" && typeof e4 !== null;
}
function io(e4) {
  return !(!e4 || typeof e4 != "object" || !e4.code || !X2(e4.code, false) || !e4.message || !b3(e4.message, false));
}
function co(e4) {
  return !(P3(e4) || !b3(e4.method, false));
}
function ao(e4) {
  return !(P3(e4) || P3(e4.result) && P3(e4.error) || !X2(e4.id, false) || !b3(e4.jsonrpc, false));
}
function uo(e4) {
  return !(P3(e4) || !b3(e4.name, false));
}
function lo(e4, n6) {
  return !(!F3(n6) || !Un(e4).includes(n6));
}
function fo(e4, n6, t3) {
  return b3(t3, false) ? _n(e4, n6).includes(t3) : false;
}
function po(e4, n6, t3) {
  return b3(t3, false) ? kn(e4, n6).includes(t3) : false;
}
function zn(e4, n6, t3) {
  let r6 = null;
  const o6 = mo(e4), s5 = ho(n6), i6 = Object.keys(o6), u4 = Object.keys(s5), l7 = Gn(Object.keys(e4)), c7 = Gn(Object.keys(n6)), d6 = l7.filter((a5) => !c7.includes(a5));
  return d6.length && (r6 = S4("NON_CONFORMING_NAMESPACES", `${t3} namespaces keys don't satisfy requiredNamespaces.
      Required: ${d6.toString()}
      Received: ${Object.keys(n6).toString()}`)), R2(i6, u4) || (r6 = S4("NON_CONFORMING_NAMESPACES", `${t3} namespaces chains don't satisfy required namespaces.
      Required: ${i6.toString()}
      Approved: ${u4.toString()}`)), Object.keys(n6).forEach((a5) => {
    if (!a5.includes(":") || r6) return;
    const f5 = U3(n6[a5].accounts);
    f5.includes(a5) || (r6 = S4("NON_CONFORMING_NAMESPACES", `${t3} namespaces accounts don't satisfy namespace accounts for ${a5}
        Required: ${a5}
        Approved: ${f5.toString()}`));
  }), i6.forEach((a5) => {
    r6 || (R2(o6[a5].methods, s5[a5].methods) ? R2(o6[a5].events, s5[a5].events) || (r6 = S4("NON_CONFORMING_NAMESPACES", `${t3} namespaces events don't satisfy namespace events for ${a5}`)) : r6 = S4("NON_CONFORMING_NAMESPACES", `${t3} namespaces methods don't satisfy namespace methods for ${a5}`));
  }), r6;
}
function mo(e4) {
  const n6 = {};
  return Object.keys(e4).forEach((t3) => {
    var r6;
    t3.includes(":") ? n6[t3] = e4[t3] : (r6 = e4[t3].chains) == null || r6.forEach((o6) => {
      n6[o6] = { methods: e4[t3].methods, events: e4[t3].events };
    });
  }), n6;
}
function Gn(e4) {
  return [...new Set(e4.map((n6) => n6.includes(":") ? n6.split(":")[0] : n6))];
}
function ho(e4) {
  const n6 = {};
  return Object.keys(e4).forEach((t3) => {
    if (t3.includes(":")) n6[t3] = e4[t3];
    else {
      const r6 = U3(e4[t3].accounts);
      r6 == null ? void 0 : r6.forEach((o6) => {
        n6[o6] = { accounts: e4[t3].accounts.filter((s5) => s5.includes(`${o6}:`)), methods: e4[t3].methods, events: e4[t3].events };
      });
    }
  }), n6;
}
function yo(e4, n6) {
  return X2(e4, false) && e4 <= n6.max && e4 >= n6.min;
}
function go() {
  const e4 = A5();
  return new Promise((n6) => {
    switch (e4) {
      case y6.browser:
        n6(Yn());
        break;
      case y6.reactNative:
        n6(Qn());
        break;
      case y6.node:
        n6(Zn());
        break;
      default:
        n6(true);
    }
  });
}
function Yn() {
  return V2() && (navigator == null ? void 0 : navigator.onLine);
}
async function Qn() {
  if ($3() && typeof global < "u" && global != null && global.NetInfo) {
    const e4 = await (global == null ? void 0 : global.NetInfo.fetch());
    return e4 == null ? void 0 : e4.isConnected;
  }
  return true;
}
function Zn() {
  return true;
}
function vo(e4) {
  switch (A5()) {
    case y6.browser:
      Xn(e4);
      break;
    case y6.reactNative:
      et(e4);
      break;
    case y6.node:
      break;
  }
}
function Xn(e4) {
  !$3() && V2() && (window.addEventListener("online", () => e4(true)), window.addEventListener("offline", () => e4(false)));
}
function et(e4) {
  $3() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((n6) => e4(n6 == null ? void 0 : n6.isConnected)));
}
var Re = {};
var bo = class {
  static get(n6) {
    return Re[n6];
  }
  static set(n6, t3) {
    Re[n6] = t3;
  }
  static delete(n6) {
    delete Re[n6];
  }
};

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events5 = __toESM(require_events());

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports3 = {};
__export(esm_exports3, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n5,
  IEvents: () => e3,
  IJsonRpcConnection: () => o4,
  IJsonRpcProvider: () => r5,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e4) => e4.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e4, url, type) {
  return e4.message.includes("getaddrinfo ENOTFOUND") || e4.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e4;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs8());
__reExport(env_exports, __toESM(require_cjs8()));
var isNodeJs = import_environment.isNode;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports3, env_exports);

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id2) {
  return {
    id: id2 || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id2, result) {
  return {
    id: id2,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id2, error, data) {
  return {
    id: id2,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x8) => x8.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e3 = class {
};
var o4 = class extends e3 {
  constructor(c7) {
    super();
  }
};
var n5 = class extends e3 {
  constructor() {
    super();
  }
};
var r5 = class extends n5 {
  constructor(c7) {
    super();
  }
};

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o5 = class extends r5 {
  constructor(t3) {
    super(t3), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t3), this.connection.connected && this.registerEventListeners();
  }
  async connect(t3 = this.connection) {
    await this.open(t3);
  }
  async disconnect() {
    await this.close();
  }
  on(t3, e4) {
    this.events.on(t3, e4);
  }
  once(t3, e4) {
    this.events.once(t3, e4);
  }
  off(t3, e4) {
    this.events.off(t3, e4);
  }
  removeListener(t3, e4) {
    this.events.removeListener(t3, e4);
  }
  async request(t3, e4) {
    return this.requestStrict(formatJsonRpcRequest(t3.method, t3.params || [], t3.id || getBigIntRpcId().toString()), e4);
  }
  async requestStrict(t3, e4) {
    return new Promise(async (i6, s5) => {
      if (!this.connection.connected) try {
        await this.open();
      } catch (n6) {
        s5(n6);
      }
      this.events.on(`${t3.id}`, (n6) => {
        isJsonRpcError(n6) ? s5(n6.error) : i6(n6.result);
      });
      try {
        await this.connection.send(t3, e4);
      } catch (n6) {
        s5(n6);
      }
    });
  }
  setConnection(t3 = this.connection) {
    return t3;
  }
  onPayload(t3) {
    this.events.emit("payload", t3), isJsonRpcResponse(t3) ? this.events.emit(`${t3.id}`, t3) : this.events.emit("message", { type: t3.method, data: t3.params });
  }
  onClose(t3) {
    t3 && t3.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t3.code} ${t3.reason ? `(${t3.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t3 = this.connection) {
    this.connection === t3 && this.connection.connected || (this.connection.connected && this.close(), typeof t3 == "string" && (await this.connection.open(t3), t3 = this.connection), this.connection = this.setConnection(t3), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t3) => this.onPayload(t3)), this.connection.on("close", (t3) => this.onClose(t3)), this.connection.on("error", (t3) => this.events.emit("error", t3)), this.connection.on("register_error", (t3) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events6 = __toESM(require_events());
var v5 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser4();
var w5 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d5 = (r6) => r6.split("?")[0];
var h6 = 10;
var b4 = v5();
var f4 = class {
  constructor(e4) {
    if (this.url = e4, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e4)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e4}`);
    this.url = e4;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e4, t3) {
    this.events.on(e4, t3);
  }
  once(e4, t3) {
    this.events.once(e4, t3);
  }
  off(e4, t3) {
    this.events.off(e4, t3);
  }
  removeListener(e4, t3) {
    this.events.removeListener(e4, t3);
  }
  async open(e4 = this.url) {
    await this.register(e4);
  }
  async close() {
    return new Promise((e4, t3) => {
      if (typeof this.socket > "u") {
        t3(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n6) => {
        this.onClose(n6), e4();
      }, this.socket.close();
    });
  }
  async send(e4) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify3(e4));
    } catch (t3) {
      this.onError(e4.id, t3);
    }
  }
  register(e4 = this.url) {
    if (!isWsUrl(e4)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e4}`);
    if (this.registering) {
      const t3 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t3 || this.events.listenerCount("open") >= t3) && this.events.setMaxListeners(t3 + 1), new Promise((n6, s5) => {
        this.events.once("register_error", (o6) => {
          this.resetMaxListeners(), s5(o6);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u") return s5(new Error("WebSocket connection is missing or invalid"));
          n6(this.socket);
        });
      });
    }
    return this.url = e4, this.registering = true, new Promise((t3, n6) => {
      const s5 = (0, esm_exports3.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e4) }, o6 = new b4(e4, [], s5);
      w5() ? o6.onerror = (i6) => {
        const a5 = i6;
        n6(this.emitError(a5.error));
      } : o6.on("error", (i6) => {
        n6(this.emitError(i6));
      }), o6.onopen = () => {
        this.onOpen(o6), t3(o6);
      };
    });
  }
  onOpen(e4) {
    e4.onmessage = (t3) => this.onPayload(t3), e4.onclose = (t3) => this.onClose(t3), this.socket = e4, this.registering = false, this.events.emit("open");
  }
  onClose(e4) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e4);
  }
  onPayload(e4) {
    if (typeof e4.data > "u") return;
    const t3 = typeof e4.data == "string" ? safeJsonParse3(e4.data) : e4.data;
    this.events.emit("payload", t3);
  }
  onError(e4, t3) {
    const n6 = this.parseError(t3), s5 = n6.message || n6.toString(), o6 = formatJsonRpcError(e4, s5);
    this.events.emit("payload", o6);
  }
  parseError(e4, t3 = this.url) {
    return parseConnectionError(e4, d5(t3), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h6 && this.events.setMaxListeners(h6);
  }
  emitError(e4) {
    const t3 = this.parseError(new Error((e4 == null ? void 0 : e4.message) || `WebSocket connection failed for host: ${d5(this.url)}`));
    return this.events.emit("register_error", t3), t3;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_lodash = __toESM(require_lodash());
var import_window_getters2 = __toESM(require_cjs6());
var ye2 = "wc";
var De = 2;
var J2 = "core";
var A6 = `${ye2}@2:${J2}:`;
var Xe2 = { name: J2, logger: "error" };
var We2 = { database: ":memory:" };
var Ze = "crypto";
var me2 = "client_ed25519_seed";
var Qe = import_time4.ONE_DAY;
var et2 = "keychain";
var tt = "0.3";
var it2 = "messages";
var st2 = "0.3";
var be2 = import_time4.SIX_HOURS;
var rt = "publisher";
var nt = "irn";
var ot = "error";
var fe2 = "wss://relay.walletconnect.org";
var at2 = "relayer";
var v6 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var ct = "_subscription";
var C7 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var ht = 0.1;
var re2 = "2.17.3";
var M5 = { link_mode: "link_mode", relay: "relay" };
var lt = "0.3";
var ut2 = "WALLETCONNECT_CLIENT_ID";
var ve2 = "WALLETCONNECT_LINK_MODE_APPS";
var T5 = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var dt = "subscription";
var pt = "0.3";
var gt2 = import_time4.FIVE_SECONDS * 1e3;
var yt = "pairing";
var Dt2 = "0.3";
var V3 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var j4 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var R3 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var mt = "history";
var bt2 = "0.3";
var ft = "expirer";
var x6 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var vt2 = "0.3";
var _t = "verify-api";
var Ss = "https://verify.walletconnect.com";
var Et = "https://verify.walletconnect.org";
var X3 = Et;
var wt = `${X3}/v3`;
var It2 = [Ss, Et];
var Tt = "echo";
var Ct2 = "https://echo.walletconnect.com";
var z6 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var $4 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var xs = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var Os = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var As = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var Ns = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Pt = 0.1;
var St2 = "event-client";
var Rt = 86400;
var xt2 = "https://pulse.walletconnect.org/batch";
function zs(o6, e4) {
  if (o6.length >= 255) throw new TypeError("Alphabet too long");
  for (var t3 = new Uint8Array(256), s5 = 0; s5 < t3.length; s5++) t3[s5] = 255;
  for (var i6 = 0; i6 < o6.length; i6++) {
    var r6 = o6.charAt(i6), n6 = r6.charCodeAt(0);
    if (t3[n6] !== 255) throw new TypeError(r6 + " is ambiguous");
    t3[n6] = i6;
  }
  var a5 = o6.length, c7 = o6.charAt(0), h7 = Math.log(a5) / Math.log(256), u4 = Math.log(256) / Math.log(a5);
  function d6(l7) {
    if (l7 instanceof Uint8Array || (ArrayBuffer.isView(l7) ? l7 = new Uint8Array(l7.buffer, l7.byteOffset, l7.byteLength) : Array.isArray(l7) && (l7 = Uint8Array.from(l7))), !(l7 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (l7.length === 0) return "";
    for (var g7 = 0, w6 = 0, b5 = 0, D6 = l7.length; b5 !== D6 && l7[b5] === 0; ) b5++, g7++;
    for (var P4 = (D6 - b5) * u4 + 1 >>> 0, f5 = new Uint8Array(P4); b5 !== D6; ) {
      for (var N11 = l7[b5], k7 = 0, O5 = P4 - 1; (N11 !== 0 || k7 < w6) && O5 !== -1; O5--, k7++) N11 += 256 * f5[O5] >>> 0, f5[O5] = N11 % a5 >>> 0, N11 = N11 / a5 >>> 0;
      if (N11 !== 0) throw new Error("Non-zero carry");
      w6 = k7, b5++;
    }
    for (var L5 = P4 - w6; L5 !== P4 && f5[L5] === 0; ) L5++;
    for (var ee2 = c7.repeat(g7); L5 < P4; ++L5) ee2 += o6.charAt(f5[L5]);
    return ee2;
  }
  function y7(l7) {
    if (typeof l7 != "string") throw new TypeError("Expected String");
    if (l7.length === 0) return new Uint8Array();
    var g7 = 0;
    if (l7[g7] !== " ") {
      for (var w6 = 0, b5 = 0; l7[g7] === c7; ) w6++, g7++;
      for (var D6 = (l7.length - g7) * h7 + 1 >>> 0, P4 = new Uint8Array(D6); l7[g7]; ) {
        var f5 = t3[l7.charCodeAt(g7)];
        if (f5 === 255) return;
        for (var N11 = 0, k7 = D6 - 1; (f5 !== 0 || N11 < b5) && k7 !== -1; k7--, N11++) f5 += a5 * P4[k7] >>> 0, P4[k7] = f5 % 256 >>> 0, f5 = f5 / 256 >>> 0;
        if (f5 !== 0) throw new Error("Non-zero carry");
        b5 = N11, g7++;
      }
      if (l7[g7] !== " ") {
        for (var O5 = D6 - b5; O5 !== D6 && P4[O5] === 0; ) O5++;
        for (var L5 = new Uint8Array(w6 + (D6 - O5)), ee2 = w6; O5 !== D6; ) L5[ee2++] = P4[O5++];
        return L5;
      }
    }
  }
  function m4(l7) {
    var g7 = y7(l7);
    if (g7) return g7;
    throw new Error(`Non-${e4} character`);
  }
  return { encode: d6, decodeUnsafe: y7, decode: m4 };
}
var Ls = zs;
var $s = Ls;
var Ot2 = (o6) => {
  if (o6 instanceof Uint8Array && o6.constructor.name === "Uint8Array") return o6;
  if (o6 instanceof ArrayBuffer) return new Uint8Array(o6);
  if (ArrayBuffer.isView(o6)) return new Uint8Array(o6.buffer, o6.byteOffset, o6.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ks = (o6) => new TextEncoder().encode(o6);
var Us = (o6) => new TextDecoder().decode(o6);
var Fs = class {
  constructor(e4, t3, s5) {
    this.name = e4, this.prefix = t3, this.baseEncode = s5;
  }
  encode(e4) {
    if (e4 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e4)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Ms = class {
  constructor(e4, t3, s5) {
    if (this.name = e4, this.prefix = t3, t3.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t3.codePointAt(0), this.baseDecode = s5;
  }
  decode(e4) {
    if (typeof e4 == "string") {
      if (e4.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e4)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e4.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e4) {
    return At2(this, e4);
  }
};
var Ks = class {
  constructor(e4) {
    this.decoders = e4;
  }
  or(e4) {
    return At2(this, e4);
  }
  decode(e4) {
    const t3 = e4[0], s5 = this.decoders[t3];
    if (s5) return s5.decode(e4);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e4)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var At2 = (o6, e4) => new Ks({ ...o6.decoders || { [o6.prefix]: o6 }, ...e4.decoders || { [e4.prefix]: e4 } });
var Bs = class {
  constructor(e4, t3, s5, i6) {
    this.name = e4, this.prefix = t3, this.baseEncode = s5, this.baseDecode = i6, this.encoder = new Fs(e4, t3, s5), this.decoder = new Ms(e4, t3, i6);
  }
  encode(e4) {
    return this.encoder.encode(e4);
  }
  decode(e4) {
    return this.decoder.decode(e4);
  }
};
var ne2 = ({ name: o6, prefix: e4, encode: t3, decode: s5 }) => new Bs(o6, e4, t3, s5);
var W3 = ({ prefix: o6, name: e4, alphabet: t3 }) => {
  const { encode: s5, decode: i6 } = $s(t3, e4);
  return ne2({ prefix: o6, name: e4, encode: s5, decode: (r6) => Ot2(i6(r6)) });
};
var Vs = (o6, e4, t3, s5) => {
  const i6 = {};
  for (let u4 = 0; u4 < e4.length; ++u4) i6[e4[u4]] = u4;
  let r6 = o6.length;
  for (; o6[r6 - 1] === "="; ) --r6;
  const n6 = new Uint8Array(r6 * t3 / 8 | 0);
  let a5 = 0, c7 = 0, h7 = 0;
  for (let u4 = 0; u4 < r6; ++u4) {
    const d6 = i6[o6[u4]];
    if (d6 === void 0) throw new SyntaxError(`Non-${s5} character`);
    c7 = c7 << t3 | d6, a5 += t3, a5 >= 8 && (a5 -= 8, n6[h7++] = 255 & c7 >> a5);
  }
  if (a5 >= t3 || 255 & c7 << 8 - a5) throw new SyntaxError("Unexpected end of data");
  return n6;
};
var js = (o6, e4, t3) => {
  const s5 = e4[e4.length - 1] === "=", i6 = (1 << t3) - 1;
  let r6 = "", n6 = 0, a5 = 0;
  for (let c7 = 0; c7 < o6.length; ++c7) for (a5 = a5 << 8 | o6[c7], n6 += 8; n6 > t3; ) n6 -= t3, r6 += e4[i6 & a5 >> n6];
  if (n6 && (r6 += e4[i6 & a5 << t3 - n6]), s5) for (; r6.length * t3 & 7; ) r6 += "=";
  return r6;
};
var _7 = ({ name: o6, prefix: e4, bitsPerChar: t3, alphabet: s5 }) => ne2({ prefix: e4, name: o6, encode(i6) {
  return js(i6, s5, t3);
}, decode(i6) {
  return Vs(i6, s5, t3, o6);
} });
var qs = ne2({ prefix: "\0", name: "identity", encode: (o6) => Us(o6), decode: (o6) => ks(o6) });
var Gs = Object.freeze({ __proto__: null, identity: qs });
var Hs = _7({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var Ys = Object.freeze({ __proto__: null, base2: Hs });
var Js = _7({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Xs = Object.freeze({ __proto__: null, base8: Js });
var Ws = W3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Zs = Object.freeze({ __proto__: null, base10: Ws });
var Qs = _7({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var er2 = _7({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var tr2 = Object.freeze({ __proto__: null, base16: Qs, base16upper: er2 });
var ir = _7({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var sr = _7({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var rr2 = _7({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var nr2 = _7({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var or3 = _7({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var ar = _7({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var cr = _7({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var hr2 = _7({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var lr2 = _7({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var ur2 = Object.freeze({ __proto__: null, base32: ir, base32upper: sr, base32pad: rr2, base32padupper: nr2, base32hex: or3, base32hexupper: ar, base32hexpad: cr, base32hexpadupper: hr2, base32z: lr2 });
var dr2 = W3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var pr2 = W3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var gr2 = Object.freeze({ __proto__: null, base36: dr2, base36upper: pr2 });
var yr2 = W3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Dr2 = W3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var mr2 = Object.freeze({ __proto__: null, base58btc: yr2, base58flickr: Dr2 });
var br2 = _7({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var fr2 = _7({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var vr2 = _7({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var _r2 = _7({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Er2 = Object.freeze({ __proto__: null, base64: br2, base64pad: fr2, base64url: vr2, base64urlpad: _r2 });
var Nt2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var wr2 = Nt2.reduce((o6, e4, t3) => (o6[t3] = e4, o6), []);
var Ir2 = Nt2.reduce((o6, e4, t3) => (o6[e4.codePointAt(0)] = t3, o6), []);
function Tr2(o6) {
  return o6.reduce((e4, t3) => (e4 += wr2[t3], e4), "");
}
function Cr2(o6) {
  const e4 = [];
  for (const t3 of o6) {
    const s5 = Ir2[t3.codePointAt(0)];
    if (s5 === void 0) throw new Error(`Non-base256emoji character: ${t3}`);
    e4.push(s5);
  }
  return new Uint8Array(e4);
}
var Pr2 = ne2({ prefix: "🚀", name: "base256emoji", encode: Tr2, decode: Cr2 });
var Sr2 = Object.freeze({ __proto__: null, base256emoji: Pr2 });
var Rr2 = Lt2;
var zt2 = 128;
var xr2 = 127;
var Or2 = ~xr2;
var Ar2 = Math.pow(2, 31);
function Lt2(o6, e4, t3) {
  e4 = e4 || [], t3 = t3 || 0;
  for (var s5 = t3; o6 >= Ar2; ) e4[t3++] = o6 & 255 | zt2, o6 /= 128;
  for (; o6 & Or2; ) e4[t3++] = o6 & 255 | zt2, o6 >>>= 7;
  return e4[t3] = o6 | 0, Lt2.bytes = t3 - s5 + 1, e4;
}
var Nr2 = _e2;
var zr = 128;
var $t2 = 127;
function _e2(o6, s5) {
  var t3 = 0, s5 = s5 || 0, i6 = 0, r6 = s5, n6, a5 = o6.length;
  do {
    if (r6 >= a5) throw _e2.bytes = 0, new RangeError("Could not decode varint");
    n6 = o6[r6++], t3 += i6 < 28 ? (n6 & $t2) << i6 : (n6 & $t2) * Math.pow(2, i6), i6 += 7;
  } while (n6 >= zr);
  return _e2.bytes = r6 - s5, t3;
}
var Lr = Math.pow(2, 7);
var $r2 = Math.pow(2, 14);
var kr2 = Math.pow(2, 21);
var Ur2 = Math.pow(2, 28);
var Fr = Math.pow(2, 35);
var Mr2 = Math.pow(2, 42);
var Kr2 = Math.pow(2, 49);
var Br = Math.pow(2, 56);
var Vr2 = Math.pow(2, 63);
var jr2 = function(o6) {
  return o6 < Lr ? 1 : o6 < $r2 ? 2 : o6 < kr2 ? 3 : o6 < Ur2 ? 4 : o6 < Fr ? 5 : o6 < Mr2 ? 6 : o6 < Kr2 ? 7 : o6 < Br ? 8 : o6 < Vr2 ? 9 : 10;
};
var qr = { encode: Rr2, decode: Nr2, encodingLength: jr2 };
var kt = qr;
var Ut = (o6, e4, t3 = 0) => (kt.encode(o6, e4, t3), e4);
var Ft2 = (o6) => kt.encodingLength(o6);
var Ee2 = (o6, e4) => {
  const t3 = e4.byteLength, s5 = Ft2(o6), i6 = s5 + Ft2(t3), r6 = new Uint8Array(i6 + t3);
  return Ut(o6, r6, 0), Ut(t3, r6, s5), r6.set(e4, i6), new Gr(o6, t3, e4, r6);
};
var Gr = class {
  constructor(e4, t3, s5, i6) {
    this.code = e4, this.size = t3, this.digest = s5, this.bytes = i6;
  }
};
var Mt2 = ({ name: o6, code: e4, encode: t3 }) => new Hr(o6, e4, t3);
var Hr = class {
  constructor(e4, t3, s5) {
    this.name = e4, this.code = t3, this.encode = s5;
  }
  digest(e4) {
    if (e4 instanceof Uint8Array) {
      const t3 = this.encode(e4);
      return t3 instanceof Uint8Array ? Ee2(this.code, t3) : t3.then((s5) => Ee2(this.code, s5));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Kt2 = (o6) => async (e4) => new Uint8Array(await crypto.subtle.digest(o6, e4));
var Yr2 = Mt2({ name: "sha2-256", code: 18, encode: Kt2("SHA-256") });
var Jr = Mt2({ name: "sha2-512", code: 19, encode: Kt2("SHA-512") });
var Xr2 = Object.freeze({ __proto__: null, sha256: Yr2, sha512: Jr });
var Bt2 = 0;
var Wr = "identity";
var Vt2 = Ot2;
var Zr2 = (o6) => Ee2(Bt2, Vt2(o6));
var Qr2 = { code: Bt2, name: Wr, encode: Vt2, digest: Zr2 };
var en2 = Object.freeze({ __proto__: null, identity: Qr2 });
new TextEncoder(), new TextDecoder();
var jt = { ...Gs, ...Ys, ...Xs, ...Zs, ...tr2, ...ur2, ...gr2, ...mr2, ...Er2, ...Sr2 };
({ ...Xr2, ...en2 });
function tn2(o6 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(o6) : new Uint8Array(o6);
}
function qt2(o6, e4, t3, s5) {
  return { name: o6, prefix: e4, encoder: { name: o6, prefix: e4, encode: t3 }, decoder: { decode: s5 } };
}
var Gt2 = qt2("utf8", "u", (o6) => "u" + new TextDecoder("utf8").decode(o6), (o6) => new TextEncoder().encode(o6.substring(1)));
var we2 = qt2("ascii", "a", (o6) => {
  let e4 = "a";
  for (let t3 = 0; t3 < o6.length; t3++) e4 += String.fromCharCode(o6[t3]);
  return e4;
}, (o6) => {
  o6 = o6.substring(1);
  const e4 = tn2(o6.length);
  for (let t3 = 0; t3 < o6.length; t3++) e4[t3] = o6.charCodeAt(t3);
  return e4;
});
var sn2 = { utf8: Gt2, "utf-8": Gt2, hex: jt.base16, latin1: we2, ascii: we2, binary: we2, ...jt };
function rn2(o6, e4 = "utf8") {
  const t3 = sn2[e4];
  if (!t3) throw new Error(`Unsupported encoding "${e4}"`);
  return (e4 === "utf8" || e4 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(o6, "utf8") : t3.decoder.decode(`${t3.prefix}${o6}`);
}
var Ht2 = class {
  constructor(e4, t3) {
    this.core = e4, this.logger = t3, this.keychain = /* @__PURE__ */ new Map(), this.name = et2, this.version = tt, this.initialized = false, this.storagePrefix = A6, this.init = async () => {
      if (!this.initialized) {
        const s5 = await this.getKeyChain();
        typeof s5 < "u" && (this.keychain = s5), this.initialized = true;
      }
    }, this.has = (s5) => (this.isInitialized(), this.keychain.has(s5)), this.set = async (s5, i6) => {
      this.isInitialized(), this.keychain.set(s5, i6), await this.persist();
    }, this.get = (s5) => {
      this.isInitialized();
      const i6 = this.keychain.get(s5);
      if (typeof i6 > "u") {
        const { message: r6 } = S4("NO_MATCHING_KEY", `${this.name}: ${s5}`);
        throw new Error(r6);
      }
      return i6;
    }, this.del = async (s5) => {
      this.isInitialized(), this.keychain.delete(s5), await this.persist();
    }, this.core = e4, this.logger = E5(t3, this.name);
  }
  get context() {
    return y4(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e4) {
    await this.core.storage.setItem(this.storageKey, At(e4));
  }
  async getKeyChain() {
    const e4 = await this.core.storage.getItem(this.storageKey);
    return typeof e4 < "u" ? Ct(e4) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
};
var Yt2 = class {
  constructor(e4, t3, s5) {
    this.core = e4, this.logger = t3, this.name = Ze, this.randomSessionIdentifier = yr(), this.initialized = false, this.init = async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }, this.hasKeys = (i6) => (this.isInitialized(), this.keychain.has(i6)), this.getClientId = async () => {
      this.isInitialized();
      const i6 = await this.getClientSeed(), r6 = generateKeyPair(i6);
      return encodeIss(r6.publicKey);
    }, this.generateKeyPair = () => {
      this.isInitialized();
      const i6 = hr();
      return this.setPrivateKey(i6.publicKey, i6.privateKey);
    }, this.signJWT = async (i6) => {
      this.isInitialized();
      const r6 = await this.getClientSeed(), n6 = generateKeyPair(r6), a5 = this.randomSessionIdentifier, c7 = Qe;
      return await signJWT(a5, i6, c7, n6);
    }, this.generateSharedKey = (i6, r6, n6) => {
      this.isInitialized();
      const a5 = this.getPrivateKey(i6), c7 = gr(a5, r6);
      return this.setSymKey(c7, n6);
    }, this.setSymKey = async (i6, r6) => {
      this.isInitialized();
      const n6 = r6 || vr(i6);
      return await this.keychain.set(n6, i6), n6;
    }, this.deleteKeyPair = async (i6) => {
      this.isInitialized(), await this.keychain.del(i6);
    }, this.deleteSymKey = async (i6) => {
      this.isInitialized(), await this.keychain.del(i6);
    }, this.encode = async (i6, r6, n6) => {
      this.isInitialized();
      const a5 = On(n6), c7 = safeJsonStringify3(r6);
      if (Rr(a5)) return wr(c7, n6 == null ? void 0 : n6.encoding);
      if ($r(a5)) {
        const y7 = a5.senderPublicKey, m4 = a5.receiverPublicKey;
        i6 = await this.generateSharedKey(y7, m4);
      }
      const h7 = this.getSymKey(i6), { type: u4, senderPublicKey: d6 } = a5;
      return Er({ type: u4, symKey: h7, message: c7, senderPublicKey: d6, encoding: n6 == null ? void 0 : n6.encoding });
    }, this.decode = async (i6, r6, n6) => {
      this.isInitialized();
      const a5 = Sr(r6, n6);
      if (Rr(a5)) {
        const c7 = Nr(r6, n6 == null ? void 0 : n6.encoding);
        return safeJsonParse3(c7);
      }
      if ($r(a5)) {
        const c7 = a5.receiverPublicKey, h7 = a5.senderPublicKey;
        i6 = await this.generateSharedKey(c7, h7);
      }
      try {
        const c7 = this.getSymKey(i6), h7 = Or({ symKey: c7, encoded: r6, encoding: n6 == null ? void 0 : n6.encoding });
        return safeJsonParse3(h7);
      } catch (c7) {
        this.logger.error(`Failed to decode message from topic: '${i6}', clientId: '${await this.getClientId()}'`), this.logger.error(c7);
      }
    }, this.getPayloadType = (i6, r6 = ge) => {
      const n6 = Q2({ encoded: i6, encoding: r6 });
      return C6(n6.type);
    }, this.getPayloadSenderPublicKey = (i6, r6 = ge) => {
      const n6 = Q2({ encoded: i6, encoding: r6 });
      return n6.senderPublicKey ? toString3(n6.senderPublicKey, g5) : void 0;
    }, this.core = e4, this.logger = E5(t3, this.name), this.keychain = s5 || new Ht2(this.core, this.logger);
  }
  get context() {
    return y4(this.logger);
  }
  async setPrivateKey(e4, t3) {
    return await this.keychain.set(e4, t3), e4;
  }
  getPrivateKey(e4) {
    return this.keychain.get(e4);
  }
  async getClientSeed() {
    let e4 = "";
    try {
      e4 = this.keychain.get(me2);
    } catch {
      e4 = yr(), await this.keychain.set(me2, e4);
    }
    return rn2(e4, "base16");
  }
  getSymKey(e4) {
    return this.keychain.get(e4);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
};
var Jt2 = class extends a4 {
  constructor(e4, t3) {
    super(e4, t3), this.logger = e4, this.core = t3, this.messages = /* @__PURE__ */ new Map(), this.name = it2, this.version = st2, this.initialized = false, this.storagePrefix = A6, this.init = async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const s5 = await this.getRelayerMessages();
          typeof s5 < "u" && (this.messages = s5), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (s5) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s5);
        } finally {
          this.initialized = true;
        }
      }
    }, this.set = async (s5, i6) => {
      this.isInitialized();
      const r6 = br(i6);
      let n6 = this.messages.get(s5);
      return typeof n6 > "u" && (n6 = {}), typeof n6[r6] < "u" || (n6[r6] = i6, this.messages.set(s5, n6), await this.persist()), r6;
    }, this.get = (s5) => {
      this.isInitialized();
      let i6 = this.messages.get(s5);
      return typeof i6 > "u" && (i6 = {}), i6;
    }, this.has = (s5, i6) => {
      this.isInitialized();
      const r6 = this.get(s5), n6 = br(i6);
      return typeof r6[n6] < "u";
    }, this.del = async (s5) => {
      this.isInitialized(), this.messages.delete(s5), await this.persist();
    }, this.logger = E5(e4, this.name), this.core = t3;
  }
  get context() {
    return y4(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setRelayerMessages(e4) {
    await this.core.storage.setItem(this.storageKey, At(e4));
  }
  async getRelayerMessages() {
    const e4 = await this.core.storage.getItem(this.storageKey);
    return typeof e4 < "u" ? Ct(e4) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
};
var nn2 = Object.defineProperty;
var on2 = Object.defineProperties;
var an2 = Object.getOwnPropertyDescriptors;
var Xt2 = Object.getOwnPropertySymbols;
var cn2 = Object.prototype.hasOwnProperty;
var hn2 = Object.prototype.propertyIsEnumerable;
var Wt2 = (o6, e4, t3) => e4 in o6 ? nn2(o6, e4, { enumerable: true, configurable: true, writable: true, value: t3 }) : o6[e4] = t3;
var Zt2 = (o6, e4) => {
  for (var t3 in e4 || (e4 = {})) cn2.call(e4, t3) && Wt2(o6, t3, e4[t3]);
  if (Xt2) for (var t3 of Xt2(e4)) hn2.call(e4, t3) && Wt2(o6, t3, e4[t3]);
  return o6;
};
var Qt2 = (o6, e4) => on2(o6, an2(e4));
var ln2 = class extends g4 {
  constructor(e4, t3) {
    super(e4, t3), this.relayer = e4, this.logger = t3, this.events = new import_events7.EventEmitter(), this.name = rt, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE), this.initialPublishTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15), this.needsTransportRestart = false, this.publish = async (s5, i6, r6) => {
      var n6;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s5, message: i6, opts: r6 } });
      const a5 = (r6 == null ? void 0 : r6.ttl) || be2, c7 = Tr(r6), h7 = (r6 == null ? void 0 : r6.prompt) || false, u4 = (r6 == null ? void 0 : r6.tag) || 0, d6 = (r6 == null ? void 0 : r6.id) || getBigIntRpcId().toString(), y7 = { topic: s5, message: i6, opts: { ttl: a5, relay: c7, prompt: h7, tag: u4, id: d6, attestation: r6 == null ? void 0 : r6.attestation } }, m4 = `Failed to publish payload, please try again. id:${d6} tag:${u4}`;
      try {
        const l7 = new Promise(async (g7) => {
          const w6 = ({ id: D6 }) => {
            y7.opts.id === D6 && (this.removeRequestFromQueue(D6), this.relayer.events.removeListener(v6.publish, w6), g7(y7));
          };
          this.relayer.events.on(v6.publish, w6);
          const b5 = xt(new Promise((D6, P4) => {
            this.rpcPublish({ topic: s5, message: i6, ttl: a5, prompt: h7, tag: u4, id: d6, attestation: r6 == null ? void 0 : r6.attestation }).then(D6).catch((f5) => {
              this.logger.warn(f5, f5 == null ? void 0 : f5.message), P4(f5);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d6} tag:${u4}`);
          try {
            await b5, this.events.removeListener(v6.publish, w6);
          } catch (D6) {
            this.queue.set(d6, Qt2(Zt2({}, y7), { attempt: 1 })), this.logger.warn(D6, D6 == null ? void 0 : D6.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d6, topic: s5, message: i6, opts: r6 } }), await xt(l7, this.publishTimeout, m4);
      } catch (l7) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(l7), (n6 = r6 == null ? void 0 : r6.internal) != null && n6.throwOnFailedPublish) throw l7;
      } finally {
        this.queue.delete(d6);
      }
    }, this.on = (s5, i6) => {
      this.events.on(s5, i6);
    }, this.once = (s5, i6) => {
      this.events.once(s5, i6);
    }, this.off = (s5, i6) => {
      this.events.off(s5, i6);
    }, this.removeListener = (s5, i6) => {
      this.events.removeListener(s5, i6);
    }, this.relayer = e4, this.logger = E5(t3, this.name), this.registerEventListeners();
  }
  get context() {
    return y4(this.logger);
  }
  async rpcPublish(e4) {
    var t3, s5, i6, r6;
    const { topic: n6, message: a5, ttl: c7 = be2, prompt: h7, tag: u4, id: d6, attestation: y7 } = e4, m4 = { method: Ar(Tr().protocol).publish, params: { topic: n6, message: a5, ttl: c7, prompt: h7, tag: u4, attestation: y7 }, id: d6 };
    P3((t3 = m4.params) == null ? void 0 : t3.prompt) && ((s5 = m4.params) == null || delete s5.prompt), P3((i6 = m4.params) == null ? void 0 : i6.tag) && ((r6 = m4.params) == null || delete r6.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: m4 });
    const l7 = await this.relayer.request(m4);
    return this.relayer.events.emit(v6.publish, e4), this.logger.debug("Successfully Published Payload"), l7;
  }
  removeRequestFromQueue(e4) {
    this.queue.delete(e4);
  }
  checkQueue() {
    this.queue.forEach(async (e4, t3) => {
      const s5 = e4.attempt + 1;
      this.queue.set(t3, Qt2(Zt2({}, e4), { attempt: s5 }));
      const { topic: i6, message: r6, opts: n6, attestation: a5 } = e4;
      this.logger.warn({}, `Publisher: queue->publishing: ${e4.opts.id}, tag: ${e4.opts.tag}, attempt: ${s5}`), await this.rpcPublish({ topic: i6, message: r6, ttl: n6.ttl, prompt: n6.prompt, tag: n6.tag, id: n6.id, attestation: a5 }), this.logger.warn({}, `Publisher: queue->published: ${e4.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r3.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(v6.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(v6.message_ack, (e4) => {
      this.removeRequestFromQueue(e4.id.toString());
    });
  }
};
var un2 = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map(), this.set = (e4, t3) => {
      const s5 = this.get(e4);
      this.exists(e4, t3) || this.map.set(e4, [...s5, t3]);
    }, this.get = (e4) => this.map.get(e4) || [], this.exists = (e4, t3) => this.get(e4).includes(t3), this.delete = (e4, t3) => {
      if (typeof t3 > "u") {
        this.map.delete(e4);
        return;
      }
      if (!this.map.has(e4)) return;
      const s5 = this.get(e4);
      if (!this.exists(e4, t3)) return;
      const i6 = s5.filter((r6) => r6 !== t3);
      if (!i6.length) {
        this.map.delete(e4);
        return;
      }
      this.map.set(e4, i6);
    }, this.clear = () => {
      this.map.clear();
    };
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var dn2 = Object.defineProperty;
var pn = Object.defineProperties;
var gn2 = Object.getOwnPropertyDescriptors;
var ei = Object.getOwnPropertySymbols;
var yn2 = Object.prototype.hasOwnProperty;
var Dn = Object.prototype.propertyIsEnumerable;
var ti = (o6, e4, t3) => e4 in o6 ? dn2(o6, e4, { enumerable: true, configurable: true, writable: true, value: t3 }) : o6[e4] = t3;
var Z3 = (o6, e4) => {
  for (var t3 in e4 || (e4 = {})) yn2.call(e4, t3) && ti(o6, t3, e4[t3]);
  if (ei) for (var t3 of ei(e4)) Dn.call(e4, t3) && ti(o6, t3, e4[t3]);
  return o6;
};
var Ie2 = (o6, e4) => pn(o6, gn2(e4));
var ii = class extends d4 {
  constructor(e4, t3) {
    super(e4, t3), this.relayer = e4, this.logger = t3, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new un2(), this.events = new import_events7.EventEmitter(), this.name = dt, this.version = pt, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = false, this.pendingSubscriptionWatchLabel = "pending_sub_watch_label", this.pollingInterval = 20, this.storagePrefix = A6, this.subscribeTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE), this.initialSubscribeTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15), this.batchSubscribeTopicsLimit = 500, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId(), await this.restore()), this.initialized = true;
    }, this.subscribe = async (s5, i6) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s5, opts: i6 } });
      try {
        const r6 = Tr(i6), n6 = { topic: s5, relay: r6, transportType: i6 == null ? void 0 : i6.transportType };
        this.pending.set(s5, n6);
        const a5 = await this.rpcSubscribe(s5, r6, i6);
        return typeof a5 == "string" && (this.onSubscribe(a5, n6), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s5, opts: i6 } })), a5;
      } catch (r6) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(r6), r6;
      }
    }, this.unsubscribe = async (s5, i6) => {
      await this.restartToComplete(), this.isInitialized(), typeof (i6 == null ? void 0 : i6.id) < "u" ? await this.unsubscribeById(s5, i6.id, i6) : await this.unsubscribeByTopic(s5, i6);
    }, this.isSubscribed = async (s5) => {
      if (this.topics.includes(s5)) return true;
      const i6 = `${this.pendingSubscriptionWatchLabel}_${s5}`;
      return await new Promise((r6, n6) => {
        const a5 = new import_time4.Watch();
        a5.start(i6);
        const c7 = setInterval(() => {
          (!this.pending.has(s5) && this.topics.includes(s5) || this.cached.some((h7) => h7.topic === s5)) && (clearInterval(c7), a5.stop(i6), r6(true)), a5.elapsed(i6) >= gt2 && (clearInterval(c7), a5.stop(i6), n6(new Error("Subscription resolution timeout")));
        }, this.pollingInterval);
      }).catch(() => false);
    }, this.on = (s5, i6) => {
      this.events.on(s5, i6);
    }, this.once = (s5, i6) => {
      this.events.once(s5, i6);
    }, this.off = (s5, i6) => {
      this.events.off(s5, i6);
    }, this.removeListener = (s5, i6) => {
      this.events.removeListener(s5, i6);
    }, this.start = async () => {
      await this.onConnect();
    }, this.stop = async () => {
      await this.onDisconnect();
    }, this.restart = async () => {
      await this.restore(), await this.onRestart();
    }, this.checkPending = async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const s5 = [];
      this.pending.forEach((i6) => {
        s5.push(i6);
      }), await this.batchSubscribe(s5);
    }, this.registerEventListeners = () => {
      this.relayer.core.heartbeat.on(r3.pulse, async () => {
        await this.checkPending();
      }), this.events.on(T5.created, async (s5) => {
        const i6 = T5.created;
        this.logger.info(`Emitting ${i6}`), this.logger.debug({ type: "event", event: i6, data: s5 }), await this.persist();
      }), this.events.on(T5.deleted, async (s5) => {
        const i6 = T5.deleted;
        this.logger.info(`Emitting ${i6}`), this.logger.debug({ type: "event", event: i6, data: s5 }), await this.persist();
      });
    }, this.relayer = e4, this.logger = E5(t3, this.name), this.clientId = "";
  }
  get context() {
    return y4(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  hasSubscription(e4, t3) {
    let s5 = false;
    try {
      s5 = this.getSubscription(e4).topic === t3;
    } catch {
    }
    return s5;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e4, t3) {
    const s5 = this.topicMap.get(e4);
    await Promise.all(s5.map(async (i6) => await this.unsubscribeById(e4, i6, t3)));
  }
  async unsubscribeById(e4, t3, s5) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e4, id: t3, opts: s5 } });
    try {
      const i6 = Tr(s5);
      await this.rpcUnsubscribe(e4, t3, i6);
      const r6 = _6("USER_DISCONNECTED", `${this.name}, ${e4}`);
      await this.onUnsubscribe(e4, t3, r6), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e4, id: t3, opts: s5 } });
    } catch (i6) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(i6), i6;
    }
  }
  async rpcSubscribe(e4, t3, s5) {
    var i6;
    (s5 == null ? void 0 : s5.transportType) === M5.relay && await this.restartToComplete();
    const r6 = { method: Ar(t3.protocol).subscribe, params: { topic: e4 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: r6 });
    const n6 = (i6 = s5 == null ? void 0 : s5.internal) == null ? void 0 : i6.throwOnFailedPublish;
    try {
      const a5 = this.getSubscriptionId(e4);
      if ((s5 == null ? void 0 : s5.transportType) === M5.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(r6).catch((u4) => this.logger.warn(u4));
      }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), a5;
      const c7 = new Promise(async (u4) => {
        const d6 = (y7) => {
          y7.topic === e4 && (this.events.removeListener(T5.created, d6), u4(y7.id));
        };
        this.events.on(T5.created, d6);
        try {
          const y7 = await xt(new Promise((m4, l7) => {
            this.relayer.request(r6).catch((g7) => {
              this.logger.warn(g7, g7 == null ? void 0 : g7.message), l7(g7);
            }).then(m4);
          }), this.initialSubscribeTimeout, `Subscribing to ${e4} failed, please try again`);
          this.events.removeListener(T5.created, d6), u4(y7);
        } catch {
        }
      }), h7 = await xt(c7, this.subscribeTimeout, `Subscribing to ${e4} failed, please try again`);
      if (!h7 && n6) throw new Error(`Subscribing to ${e4} failed, please try again`);
      return h7 ? a5 : null;
    } catch (a5) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(v6.connection_stalled), n6) throw a5;
    }
    return null;
  }
  async rpcBatchSubscribe(e4) {
    if (!e4.length) return;
    const t3 = e4[0].relay, s5 = { method: Ar(t3.protocol).batchSubscribe, params: { topics: e4.map((i6) => i6.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s5 });
    try {
      await await xt(new Promise((i6) => {
        this.relayer.request(s5).catch((r6) => this.logger.warn(r6)).then(i6);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(v6.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e4) {
    if (!e4.length) return;
    const t3 = e4[0].relay, s5 = { method: Ar(t3.protocol).batchFetchMessages, params: { topics: e4.map((r6) => r6.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s5 });
    let i6;
    try {
      i6 = await await xt(new Promise((r6, n6) => {
        this.relayer.request(s5).catch((a5) => {
          this.logger.warn(a5), n6(a5);
        }).then(r6);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(v6.connection_stalled);
    }
    return i6;
  }
  rpcUnsubscribe(e4, t3, s5) {
    const i6 = { method: Ar(s5.protocol).unsubscribe, params: { topic: e4, id: t3 } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i6 }), this.relayer.request(i6);
  }
  onSubscribe(e4, t3) {
    this.setSubscription(e4, Ie2(Z3({}, t3), { id: e4 })), this.pending.delete(t3.topic);
  }
  onBatchSubscribe(e4) {
    e4.length && e4.forEach((t3) => {
      this.setSubscription(t3.id, Z3({}, t3)), this.pending.delete(t3.topic);
    });
  }
  async onUnsubscribe(e4, t3, s5) {
    this.events.removeAllListeners(t3), this.hasSubscription(t3, e4) && this.deleteSubscription(t3, s5), await this.relayer.messages.del(e4);
  }
  async setRelayerSubscriptions(e4) {
    await this.relayer.core.storage.setItem(this.storageKey, e4);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e4, t3) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e4, subscription: t3 }), this.addSubscription(e4, t3);
  }
  addSubscription(e4, t3) {
    this.subscriptions.set(e4, Z3({}, t3)), this.topicMap.set(t3.topic, e4), this.events.emit(T5.created, t3);
  }
  getSubscription(e4) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e4 });
    const t3 = this.subscriptions.get(e4);
    if (!t3) {
      const { message: s5 } = S4("NO_MATCHING_KEY", `${this.name}: ${e4}`);
      throw new Error(s5);
    }
    return t3;
  }
  deleteSubscription(e4, t3) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e4, reason: t3 });
    const s5 = this.getSubscription(e4);
    this.subscriptions.delete(e4), this.topicMap.delete(s5.topic, e4), this.events.emit(T5.deleted, Ie2(Z3({}, s5), { reason: t3 }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(T5.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e4 = [...this.cached], t3 = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let s5 = 0; s5 < t3; s5++) {
        const i6 = e4.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(i6);
      }
    }
    this.events.emit(T5.resubscribed);
  }
  async restore() {
    try {
      const e4 = await this.getRelayerSubscriptions();
      if (typeof e4 > "u" || !e4.length) return;
      if (this.subscriptions.size) {
        const { message: t3 } = S4("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t3), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t3);
      }
      this.cached = e4, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e4) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e4);
    }
  }
  async batchSubscribe(e4) {
    e4.length && (await this.rpcBatchSubscribe(e4), this.onBatchSubscribe(e4.map((t3) => Ie2(Z3({}, t3), { id: this.getSubscriptionId(t3.topic) }))));
  }
  async batchFetchMessages(e4) {
    if (!e4.length) return;
    this.logger.trace(`Fetching batch messages for ${e4.length} subscriptions`);
    const t3 = await this.rpcBatchFetchMessages(e4);
    t3 && t3.messages && (await Gt((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t3.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
  async restartToComplete() {
    !this.relayer.connected && !this.relayer.connecting && await this.relayer.transportOpen();
  }
  getSubscriptionId(e4) {
    return br(e4 + this.clientId);
  }
};
var mn = Object.defineProperty;
var si = Object.getOwnPropertySymbols;
var bn2 = Object.prototype.hasOwnProperty;
var fn = Object.prototype.propertyIsEnumerable;
var ri = (o6, e4, t3) => e4 in o6 ? mn(o6, e4, { enumerable: true, configurable: true, writable: true, value: t3 }) : o6[e4] = t3;
var ni = (o6, e4) => {
  for (var t3 in e4 || (e4 = {})) bn2.call(e4, t3) && ri(o6, t3, e4[t3]);
  if (si) for (var t3 of si(e4)) fn.call(e4, t3) && ri(o6, t3, e4[t3]);
  return o6;
};
var oi = class extends u3 {
  constructor(e4) {
    super(e4), this.protocol = "wc", this.version = 2, this.events = new import_events7.EventEmitter(), this.name = at2, this.transportExplicitlyClosed = false, this.initialized = false, this.connectionAttemptInProgress = false, this.hasExperiencedNetworkDisruption = false, this.heartBeatTimeout = (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS), this.requestsInFlight = [], this.connectTimeout = (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15), this.request = async (t3) => {
      var s5, i6;
      this.logger.debug("Publishing Request Payload");
      const r6 = t3.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: r6, method: t3.method, topic: (s5 = t3.params) == null ? void 0 : s5.topic }, "relayer.request - publishing...");
        const n6 = `${r6}:${((i6 = t3.params) == null ? void 0 : i6.tag) || ""}`;
        this.requestsInFlight.push(n6);
        const a5 = await this.provider.request(t3);
        return this.requestsInFlight = this.requestsInFlight.filter((c7) => c7 !== n6), a5;
      } catch (n6) {
        throw this.logger.debug(`Failed to Publish Request: ${r6}`), n6;
      }
    }, this.resetPingTimeout = () => {
      if (ce()) try {
        clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
          var t3, s5, i6;
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (i6 = (s5 = (t3 = this.provider) == null ? void 0 : t3.connection) == null ? void 0 : s5.socket) == null || i6.terminate();
        }, this.heartBeatTimeout);
      } catch (t3) {
        this.logger.warn(t3, t3 == null ? void 0 : t3.message);
      }
    }, this.onPayloadHandler = (t3) => {
      this.onProviderPayload(t3), this.resetPingTimeout();
    }, this.onConnectHandler = () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(v6.connect);
    }, this.onDisconnectHandler = () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }, this.onProviderErrorHandler = (t3) => {
      this.logger.fatal(t3, `Fatal socket error: ${t3 == null ? void 0 : t3.message}`), this.events.emit(v6.error, t3), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }, this.registerProviderListeners = () => {
      this.provider.on(C7.payload, this.onPayloadHandler), this.provider.on(C7.connect, this.onConnectHandler), this.provider.on(C7.disconnect, this.onDisconnectHandler), this.provider.on(C7.error, this.onProviderErrorHandler);
    }, this.core = e4.core, this.logger = typeof e4.logger < "u" && typeof e4.logger != "string" ? E5(e4.logger, this.name) : (0, import_pino2.default)(k4({ level: e4.logger || ot })), this.messages = new Jt2(this.logger, e4.core), this.subscriber = new ii(this, this.logger), this.publisher = new ln2(this, this.logger), this.relayUrl = (e4 == null ? void 0 : e4.relayUrl) || fe2, this.projectId = e4.projectId, Ot() ? this.packageName = St() : Nt() && (this.bundleId = St()), this.provider = {};
  }
  async init() {
    if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.cached.length > 0) try {
      await this.transportOpen();
    } catch (e4) {
      this.logger.warn(e4, e4 == null ? void 0 : e4.message);
    }
  }
  get context() {
    return y4(this.logger);
  }
  get connected() {
    var e4, t3, s5;
    return ((s5 = (t3 = (e4 = this.provider) == null ? void 0 : e4.connection) == null ? void 0 : t3.socket) == null ? void 0 : s5.readyState) === 1;
  }
  get connecting() {
    var e4, t3, s5;
    return ((s5 = (t3 = (e4 = this.provider) == null ? void 0 : e4.connection) == null ? void 0 : t3.socket) == null ? void 0 : s5.readyState) === 0;
  }
  async publish(e4, t3, s5) {
    this.isInitialized(), await this.publisher.publish(e4, t3, s5), await this.recordMessageEvent({ topic: e4, message: t3, publishedAt: Date.now(), transportType: M5.relay });
  }
  async subscribe(e4, t3) {
    var s5, i6, r6;
    this.isInitialized(), (!(t3 != null && t3.transportType) || (t3 == null ? void 0 : t3.transportType) === "relay") && await this.toEstablishConnection();
    const n6 = typeof ((s5 = t3 == null ? void 0 : t3.internal) == null ? void 0 : s5.throwOnFailedPublish) > "u" ? true : (i6 = t3 == null ? void 0 : t3.internal) == null ? void 0 : i6.throwOnFailedPublish;
    let a5 = ((r6 = this.subscriber.topicMap.get(e4)) == null ? void 0 : r6[0]) || "", c7;
    const h7 = (u4) => {
      u4.topic === e4 && (this.subscriber.off(T5.created, h7), c7());
    };
    return await Promise.all([new Promise((u4) => {
      c7 = u4, this.subscriber.on(T5.created, h7);
    }), new Promise(async (u4, d6) => {
      a5 = await this.subscriber.subscribe(e4, ni({ internal: { throwOnFailedPublish: n6 } }, t3)).catch((y7) => {
        n6 && d6(y7);
      }) || a5, u4();
    })]), a5;
  }
  async unsubscribe(e4, t3) {
    this.isInitialized(), await this.subscriber.unsubscribe(e4, t3);
  }
  on(e4, t3) {
    this.events.on(e4, t3);
  }
  once(e4, t3) {
    this.events.once(e4, t3);
  }
  off(e4, t3) {
    this.events.off(e4, t3);
  }
  removeListener(e4, t3) {
    this.events.removeListener(e4, t3);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await xt(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e4) {
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t3, s5) => {
      await this.connect(e4).then(t3).catch(s5).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e4) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e4 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await go()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e4) {
    if ((e4 == null ? void 0 : e4.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t3 = e4.sort((s5, i6) => s5.publishedAt - i6.publishedAt);
    this.logger.debug(`Batch of ${t3.length} message events sorted`);
    for (const s5 of t3) try {
      await this.onMessageEvent(s5);
    } catch (i6) {
      this.logger.warn(i6, "Error while processing batch message event: " + (i6 == null ? void 0 : i6.message));
    }
    this.logger.trace(`Batch of ${t3.length} message events processed`);
  }
  async onLinkMessageEvent(e4, t3) {
    const { topic: s5 } = e4;
    if (!t3.sessionExists) {
      const i6 = Lt(import_time4.FIVE_MINUTES), r6 = { topic: s5, expiry: i6, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(s5, r6);
    }
    this.events.emit(v6.message, e4), await this.recordMessageEvent(e4);
  }
  async connect(e4) {
    await this.confirmOnlineStateOrThrow(), e4 && e4 !== this.relayUrl && (this.relayUrl = e4, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t3 = 1;
    for (; t3 < 6; ) {
      try {
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t3}...`), await this.createProvider(), await new Promise(async (s5, i6) => {
          const r6 = () => {
            i6(new Error("Connection interrupted while trying to subscribe"));
          };
          this.provider.once(C7.disconnect, r6), await xt(new Promise((n6, a5) => {
            this.provider.connect().then(n6).catch(a5);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((n6) => {
            i6(n6);
          }).finally(() => {
            this.provider.off(C7.disconnect, r6), clearTimeout(this.reconnectTimeout), this.reconnectTimeout = void 0;
          }), await new Promise(async (n6, a5) => {
            const c7 = () => {
              a5(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(C7.disconnect, c7), await this.subscriber.start().then(n6).catch(a5).finally(() => {
              this.provider.off(C7.disconnect, c7);
            });
          }), this.hasExperiencedNetworkDisruption = false, s5();
        });
      } catch (s5) {
        await this.subscriber.stop();
        const i6 = s5;
        this.logger.warn({}, i6.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t3}`);
        break;
      }
      await new Promise((s5) => setTimeout(s5, (0, import_time4.toMiliseconds)(t3 * 1))), t3++;
    }
  }
  startPingTimeout() {
    var e4, t3, s5, i6, r6;
    if (ce()) try {
      (t3 = (e4 = this.provider) == null ? void 0 : e4.connection) != null && t3.socket && ((r6 = (i6 = (s5 = this.provider) == null ? void 0 : s5.connection) == null ? void 0 : i6.socket) == null || r6.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (n6) {
      this.logger.warn(n6, n6 == null ? void 0 : n6.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e4 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o5(new f4(It({ sdkVersion: re2, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e4, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e4) {
    const { topic: t3, message: s5 } = e4;
    await this.messages.set(t3, s5);
  }
  async shouldIgnoreMessageEvent(e4) {
    const { topic: t3, message: s5 } = e4;
    if (!s5 || s5.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${s5}`), true;
    if (!await this.subscriber.isSubscribed(t3)) return this.logger.warn(`Ignoring message for non-subscribed topic ${t3}`), true;
    const i6 = this.messages.has(t3, s5);
    return i6 && this.logger.warn(`Ignoring duplicate message: ${s5}`), i6;
  }
  async onProviderPayload(e4) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e4 }), isJsonRpcRequest(e4)) {
      if (!e4.method.endsWith(ct)) return;
      const t3 = e4.params, { topic: s5, message: i6, publishedAt: r6, attestation: n6 } = t3.data, a5 = { topic: s5, message: i6, publishedAt: r6, transportType: M5.relay, attestation: n6 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(ni({ type: "event", event: t3.id }, a5)), this.events.emit(t3.id, a5), await this.acknowledgePayload(e4), await this.onMessageEvent(a5);
    } else isJsonRpcResponse(e4) && this.events.emit(v6.message_ack, e4);
  }
  async onMessageEvent(e4) {
    await this.shouldIgnoreMessageEvent(e4) || (this.events.emit(v6.message, e4), await this.recordMessageEvent(e4));
  }
  async acknowledgePayload(e4) {
    const t3 = formatJsonRpcResult(e4.id, true);
    await this.provider.connection.send(t3);
  }
  unregisterProviderListeners() {
    this.provider.off(C7.payload, this.onPayloadHandler), this.provider.off(C7.connect, this.onConnectHandler), this.provider.off(C7.disconnect, this.onDisconnectHandler), this.provider.off(C7.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e4 = await go();
    vo(async (t3) => {
      e4 !== t3 && (e4 = t3, t3 ? await this.transportOpen().catch((s5) => this.logger.error(s5, s5 == null ? void 0 : s5.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    });
  }
  async onProviderDisconnect() {
    await this.subscriber.stop(), clearTimeout(this.pingTimeout), this.events.emit(v6.disconnect), this.connectionAttemptInProgress = false, !this.transportExplicitlyClosed && (this.reconnectTimeout || this.connectPromise || (this.reconnectTimeout = setTimeout(async () => {
      clearTimeout(this.reconnectTimeout), await this.transportOpen().catch((e4) => this.logger.error(e4, e4 == null ? void 0 : e4.message));
    }, (0, import_time4.toMiliseconds)(ht))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
  async toEstablishConnection() {
    await this.confirmOnlineStateOrThrow(), !this.connected && await this.transportOpen();
  }
};
var vn = Object.defineProperty;
var ai = Object.getOwnPropertySymbols;
var _n2 = Object.prototype.hasOwnProperty;
var En = Object.prototype.propertyIsEnumerable;
var ci = (o6, e4, t3) => e4 in o6 ? vn(o6, e4, { enumerable: true, configurable: true, writable: true, value: t3 }) : o6[e4] = t3;
var hi = (o6, e4) => {
  for (var t3 in e4 || (e4 = {})) _n2.call(e4, t3) && ci(o6, t3, e4[t3]);
  if (ai) for (var t3 of ai(e4)) En.call(e4, t3) && ci(o6, t3, e4[t3]);
  return o6;
};
var li = class extends p4 {
  constructor(e4, t3, s5, i6 = A6, r6 = void 0) {
    super(e4, t3, s5, i6), this.core = e4, this.logger = t3, this.name = s5, this.map = /* @__PURE__ */ new Map(), this.version = lt, this.cached = [], this.initialized = false, this.storagePrefix = A6, this.recentlyDeleted = [], this.recentlyDeletedLimit = 200, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((n6) => {
        this.getKey && n6 !== null && !P3(n6) ? this.map.set(this.getKey(n6), n6) : Xr(n6) ? this.map.set(n6.id, n6) : eo(n6) && this.map.set(n6.topic, n6);
      }), this.cached = [], this.initialized = true);
    }, this.set = async (n6, a5) => {
      this.isInitialized(), this.map.has(n6) ? await this.update(n6, a5) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: n6, value: a5 }), this.map.set(n6, a5), await this.persist());
    }, this.get = (n6) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: n6 }), this.getData(n6)), this.getAll = (n6) => (this.isInitialized(), n6 ? this.values.filter((a5) => Object.keys(n6).every((c7) => (0, import_lodash.default)(a5[c7], n6[c7]))) : this.values), this.update = async (n6, a5) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: n6, update: a5 });
      const c7 = hi(hi({}, this.getData(n6)), a5);
      this.map.set(n6, c7), await this.persist();
    }, this.delete = async (n6, a5) => {
      this.isInitialized(), this.map.has(n6) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: n6, reason: a5 }), this.map.delete(n6), this.addToRecentlyDeleted(n6), await this.persist());
    }, this.logger = E5(t3, this.name), this.storagePrefix = i6, this.getKey = r6;
  }
  get context() {
    return y4(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e4) {
    this.recentlyDeleted.push(e4), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e4) {
    await this.core.storage.setItem(this.storageKey, e4);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e4) {
    const t3 = this.map.get(e4);
    if (!t3) {
      if (this.recentlyDeleted.includes(e4)) {
        const { message: i6 } = S4("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e4}`);
        throw this.logger.error(i6), new Error(i6);
      }
      const { message: s5 } = S4("NO_MATCHING_KEY", `${this.name}: ${e4}`);
      throw this.logger.error(s5), new Error(s5);
    }
    return t3;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e4 = await this.getDataStore();
      if (typeof e4 > "u" || !e4.length) return;
      if (this.map.size) {
        const { message: t3 } = S4("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t3), new Error(t3);
      }
      this.cached = e4, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e4) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e4);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
};
var ui = class {
  constructor(e4, t3) {
    this.core = e4, this.logger = t3, this.name = yt, this.version = Dt2, this.events = new import_events7.default(), this.initialized = false, this.storagePrefix = A6, this.ignoredPayloadTypes = [D4], this.registeredMethods = [], this.init = async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }, this.register = ({ methods: s5 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s5])];
    }, this.create = async (s5) => {
      this.isInitialized();
      const i6 = yr(), r6 = await this.core.crypto.setSymKey(i6), n6 = Lt(import_time4.FIVE_MINUTES), a5 = { protocol: nt }, c7 = { topic: r6, expiry: n6, relay: a5, active: false, methods: s5 == null ? void 0 : s5.methods }, h7 = Mr({ protocol: this.core.protocol, version: this.core.version, topic: r6, symKey: i6, relay: a5, expiryTimestamp: n6, methods: s5 == null ? void 0 : s5.methods });
      return this.events.emit(j4.create, c7), this.core.expirer.set(r6, n6), await this.pairings.set(r6, c7), await this.core.relayer.subscribe(r6, { transportType: s5 == null ? void 0 : s5.transportType }), { topic: r6, uri: h7 };
    }, this.pair = async (s5) => {
      this.isInitialized();
      const i6 = this.core.eventClient.createEvent({ properties: { topic: s5 == null ? void 0 : s5.uri, trace: [z6.pairing_started] } });
      this.isValidPair(s5, i6);
      const { topic: r6, symKey: n6, relay: a5, expiryTimestamp: c7, methods: h7 } = Vr(s5.uri);
      i6.props.properties.topic = r6, i6.addTrace(z6.pairing_uri_validation_success), i6.addTrace(z6.pairing_uri_not_expired);
      let u4;
      if (this.pairings.keys.includes(r6)) {
        if (u4 = this.pairings.get(r6), i6.addTrace(z6.existing_pairing), u4.active) throw i6.setError($4.active_pairing_already_exists), new Error(`Pairing already exists: ${r6}. Please try again with a new connection URI.`);
        i6.addTrace(z6.pairing_not_expired);
      }
      const d6 = c7 || Lt(import_time4.FIVE_MINUTES), y7 = { topic: r6, relay: a5, expiry: d6, active: false, methods: h7 };
      this.core.expirer.set(r6, d6), await this.pairings.set(r6, y7), i6.addTrace(z6.store_new_pairing), s5.activatePairing && await this.activate({ topic: r6 }), this.events.emit(j4.create, y7), i6.addTrace(z6.emit_inactive_pairing), this.core.crypto.keychain.has(r6) || await this.core.crypto.setSymKey(n6, r6), i6.addTrace(z6.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        i6.setError($4.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(r6, { relay: a5 });
      } catch (m4) {
        throw i6.setError($4.subscribe_pairing_topic_failure), m4;
      }
      return i6.addTrace(z6.subscribe_pairing_topic_success), y7;
    }, this.activate = async ({ topic: s5 }) => {
      this.isInitialized();
      const i6 = Lt(import_time4.THIRTY_DAYS);
      this.core.expirer.set(s5, i6), await this.pairings.update(s5, { active: true, expiry: i6 });
    }, this.ping = async (s5) => {
      this.isInitialized(), await this.isValidPing(s5);
      const { topic: i6 } = s5;
      if (this.pairings.keys.includes(i6)) {
        const r6 = await this.sendRequest(i6, "wc_pairingPing", {}), { done: n6, resolve: a5, reject: c7 } = Dt();
        this.events.once(qt("pairing_ping", r6), ({ error: h7 }) => {
          h7 ? c7(h7) : a5();
        }), await n6();
      }
    }, this.updateExpiry = async ({ topic: s5, expiry: i6 }) => {
      this.isInitialized(), await this.pairings.update(s5, { expiry: i6 });
    }, this.updateMetadata = async ({ topic: s5, metadata: i6 }) => {
      this.isInitialized(), await this.pairings.update(s5, { peerMetadata: i6 });
    }, this.getPairings = () => (this.isInitialized(), this.pairings.values), this.disconnect = async (s5) => {
      this.isInitialized(), await this.isValidDisconnect(s5);
      const { topic: i6 } = s5;
      this.pairings.keys.includes(i6) && (await this.sendRequest(i6, "wc_pairingDelete", _6("USER_DISCONNECTED")), await this.deletePairing(i6));
    }, this.formatUriFromPairing = (s5) => {
      this.isInitialized();
      const { topic: i6, relay: r6, expiry: n6, methods: a5 } = s5, c7 = this.core.crypto.keychain.get(i6);
      return Mr({ protocol: this.core.protocol, version: this.core.version, topic: i6, symKey: c7, relay: r6, expiryTimestamp: n6, methods: a5 });
    }, this.sendRequest = async (s5, i6, r6) => {
      const n6 = formatJsonRpcRequest(i6, r6), a5 = await this.core.crypto.encode(s5, n6), c7 = V3[i6].req;
      return this.core.history.set(s5, n6), this.core.relayer.publish(s5, a5, c7), n6.id;
    }, this.sendResult = async (s5, i6, r6) => {
      const n6 = formatJsonRpcResult(s5, r6), a5 = await this.core.crypto.encode(i6, n6), c7 = await this.core.history.get(i6, s5), h7 = V3[c7.request.method].res;
      await this.core.relayer.publish(i6, a5, h7), await this.core.history.resolve(n6);
    }, this.sendError = async (s5, i6, r6) => {
      const n6 = formatJsonRpcError(s5, r6), a5 = await this.core.crypto.encode(i6, n6), c7 = await this.core.history.get(i6, s5), h7 = V3[c7.request.method] ? V3[c7.request.method].res : V3.unregistered_method.res;
      await this.core.relayer.publish(i6, a5, h7), await this.core.history.resolve(n6);
    }, this.deletePairing = async (s5, i6) => {
      await this.core.relayer.unsubscribe(s5), await Promise.all([this.pairings.delete(s5, _6("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(s5), i6 ? Promise.resolve() : this.core.expirer.del(s5)]);
    }, this.cleanup = async () => {
      const s5 = this.pairings.getAll().filter((i6) => Ft(i6.expiry));
      await Promise.all(s5.map((i6) => this.deletePairing(i6.topic)));
    }, this.onRelayEventRequest = (s5) => {
      const { topic: i6, payload: r6 } = s5;
      switch (r6.method) {
        case "wc_pairingPing":
          return this.onPairingPingRequest(i6, r6);
        case "wc_pairingDelete":
          return this.onPairingDeleteRequest(i6, r6);
        default:
          return this.onUnknownRpcMethodRequest(i6, r6);
      }
    }, this.onRelayEventResponse = async (s5) => {
      const { topic: i6, payload: r6 } = s5, n6 = (await this.core.history.get(i6, r6.id)).request.method;
      switch (n6) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(i6, r6);
        default:
          return this.onUnknownRpcMethodResponse(n6);
      }
    }, this.onPairingPingRequest = async (s5, i6) => {
      const { id: r6 } = i6;
      try {
        this.isValidPing({ topic: s5 }), await this.sendResult(r6, s5, true), this.events.emit(j4.ping, { id: r6, topic: s5 });
      } catch (n6) {
        await this.sendError(r6, s5, n6), this.logger.error(n6);
      }
    }, this.onPairingPingResponse = (s5, i6) => {
      const { id: r6 } = i6;
      setTimeout(() => {
        isJsonRpcResult(i6) ? this.events.emit(qt("pairing_ping", r6), {}) : isJsonRpcError(i6) && this.events.emit(qt("pairing_ping", r6), { error: i6.error });
      }, 500);
    }, this.onPairingDeleteRequest = async (s5, i6) => {
      const { id: r6 } = i6;
      try {
        this.isValidDisconnect({ topic: s5 }), await this.deletePairing(s5), this.events.emit(j4.delete, { id: r6, topic: s5 });
      } catch (n6) {
        await this.sendError(r6, s5, n6), this.logger.error(n6);
      }
    }, this.onUnknownRpcMethodRequest = async (s5, i6) => {
      const { id: r6, method: n6 } = i6;
      try {
        if (this.registeredMethods.includes(n6)) return;
        const a5 = _6("WC_METHOD_UNSUPPORTED", n6);
        await this.sendError(r6, s5, a5), this.logger.error(a5);
      } catch (a5) {
        await this.sendError(r6, s5, a5), this.logger.error(a5);
      }
    }, this.onUnknownRpcMethodResponse = (s5) => {
      this.registeredMethods.includes(s5) || this.logger.error(_6("WC_METHOD_UNSUPPORTED", s5));
    }, this.isValidPair = (s5, i6) => {
      var r6;
      if (!so(s5)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `pair() params: ${s5}`);
        throw i6.setError($4.malformed_pairing_uri), new Error(a5);
      }
      if (!Zr(s5.uri)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `pair() uri: ${s5.uri}`);
        throw i6.setError($4.malformed_pairing_uri), new Error(a5);
      }
      const n6 = Vr(s5 == null ? void 0 : s5.uri);
      if (!((r6 = n6 == null ? void 0 : n6.relay) != null && r6.protocol)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw i6.setError($4.malformed_pairing_uri), new Error(a5);
      }
      if (!(n6 != null && n6.symKey)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", "pair() uri#symKey");
        throw i6.setError($4.malformed_pairing_uri), new Error(a5);
      }
      if (n6 != null && n6.expiryTimestamp && (0, import_time4.toMiliseconds)(n6 == null ? void 0 : n6.expiryTimestamp) < Date.now()) {
        i6.setError($4.pairing_expired);
        const { message: a5 } = S4("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a5);
      }
    }, this.isValidPing = async (s5) => {
      if (!so(s5)) {
        const { message: r6 } = S4("MISSING_OR_INVALID", `ping() params: ${s5}`);
        throw new Error(r6);
      }
      const { topic: i6 } = s5;
      await this.isValidPairingTopic(i6);
    }, this.isValidDisconnect = async (s5) => {
      if (!so(s5)) {
        const { message: r6 } = S4("MISSING_OR_INVALID", `disconnect() params: ${s5}`);
        throw new Error(r6);
      }
      const { topic: i6 } = s5;
      await this.isValidPairingTopic(i6);
    }, this.isValidPairingTopic = async (s5) => {
      if (!b3(s5, false)) {
        const { message: i6 } = S4("MISSING_OR_INVALID", `pairing topic should be a string: ${s5}`);
        throw new Error(i6);
      }
      if (!this.pairings.keys.includes(s5)) {
        const { message: i6 } = S4("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s5}`);
        throw new Error(i6);
      }
      if (Ft(this.pairings.get(s5).expiry)) {
        await this.deletePairing(s5);
        const { message: i6 } = S4("EXPIRED", `pairing topic: ${s5}`);
        throw new Error(i6);
      }
    }, this.core = e4, this.logger = E5(t3, this.name), this.pairings = new li(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y4(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(v6.message, async (e4) => {
      const { topic: t3, message: s5, transportType: i6 } = e4;
      if (!this.pairings.keys.includes(t3) || i6 === M5.link_mode || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s5))) return;
      const r6 = await this.core.crypto.decode(t3, s5);
      try {
        isJsonRpcRequest(r6) ? (this.core.history.set(t3, r6), this.onRelayEventRequest({ topic: t3, payload: r6 })) : isJsonRpcResponse(r6) && (await this.core.history.resolve(r6), await this.onRelayEventResponse({ topic: t3, payload: r6 }), this.core.history.delete(t3, r6.id));
      } catch (n6) {
        this.logger.error(n6);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(x6.expired, async (e4) => {
      const { topic: t3 } = Kt(e4.target);
      t3 && this.pairings.keys.includes(t3) && (await this.deletePairing(t3, true), this.events.emit(j4.expire, { topic: t3 }));
    });
  }
};
var di = class extends h5 {
  constructor(e4, t3) {
    super(e4, t3), this.core = e4, this.logger = t3, this.records = /* @__PURE__ */ new Map(), this.events = new import_events7.EventEmitter(), this.name = mt, this.version = bt2, this.cached = [], this.initialized = false, this.storagePrefix = A6, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s5) => this.records.set(s5.id, s5)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }, this.set = (s5, i6, r6) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: s5, request: i6, chainId: r6 }), this.records.has(i6.id)) return;
      const n6 = { id: i6.id, topic: s5, request: { method: i6.method, params: i6.params || null }, chainId: r6, expiry: Lt(import_time4.THIRTY_DAYS) };
      this.records.set(n6.id, n6), this.persist(), this.events.emit(R3.created, n6);
    }, this.resolve = async (s5) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: s5 }), !this.records.has(s5.id)) return;
      const i6 = await this.getRecord(s5.id);
      typeof i6.response > "u" && (i6.response = isJsonRpcError(s5) ? { error: s5.error } : { result: s5.result }, this.records.set(i6.id, i6), this.persist(), this.events.emit(R3.updated, i6));
    }, this.get = async (s5, i6) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: s5, id: i6 }), await this.getRecord(i6)), this.delete = (s5, i6) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: i6 }), this.values.forEach((r6) => {
        if (r6.topic === s5) {
          if (typeof i6 < "u" && r6.id !== i6) return;
          this.records.delete(r6.id), this.events.emit(R3.deleted, r6);
        }
      }), this.persist();
    }, this.exists = async (s5, i6) => (this.isInitialized(), this.records.has(i6) ? (await this.getRecord(i6)).topic === s5 : false), this.on = (s5, i6) => {
      this.events.on(s5, i6);
    }, this.once = (s5, i6) => {
      this.events.once(s5, i6);
    }, this.off = (s5, i6) => {
      this.events.off(s5, i6);
    }, this.removeListener = (s5, i6) => {
      this.events.removeListener(s5, i6);
    }, this.logger = E5(t3, this.name);
  }
  get context() {
    return y4(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e4 = [];
    return this.values.forEach((t3) => {
      if (typeof t3.response < "u") return;
      const s5 = { topic: t3.topic, request: formatJsonRpcRequest(t3.request.method, t3.request.params, t3.id), chainId: t3.chainId };
      return e4.push(s5);
    }), e4;
  }
  async setJsonRpcRecords(e4) {
    await this.core.storage.setItem(this.storageKey, e4);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e4) {
    this.isInitialized();
    const t3 = this.records.get(e4);
    if (!t3) {
      const { message: s5 } = S4("NO_MATCHING_KEY", `${this.name}: ${e4}`);
      throw new Error(s5);
    }
    return t3;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(R3.sync);
  }
  async restore() {
    try {
      const e4 = await this.getJsonRpcRecords();
      if (typeof e4 > "u" || !e4.length) return;
      if (this.records.size) {
        const { message: t3 } = S4("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t3), new Error(t3);
      }
      this.cached = e4, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e4) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e4);
    }
  }
  registerEventListeners() {
    this.events.on(R3.created, (e4) => {
      const t3 = R3.created;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e4 });
    }), this.events.on(R3.updated, (e4) => {
      const t3 = R3.updated;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e4 });
    }), this.events.on(R3.deleted, (e4) => {
      const t3 = R3.deleted;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e4 });
    }), this.core.heartbeat.on(r3.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e4 = false;
      this.records.forEach((t3) => {
        (0, import_time4.toMiliseconds)(t3.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t3.id}`), this.records.delete(t3.id), this.events.emit(R3.deleted, t3, false), e4 = true);
      }), e4 && this.persist();
    } catch (e4) {
      this.logger.warn(e4);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
};
var pi = class extends x5 {
  constructor(e4, t3) {
    super(e4, t3), this.core = e4, this.logger = t3, this.expirations = /* @__PURE__ */ new Map(), this.events = new import_events7.EventEmitter(), this.name = ft, this.version = vt2, this.cached = [], this.initialized = false, this.storagePrefix = A6, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s5) => this.expirations.set(s5.target, s5)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }, this.has = (s5) => {
      try {
        const i6 = this.formatTarget(s5);
        return typeof this.getExpiration(i6) < "u";
      } catch {
        return false;
      }
    }, this.set = (s5, i6) => {
      this.isInitialized();
      const r6 = this.formatTarget(s5), n6 = { target: r6, expiry: i6 };
      this.expirations.set(r6, n6), this.checkExpiry(r6, n6), this.events.emit(x6.created, { target: r6, expiration: n6 });
    }, this.get = (s5) => {
      this.isInitialized();
      const i6 = this.formatTarget(s5);
      return this.getExpiration(i6);
    }, this.del = (s5) => {
      if (this.isInitialized(), this.has(s5)) {
        const i6 = this.formatTarget(s5), r6 = this.getExpiration(i6);
        this.expirations.delete(i6), this.events.emit(x6.deleted, { target: i6, expiration: r6 });
      }
    }, this.on = (s5, i6) => {
      this.events.on(s5, i6);
    }, this.once = (s5, i6) => {
      this.events.once(s5, i6);
    }, this.off = (s5, i6) => {
      this.events.off(s5, i6);
    }, this.removeListener = (s5, i6) => {
      this.events.removeListener(s5, i6);
    }, this.logger = E5(t3, this.name);
  }
  get context() {
    return y4(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e4) {
    if (typeof e4 == "string") return Vt(e4);
    if (typeof e4 == "number") return Mt(e4);
    const { message: t3 } = S4("UNKNOWN_TYPE", `Target type: ${typeof e4}`);
    throw new Error(t3);
  }
  async setExpirations(e4) {
    await this.core.storage.setItem(this.storageKey, e4);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(x6.sync);
  }
  async restore() {
    try {
      const e4 = await this.getExpirations();
      if (typeof e4 > "u" || !e4.length) return;
      if (this.expirations.size) {
        const { message: t3 } = S4("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t3), new Error(t3);
      }
      this.cached = e4, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e4) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e4);
    }
  }
  getExpiration(e4) {
    const t3 = this.expirations.get(e4);
    if (!t3) {
      const { message: s5 } = S4("NO_MATCHING_KEY", `${this.name}: ${e4}`);
      throw this.logger.warn(s5), new Error(s5);
    }
    return t3;
  }
  checkExpiry(e4, t3) {
    const { expiry: s5 } = t3;
    (0, import_time4.toMiliseconds)(s5) - Date.now() <= 0 && this.expire(e4, t3);
  }
  expire(e4, t3) {
    this.expirations.delete(e4), this.events.emit(x6.expired, { target: e4, expiration: t3 });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e4, t3) => this.checkExpiry(t3, e4));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r3.pulse, () => this.checkExpirations()), this.events.on(x6.created, (e4) => {
      const t3 = x6.created;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e4 }), this.persist();
    }), this.events.on(x6.expired, (e4) => {
      const t3 = x6.expired;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e4 }), this.persist();
    }), this.events.on(x6.deleted, (e4) => {
      const t3 = x6.deleted;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e4 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e4 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(e4);
    }
  }
};
var gi = class extends y5 {
  constructor(e4, t3, s5) {
    super(e4, t3, s5), this.core = e4, this.logger = t3, this.store = s5, this.name = _t, this.verifyUrlV3 = wt, this.storagePrefix = A6, this.version = De, this.init = async () => {
      var i6;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((i6 = this.publicKey) == null ? void 0 : i6.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }, this.register = async (i6) => {
      if (!V2() || this.isDevEnv) return;
      const r6 = window.location.origin, { id: n6, decryptedId: a5 } = i6, c7 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${r6}&id=${n6}&decryptedId=${a5}`;
      try {
        const h7 = (0, import_window_getters2.getDocument)(), u4 = this.startAbortTimer(import_time4.ONE_SECOND * 5), d6 = await new Promise((y7, m4) => {
          const l7 = () => {
            window.removeEventListener("message", w6), h7.body.removeChild(g7), m4("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", l7);
          const g7 = h7.createElement("iframe");
          g7.src = c7, g7.style.display = "none", g7.addEventListener("error", l7, { signal: this.abortController.signal });
          const w6 = (b5) => {
            if (b5.data && typeof b5.data == "string") try {
              const D6 = JSON.parse(b5.data);
              if (D6.type === "verify_attestation") {
                if (decodeJWT(D6.attestation).payload.id !== n6) return;
                clearInterval(u4), h7.body.removeChild(g7), this.abortController.signal.removeEventListener("abort", l7), window.removeEventListener("message", w6), y7(D6.attestation === null ? "" : D6.attestation);
              }
            } catch (D6) {
              this.logger.warn(D6);
            }
          };
          h7.body.appendChild(g7), window.addEventListener("message", w6, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d6), d6;
      } catch (h7) {
        this.logger.warn(h7);
      }
      return "";
    }, this.resolve = async (i6) => {
      if (this.isDevEnv) return "";
      const { attestationId: r6, hash: n6, encryptedId: a5 } = i6;
      if (r6 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (r6) {
        if (decodeJWT(r6).payload.id !== a5) return;
        const h7 = await this.isValidJwtAttestation(r6);
        if (h7) {
          if (!h7.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h7;
        }
      }
      if (!n6) return;
      const c7 = this.getVerifyUrl(i6 == null ? void 0 : i6.verifyUrl);
      return this.fetchAttestation(n6, c7);
    }, this.fetchAttestation = async (i6, r6) => {
      this.logger.debug(`resolving attestation: ${i6} from url: ${r6}`);
      const n6 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a5 = await fetch(`${r6}/attestation/${i6}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(n6), a5.status === 200 ? await a5.json() : void 0;
    }, this.getVerifyUrl = (i6) => {
      let r6 = i6 || X3;
      return It2.includes(r6) || (this.logger.info(`verify url: ${r6}, not included in trusted list, assigning default: ${X3}`), r6 = X3), r6;
    }, this.fetchPublicKey = async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const i6 = this.startAbortTimer(import_time4.FIVE_SECONDS), r6 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(i6), await r6.json();
      } catch (i6) {
        this.logger.warn(i6);
      }
    }, this.persistPublicKey = async (i6) => {
      this.logger.debug("persisting public key to local storage", i6), await this.store.setItem(this.storeKey, i6), this.publicKey = i6;
    }, this.removePublicKey = async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }, this.isValidJwtAttestation = async (i6) => {
      const r6 = await this.getPublicKey();
      try {
        if (r6) return this.validateAttestation(i6, r6);
      } catch (a5) {
        this.logger.error(a5), this.logger.warn("error validating attestation");
      }
      const n6 = await this.fetchAndPersistPublicKey();
      try {
        if (n6) return this.validateAttestation(i6, n6);
      } catch (a5) {
        this.logger.error(a5), this.logger.warn("error validating attestation");
      }
    }, this.getPublicKey = async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey(), this.fetchAndPersistPublicKey = async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (r6) => {
        const n6 = await this.fetchPublicKey();
        n6 && (await this.persistPublicKey(n6), r6(n6));
      });
      const i6 = await this.fetchPromise;
      return this.fetchPromise = void 0, i6;
    }, this.validateAttestation = (i6, r6) => {
      const n6 = jr(i6, r6.publicKey), a5 = { hasExpired: (0, import_time4.toMiliseconds)(n6.exp) < Date.now(), payload: n6 };
      if (a5.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a5.payload.origin, isScam: a5.payload.isScam, isVerified: a5.payload.isVerified };
    }, this.logger = E5(t3, this.name), this.abortController = new AbortController(), this.isDevEnv = zt(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y4(this.logger);
  }
  startAbortTimer(e4) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e4));
  }
};
var yi = class extends v4 {
  constructor(e4, t3) {
    super(e4, t3), this.projectId = e4, this.logger = t3, this.context = Tt, this.registerDeviceToken = async (s5) => {
      const { clientId: i6, token: r6, notificationType: n6, enableEncrypted: a5 = false } = s5, c7 = `${Ct2}/${this.projectId}/clients`;
      await fetch(c7, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: i6, type: n6, token: r6, always_raw: a5 }) });
    }, this.logger = E5(t3, this.context);
  }
};
var wn2 = Object.defineProperty;
var Di = Object.getOwnPropertySymbols;
var In2 = Object.prototype.hasOwnProperty;
var Tn2 = Object.prototype.propertyIsEnumerable;
var mi = (o6, e4, t3) => e4 in o6 ? wn2(o6, e4, { enumerable: true, configurable: true, writable: true, value: t3 }) : o6[e4] = t3;
var Q3 = (o6, e4) => {
  for (var t3 in e4 || (e4 = {})) In2.call(e4, t3) && mi(o6, t3, e4[t3]);
  if (Di) for (var t3 of Di(e4)) Tn2.call(e4, t3) && mi(o6, t3, e4[t3]);
  return o6;
};
var bi = class extends C4 {
  constructor(e4, t3, s5 = true) {
    super(e4, t3, s5), this.core = e4, this.logger = t3, this.context = St2, this.storagePrefix = A6, this.storageVersion = Pt, this.events = /* @__PURE__ */ new Map(), this.shouldPersist = false, this.init = async () => {
      if (!zt()) try {
        const i6 = { eventId: Jt(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Ge(this.core.relayer.protocol, this.core.relayer.version, re2) } } };
        await this.sendEvent([i6]);
      } catch (i6) {
        this.logger.warn(i6);
      }
    }, this.createEvent = (i6) => {
      const { event: r6 = "ERROR", type: n6 = "", properties: { topic: a5, trace: c7 } } = i6, h7 = Jt(), u4 = this.core.projectId || "", d6 = Date.now(), y7 = Q3({ eventId: h7, timestamp: d6, props: { event: r6, type: n6, properties: { topic: a5, trace: c7 } }, bundleId: u4, domain: this.getAppDomain() }, this.setMethods(h7));
      return this.telemetryEnabled && (this.events.set(h7, y7), this.shouldPersist = true), y7;
    }, this.getEvent = (i6) => {
      const { eventId: r6, topic: n6 } = i6;
      if (r6) return this.events.get(r6);
      const a5 = Array.from(this.events.values()).find((c7) => c7.props.properties.topic === n6);
      if (a5) return Q3(Q3({}, a5), this.setMethods(a5.eventId));
    }, this.deleteEvent = (i6) => {
      const { eventId: r6 } = i6;
      this.events.delete(r6), this.shouldPersist = true;
    }, this.setEventListeners = () => {
      this.core.heartbeat.on(r3.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((i6) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(i6.timestamp) > Rt && (this.events.delete(i6.eventId), this.shouldPersist = true);
        });
      });
    }, this.setMethods = (i6) => ({ addTrace: (r6) => this.addTrace(i6, r6), setError: (r6) => this.setError(i6, r6) }), this.addTrace = (i6, r6) => {
      const n6 = this.events.get(i6);
      n6 && (n6.props.properties.trace.push(r6), this.events.set(i6, n6), this.shouldPersist = true);
    }, this.setError = (i6, r6) => {
      const n6 = this.events.get(i6);
      n6 && (n6.props.type = r6, n6.timestamp = Date.now(), this.events.set(i6, n6), this.shouldPersist = true);
    }, this.persist = async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }, this.restore = async () => {
      try {
        const i6 = await this.core.storage.getItem(this.storageKey) || [];
        if (!i6.length) return;
        i6.forEach((r6) => {
          this.events.set(r6.eventId, Q3(Q3({}, r6), this.setMethods(r6.eventId)));
        });
      } catch (i6) {
        this.logger.warn(i6);
      }
    }, this.submit = async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const i6 = [];
      for (const [r6, n6] of this.events) n6.props.type && i6.push(n6);
      if (i6.length !== 0) try {
        if ((await this.sendEvent(i6)).ok) for (const r6 of i6) this.events.delete(r6.eventId), this.shouldPersist = true;
      } catch (r6) {
        this.logger.warn(r6);
      }
    }, this.sendEvent = async (i6) => {
      const r6 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${xt2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${re2}${r6}`, { method: "POST", body: JSON.stringify(i6) });
    }, this.getAppDomain = () => $t().url, this.logger = E5(t3, this.context), this.telemetryEnabled = s5, s5 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Cn = Object.defineProperty;
var fi = Object.getOwnPropertySymbols;
var Pn2 = Object.prototype.hasOwnProperty;
var Sn2 = Object.prototype.propertyIsEnumerable;
var vi = (o6, e4, t3) => e4 in o6 ? Cn(o6, e4, { enumerable: true, configurable: true, writable: true, value: t3 }) : o6[e4] = t3;
var _i = (o6, e4) => {
  for (var t3 in e4 || (e4 = {})) Pn2.call(e4, t3) && vi(o6, t3, e4[t3]);
  if (fi) for (var t3 of fi(e4)) Sn2.call(e4, t3) && vi(o6, t3, e4[t3]);
  return o6;
};
var oe2 = class _oe extends n4 {
  constructor(e4) {
    var t3;
    super(e4), this.protocol = ye2, this.version = De, this.name = J2, this.events = new import_events7.EventEmitter(), this.initialized = false, this.on = (n6, a5) => this.events.on(n6, a5), this.once = (n6, a5) => this.events.once(n6, a5), this.off = (n6, a5) => this.events.off(n6, a5), this.removeListener = (n6, a5) => this.events.removeListener(n6, a5), this.dispatchEnvelope = ({ topic: n6, message: a5, sessionExists: c7 }) => {
      if (!n6 || !a5) return;
      const h7 = { topic: n6, message: a5, publishedAt: Date.now(), transportType: M5.link_mode };
      this.relayer.onLinkMessageEvent(h7, { sessionExists: c7 });
    }, this.projectId = e4 == null ? void 0 : e4.projectId, this.relayUrl = (e4 == null ? void 0 : e4.relayUrl) || fe2, this.customStoragePrefix = e4 != null && e4.customStoragePrefix ? `:${e4.customStoragePrefix}` : "";
    const s5 = k4({ level: typeof (e4 == null ? void 0 : e4.logger) == "string" && e4.logger ? e4.logger : Xe2.logger, name: J2 }), { logger: i6, chunkLoggerController: r6 } = A4({ opts: s5, maxSizeInBytes: e4 == null ? void 0 : e4.maxLogBlobSizeInBytes, loggerOverride: e4 == null ? void 0 : e4.logger });
    this.logChunkController = r6, (t3 = this.logChunkController) != null && t3.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var n6, a5;
      (n6 = this.logChunkController) != null && n6.downloadLogsBlobInBrowser && ((a5 = this.logChunkController) == null || a5.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E5(i6, this.name), this.heartbeat = new i3(), this.crypto = new Yt2(this, this.logger, e4 == null ? void 0 : e4.keychain), this.history = new di(this, this.logger), this.expirer = new pi(this, this.logger), this.storage = e4 != null && e4.storage ? e4.storage : new h3(_i(_i({}, We2), e4 == null ? void 0 : e4.storageOptions)), this.relayer = new oi({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new ui(this, this.logger), this.verify = new gi(this, this.logger, this.storage), this.echoClient = new yi(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new bi(this, this.logger, e4 == null ? void 0 : e4.telemetryEnabled);
  }
  static async init(e4) {
    const t3 = new _oe(e4);
    await t3.initialize();
    const s5 = await t3.crypto.getClientId();
    return await t3.storage.setItem(ut2, s5), t3;
  }
  get context() {
    return y4(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e4;
    return (e4 = this.logChunkController) == null ? void 0 : e4.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e4) {
    this.linkModeSupportedApps.includes(e4) || (this.linkModeSupportedApps.push(e4), await this.storage.setItem(ve2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.eventClient.init(), this.linkModeSupportedApps = await this.storage.getItem(ve2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e4) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e4), this.logger.error(e4.message), e4;
    }
  }
};
var Rn2 = oe2;

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_time5 = __toESM(require_cjs5());
var import_events8 = __toESM(require_events());
var Ce3 = "wc";
var Le2 = 2;
var xe = "client";
var ye3 = `${Ce3}@${Le2}:${xe}:`;
var we3 = { name: xe, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var De2 = "WALLETCONNECT_DEEPLINK_CHOICE";
var it3 = "proposal";
var rt2 = "Proposal expired";
var nt2 = "session";
var H4 = import_time5.SEVEN_DAYS;
var ot2 = "engine";
var v7 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var me3 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
var x7 = { idle: "IDLE", active: "ACTIVE" };
var at3 = "request";
var ct2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var lt2 = "wc";
var pt2 = "auth";
var ht2 = "authKeys";
var dt2 = "pairingTopics";
var ut3 = "requests";
var oe3 = `${lt2}@${1.5}:${pt2}:`;
var ae3 = `${oe3}:PUB_KEY`;
var ys = Object.defineProperty;
var ws = Object.defineProperties;
var ms = Object.getOwnPropertyDescriptors;
var gt3 = Object.getOwnPropertySymbols;
var _s2 = Object.prototype.hasOwnProperty;
var Es2 = Object.prototype.propertyIsEnumerable;
var yt2 = (q4, o6, e4) => o6 in q4 ? ys(q4, o6, { enumerable: true, configurable: true, writable: true, value: e4 }) : q4[o6] = e4;
var I5 = (q4, o6) => {
  for (var e4 in o6 || (o6 = {})) _s2.call(o6, e4) && yt2(q4, e4, o6[e4]);
  if (gt3) for (var e4 of gt3(o6)) Es2.call(o6, e4) && yt2(q4, e4, o6[e4]);
  return q4;
};
var D5 = (q4, o6) => ws(q4, ms(o6));
var Rs = class extends M3 {
  constructor(o6) {
    super(o6), this.name = ot2, this.events = new import_events8.default(), this.initialized = false, this.requestQueue = { state: x7.idle, queue: [] }, this.sessionRequestQueue = { state: x7.idle, queue: [] }, this.requestQueueDelay = import_time5.ONE_SECOND, this.expectedPairingMethodMap = /* @__PURE__ */ new Map(), this.recentlyDeletedMap = /* @__PURE__ */ new Map(), this.recentlyDeletedLimit = 200, this.relayMessageCache = [], this.init = async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(v7) }), this.initialized = true, setTimeout(() => {
        this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
    }, this.connect = async (e4) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const t3 = D5(I5({}, e4), { requiredNamespaces: e4.requiredNamespaces || {}, optionalNamespaces: e4.optionalNamespaces || {} });
      await this.isValidConnect(t3);
      const { pairingTopic: s5, requiredNamespaces: i6, optionalNamespaces: r6, sessionProperties: n6, relays: a5 } = t3;
      let c7 = s5, h7, p5 = false;
      try {
        c7 && (p5 = this.client.core.pairing.pairings.get(c7).active);
      } catch (E7) {
        throw this.client.logger.error(`connect() -> pairing.get(${c7}) failed`), E7;
      }
      if (!c7 || !p5) {
        const { topic: E7, uri: S5 } = await this.client.core.pairing.create();
        c7 = E7, h7 = S5;
      }
      if (!c7) {
        const { message: E7 } = S4("NO_MATCHING_KEY", `connect() pairing topic: ${c7}`);
        throw new Error(E7);
      }
      const d6 = await this.client.core.crypto.generateKeyPair(), l7 = v7.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, w6 = Lt(l7), m4 = I5({ requiredNamespaces: i6, optionalNamespaces: r6, relays: a5 ?? [{ protocol: nt }], proposer: { publicKey: d6, metadata: this.client.metadata }, expiryTimestamp: w6, pairingTopic: c7 }, n6 && { sessionProperties: n6 }), { reject: y7, resolve: _8, done: R4 } = Dt(l7, rt2);
      this.events.once(qt("session_connect"), async ({ error: E7, session: S5 }) => {
        if (E7) y7(E7);
        else if (S5) {
          S5.self.publicKey = d6;
          const M6 = D5(I5({}, S5), { pairingTopic: m4.pairingTopic, requiredNamespaces: m4.requiredNamespaces, optionalNamespaces: m4.optionalNamespaces, transportType: M5.relay });
          await this.client.session.set(S5.topic, M6), await this.setExpiry(S5.topic, S5.expiry), c7 && await this.client.core.pairing.updateMetadata({ topic: c7, metadata: S5.peer.metadata }), this.cleanupDuplicatePairings(M6), _8(M6);
        }
      });
      const V4 = await this.sendRequest({ topic: c7, method: "wc_sessionPropose", params: m4, throwOnFailedPublish: true });
      return await this.setProposal(V4, I5({ id: V4 }, m4)), { uri: h7, approval: R4 };
    }, this.pair = async (e4) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(e4);
      } catch (t3) {
        throw this.client.logger.error("pair() failed"), t3;
      }
    }, this.approve = async (e4) => {
      var t3, s5, i6;
      const r6 = this.client.core.eventClient.createEvent({ properties: { topic: (t3 = e4 == null ? void 0 : e4.id) == null ? void 0 : t3.toString(), trace: [xs.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (N11) {
        throw r6.setError(Os.no_internet_connection), N11;
      }
      try {
        await this.isValidProposalId(e4 == null ? void 0 : e4.id);
      } catch (N11) {
        throw this.client.logger.error(`approve() -> proposal.get(${e4 == null ? void 0 : e4.id}) failed`), r6.setError(Os.proposal_not_found), N11;
      }
      try {
        await this.isValidApprove(e4);
      } catch (N11) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r6.setError(Os.session_approve_namespace_validation_failure), N11;
      }
      const { id: n6, relayProtocol: a5, namespaces: c7, sessionProperties: h7, sessionConfig: p5 } = e4, d6 = this.client.proposal.get(n6);
      this.client.core.eventClient.deleteEvent({ eventId: r6.eventId });
      const { pairingTopic: l7, proposer: w6, requiredNamespaces: m4, optionalNamespaces: y7 } = d6;
      let _8 = (s5 = this.client.core.eventClient) == null ? void 0 : s5.getEvent({ topic: l7 });
      _8 || (_8 = (i6 = this.client.core.eventClient) == null ? void 0 : i6.createEvent({ type: xs.session_approve_started, properties: { topic: l7, trace: [xs.session_approve_started, xs.session_namespaces_validation_success] } }));
      const R4 = await this.client.core.crypto.generateKeyPair(), V4 = w6.publicKey, E7 = await this.client.core.crypto.generateSharedKey(R4, V4), S5 = I5(I5({ relay: { protocol: a5 ?? "irn" }, namespaces: c7, controller: { publicKey: R4, metadata: this.client.metadata }, expiry: Lt(H4) }, h7 && { sessionProperties: h7 }), p5 && { sessionConfig: p5 }), M6 = M5.relay;
      _8.addTrace(xs.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(E7, { transportType: M6 });
      } catch (N11) {
        throw _8.setError(Os.subscribe_session_topic_failure), N11;
      }
      _8.addTrace(xs.subscribe_session_topic_success);
      const W4 = D5(I5({}, S5), { topic: E7, requiredNamespaces: m4, optionalNamespaces: y7, pairingTopic: l7, acknowledged: false, self: S5.controller, peer: { publicKey: w6.publicKey, metadata: w6.metadata }, controller: R4, transportType: M5.relay });
      await this.client.session.set(E7, W4), _8.addTrace(xs.store_session);
      try {
        _8.addTrace(xs.publishing_session_settle), await this.sendRequest({ topic: E7, method: "wc_sessionSettle", params: S5, throwOnFailedPublish: true }).catch((N11) => {
          throw _8 == null ? void 0 : _8.setError(Os.session_settle_publish_failure), N11;
        }), _8.addTrace(xs.session_settle_publish_success), _8.addTrace(xs.publishing_session_approve), await this.sendResult({ id: n6, topic: l7, result: { relay: { protocol: a5 ?? "irn" }, responderPublicKey: R4 }, throwOnFailedPublish: true }).catch((N11) => {
          throw _8 == null ? void 0 : _8.setError(Os.session_approve_publish_failure), N11;
        }), _8.addTrace(xs.session_approve_publish_success);
      } catch (N11) {
        throw this.client.logger.error(N11), this.client.session.delete(E7, _6("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(E7), N11;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _8.eventId }), await this.client.core.pairing.updateMetadata({ topic: l7, metadata: w6.metadata }), await this.client.proposal.delete(n6, _6("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: l7 }), await this.setExpiry(E7, Lt(H4)), { topic: E7, acknowledged: () => Promise.resolve(this.client.session.get(E7)) };
    }, this.reject = async (e4) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(e4);
      } catch (r6) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r6;
      }
      const { id: t3, reason: s5 } = e4;
      let i6;
      try {
        i6 = this.client.proposal.get(t3).pairingTopic;
      } catch (r6) {
        throw this.client.logger.error(`reject() -> proposal.get(${t3}) failed`), r6;
      }
      i6 && (await this.sendError({ id: t3, topic: i6, error: s5, rpcOpts: v7.wc_sessionPropose.reject }), await this.client.proposal.delete(t3, _6("USER_DISCONNECTED")));
    }, this.update = async (e4) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(e4);
      } catch (p5) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), p5;
      }
      const { topic: t3, namespaces: s5 } = e4, { done: i6, resolve: r6, reject: n6 } = Dt(), a5 = payloadId(), c7 = getBigIntRpcId().toString(), h7 = this.client.session.get(t3).namespaces;
      return this.events.once(qt("session_update", a5), ({ error: p5 }) => {
        p5 ? n6(p5) : r6();
      }), await this.client.session.update(t3, { namespaces: s5 }), await this.sendRequest({ topic: t3, method: "wc_sessionUpdate", params: { namespaces: s5 }, throwOnFailedPublish: true, clientRpcId: a5, relayRpcId: c7 }).catch((p5) => {
        this.client.logger.error(p5), this.client.session.update(t3, { namespaces: h7 }), n6(p5);
      }), { acknowledged: i6 };
    }, this.extend = async (e4) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(e4);
      } catch (a5) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a5;
      }
      const { topic: t3 } = e4, s5 = payloadId(), { done: i6, resolve: r6, reject: n6 } = Dt();
      return this.events.once(qt("session_extend", s5), ({ error: a5 }) => {
        a5 ? n6(a5) : r6();
      }), await this.setExpiry(t3, Lt(H4)), this.sendRequest({ topic: t3, method: "wc_sessionExtend", params: {}, clientRpcId: s5, throwOnFailedPublish: true }).catch((a5) => {
        n6(a5);
      }), { acknowledged: i6 };
    }, this.request = async (e4) => {
      this.isInitialized();
      try {
        await this.isValidRequest(e4);
      } catch (w6) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), w6;
      }
      const { chainId: t3, request: s5, topic: i6, expiry: r6 = v7.wc_sessionRequest.req.ttl } = e4, n6 = this.client.session.get(i6);
      (n6 == null ? void 0 : n6.transportType) === M5.relay && await this.confirmOnlineStateOrThrow();
      const a5 = payloadId(), c7 = getBigIntRpcId().toString(), { done: h7, resolve: p5, reject: d6 } = Dt(r6, "Request expired. Please try again.");
      this.events.once(qt("session_request", a5), ({ error: w6, result: m4 }) => {
        w6 ? d6(w6) : p5(m4);
      });
      const l7 = this.getAppLinkIfEnabled(n6.peer.metadata, n6.transportType);
      return l7 ? (await this.sendRequest({ clientRpcId: a5, relayRpcId: c7, topic: i6, method: "wc_sessionRequest", params: { request: D5(I5({}, s5), { expiryTimestamp: Lt(r6) }), chainId: t3 }, expiry: r6, throwOnFailedPublish: true, appLink: l7 }).catch((w6) => d6(w6)), this.client.events.emit("session_request_sent", { topic: i6, request: s5, chainId: t3, id: a5 }), await h7()) : await Promise.all([new Promise(async (w6) => {
        await this.sendRequest({ clientRpcId: a5, relayRpcId: c7, topic: i6, method: "wc_sessionRequest", params: { request: D5(I5({}, s5), { expiryTimestamp: Lt(r6) }), chainId: t3 }, expiry: r6, throwOnFailedPublish: true }).catch((m4) => d6(m4)), this.client.events.emit("session_request_sent", { topic: i6, request: s5, chainId: t3, id: a5 }), w6();
      }), new Promise(async (w6) => {
        var m4;
        if (!((m4 = n6.sessionConfig) != null && m4.disableDeepLink)) {
          const y7 = await Ht(this.client.core.storage, De2);
          await Bt({ id: a5, topic: i6, wcDeepLink: y7 });
        }
        w6();
      }), h7()]).then((w6) => w6[2]);
    }, this.respond = async (e4) => {
      this.isInitialized(), await this.isValidRespond(e4);
      const { topic: t3, response: s5 } = e4, { id: i6 } = s5, r6 = this.client.session.get(t3);
      r6.transportType === M5.relay && await this.confirmOnlineStateOrThrow();
      const n6 = this.getAppLinkIfEnabled(r6.peer.metadata, r6.transportType);
      isJsonRpcResult(s5) ? await this.sendResult({ id: i6, topic: t3, result: s5.result, throwOnFailedPublish: true, appLink: n6 }) : isJsonRpcError(s5) && await this.sendError({ id: i6, topic: t3, error: s5.error, appLink: n6 }), this.cleanupAfterResponse(e4);
    }, this.ping = async (e4) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(e4);
      } catch (s5) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s5;
      }
      const { topic: t3 } = e4;
      if (this.client.session.keys.includes(t3)) {
        const s5 = payloadId(), i6 = getBigIntRpcId().toString(), { done: r6, resolve: n6, reject: a5 } = Dt();
        this.events.once(qt("session_ping", s5), ({ error: c7 }) => {
          c7 ? a5(c7) : n6();
        }), await Promise.all([this.sendRequest({ topic: t3, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s5, relayRpcId: i6 }), r6()]);
      } else this.client.core.pairing.pairings.keys.includes(t3) && await this.client.core.pairing.ping({ topic: t3 });
    }, this.emit = async (e4) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e4);
      const { topic: t3, event: s5, chainId: i6 } = e4, r6 = getBigIntRpcId().toString(), n6 = payloadId();
      await this.sendRequest({ topic: t3, method: "wc_sessionEvent", params: { event: s5, chainId: i6 }, throwOnFailedPublish: true, relayRpcId: r6, clientRpcId: n6 });
    }, this.disconnect = async (e4) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e4);
      const { topic: t3 } = e4;
      if (this.client.session.keys.includes(t3)) await this.sendRequest({ topic: t3, method: "wc_sessionDelete", params: _6("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t3, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(t3)) await this.client.core.pairing.disconnect({ topic: t3 });
      else {
        const { message: s5 } = S4("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t3}`);
        throw new Error(s5);
      }
    }, this.find = (e4) => (this.isInitialized(), this.client.session.getAll().filter((t3) => Qr(t3, e4))), this.getPendingSessionRequests = () => this.client.pendingRequest.getAll(), this.authenticate = async (e4, t3) => {
      var s5;
      this.isInitialized(), this.isValidAuthenticate(e4);
      const i6 = t3 && this.client.core.linkModeSupportedApps.includes(t3) && ((s5 = this.client.metadata.redirect) == null ? void 0 : s5.linkMode), r6 = i6 ? M5.link_mode : M5.relay;
      r6 === M5.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n6, statement: a5 = "", uri: c7, domain: h7, nonce: p5, type: d6, exp: l7, nbf: w6, methods: m4 = [], expiry: y7 } = e4, _8 = [...e4.resources || []], { topic: R4, uri: V4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r6 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: R4, uri: V4 } });
      const E7 = await this.client.core.crypto.generateKeyPair(), S5 = vr(E7);
      if (await Promise.all([this.client.auth.authKeys.set(ae3, { responseTopic: S5, publicKey: E7 }), this.client.auth.pairingTopics.set(S5, { topic: S5, pairingTopic: R4 })]), await this.client.core.relayer.subscribe(S5, { transportType: r6 }), this.client.logger.info(`sending request to new pairing topic: ${R4}`), m4.length > 0) {
        const { namespace: O5 } = re(n6[0]);
        let T6 = ur(O5, "request", m4);
        Y2(_8) && (T6 = lr(T6, _8.pop())), _8.push(T6);
      }
      const M6 = y7 && y7 > v7.wc_sessionAuthenticate.req.ttl ? y7 : v7.wc_sessionAuthenticate.req.ttl, W4 = { authPayload: { type: d6 ?? "caip122", chains: n6, statement: a5, aud: c7, domain: h7, version: "1", nonce: p5, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: l7, nbf: w6, resources: _8 }, requester: { publicKey: E7, metadata: this.client.metadata }, expiryTimestamp: Lt(M6) }, N11 = { eip155: { chains: n6, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m4])], events: ["chainChanged", "accountsChanged"] } }, Ve = { requiredNamespaces: {}, optionalNamespaces: N11, relays: [{ protocol: "irn" }], pairingTopic: R4, proposer: { publicKey: E7, metadata: this.client.metadata }, expiryTimestamp: Lt(v7.wc_sessionPropose.req.ttl) }, { done: mt2, resolve: Me, reject: Ee3 } = Dt(M6, "Request expired"), ce3 = async ({ error: O5, session: T6 }) => {
        if (this.events.off(qt("session_request", G3), Re2), O5) Ee3(O5);
        else if (T6) {
          T6.self.publicKey = E7, await this.client.session.set(T6.topic, T6), await this.setExpiry(T6.topic, T6.expiry), R4 && await this.client.core.pairing.updateMetadata({ topic: R4, metadata: T6.peer.metadata });
          const le2 = this.client.session.get(T6.topic);
          await this.deleteProposal(Z4), Me({ session: le2 });
        }
      }, Re2 = async (O5) => {
        var T6, le2, ke;
        if (await this.deletePendingAuthRequest(G3, { message: "fulfilled", code: 0 }), O5.error) {
          const te2 = _6("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return O5.error.code === te2.code ? void 0 : (this.events.off(qt("session_connect"), ce3), Ee3(O5.error.message));
        }
        await this.deleteProposal(Z4), this.events.off(qt("session_connect"), ce3);
        const { cacaos: $e2, responder: j5 } = O5.result, Ie3 = [], Ke2 = [];
        for (const te2 of $e2) {
          await or2({ cacao: te2, projectId: this.client.core.projectId }) || (this.client.logger.error(te2, "Signature verification failed"), Ee3(_6("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: fe3 } = te2, ve3 = Y2(fe3.resources), Ue2 = [ln(fe3.iss)], _t2 = fe(fe3.iss);
          if (ve3) {
            const qe2 = dr(ve3), Et2 = fr(ve3);
            Ie3.push(...qe2), Ue2.push(...Et2);
          }
          for (const qe2 of Ue2) Ke2.push(`${qe2}:${_t2}`);
        }
        const ee2 = await this.client.core.crypto.generateSharedKey(E7, j5.publicKey);
        let pe2;
        Ie3.length > 0 && (pe2 = { topic: ee2, acknowledged: true, self: { publicKey: E7, metadata: this.client.metadata }, peer: j5, controller: j5.publicKey, expiry: Lt(H4), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: R4, namespaces: Yr([...new Set(Ie3)], [...new Set(Ke2)]), transportType: r6 }, await this.client.core.relayer.subscribe(ee2, { transportType: r6 }), await this.client.session.set(ee2, pe2), R4 && await this.client.core.pairing.updateMetadata({ topic: R4, metadata: j5.metadata }), pe2 = this.client.session.get(ee2)), (T6 = this.client.metadata.redirect) != null && T6.linkMode && (le2 = j5.metadata.redirect) != null && le2.linkMode && (ke = j5.metadata.redirect) != null && ke.universal && t3 && (this.client.core.addLinkModeSupportedApp(j5.metadata.redirect.universal), this.client.session.update(ee2, { transportType: M5.link_mode })), Me({ auths: $e2, session: pe2 });
      }, G3 = payloadId(), Z4 = payloadId();
      this.events.once(qt("session_connect"), ce3), this.events.once(qt("session_request", G3), Re2);
      let Se2;
      try {
        if (i6) {
          const O5 = formatJsonRpcRequest("wc_sessionAuthenticate", W4, G3);
          this.client.core.history.set(R4, O5);
          const T6 = await this.client.core.crypto.encode("", O5, { type: M4, encoding: pr });
          Se2 = Kr(t3, R4, T6);
        } else await Promise.all([this.sendRequest({ topic: R4, method: "wc_sessionAuthenticate", params: W4, expiry: e4.expiry, throwOnFailedPublish: true, clientRpcId: G3 }), this.sendRequest({ topic: R4, method: "wc_sessionPropose", params: Ve, expiry: v7.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: Z4 })]);
      } catch (O5) {
        throw this.events.off(qt("session_connect"), ce3), this.events.off(qt("session_request", G3), Re2), O5;
      }
      return await this.setProposal(Z4, I5({ id: Z4 }, Ve)), await this.setAuthRequest(G3, { request: D5(I5({}, W4), { verifyContext: {} }), pairingTopic: R4, transportType: r6 }), { uri: Se2 ?? V4, response: mt2 };
    }, this.approveSessionAuthenticate = async (e4) => {
      const { id: t3, auths: s5 } = e4, i6 = this.client.core.eventClient.createEvent({ properties: { topic: t3.toString(), trace: [As.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (y7) {
        throw i6.setError(Ns.no_internet_connection), y7;
      }
      const r6 = this.getPendingAuthRequest(t3);
      if (!r6) throw i6.setError(Ns.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t3}`);
      const n6 = r6.transportType || M5.relay;
      n6 === M5.relay && await this.confirmOnlineStateOrThrow();
      const a5 = r6.requester.publicKey, c7 = await this.client.core.crypto.generateKeyPair(), h7 = vr(a5), p5 = { type: D4, receiverPublicKey: a5, senderPublicKey: c7 }, d6 = [], l7 = [];
      for (const y7 of s5) {
        if (!await or2({ cacao: y7, projectId: this.client.core.projectId })) {
          i6.setError(Ns.invalid_cacao);
          const S5 = _6("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: t3, topic: h7, error: S5, encodeOpts: p5 }), new Error(S5.message);
        }
        i6.addTrace(As.cacaos_verified);
        const { p: _8 } = y7, R4 = Y2(_8.resources), V4 = [ln(_8.iss)], E7 = fe(_8.iss);
        if (R4) {
          const S5 = dr(R4), M6 = fr(R4);
          d6.push(...S5), V4.push(...M6);
        }
        for (const S5 of V4) l7.push(`${S5}:${E7}`);
      }
      const w6 = await this.client.core.crypto.generateSharedKey(c7, a5);
      i6.addTrace(As.create_authenticated_session_topic);
      let m4;
      if ((d6 == null ? void 0 : d6.length) > 0) {
        m4 = { topic: w6, acknowledged: true, self: { publicKey: c7, metadata: this.client.metadata }, peer: { publicKey: a5, metadata: r6.requester.metadata }, controller: a5, expiry: Lt(H4), authentication: s5, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r6.pairingTopic, namespaces: Yr([...new Set(d6)], [...new Set(l7)]), transportType: n6 }, i6.addTrace(As.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w6, { transportType: n6 });
        } catch (y7) {
          throw i6.setError(Ns.subscribe_authenticated_session_topic_failure), y7;
        }
        i6.addTrace(As.subscribe_authenticated_session_topic_success), await this.client.session.set(w6, m4), i6.addTrace(As.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r6.pairingTopic, metadata: r6.requester.metadata });
      }
      i6.addTrace(As.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: h7, id: t3, result: { cacaos: s5, responder: { publicKey: c7, metadata: this.client.metadata } }, encodeOpts: p5, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r6.requester.metadata, n6) });
      } catch (y7) {
        throw i6.setError(Ns.authenticated_session_approve_publish_failure), y7;
      }
      return await this.client.auth.requests.delete(t3, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r6.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i6.eventId }), { session: m4 };
    }, this.rejectSessionAuthenticate = async (e4) => {
      this.isInitialized();
      const { id: t3, reason: s5 } = e4, i6 = this.getPendingAuthRequest(t3);
      if (!i6) throw new Error(`Could not find pending auth request with id ${t3}`);
      i6.transportType === M5.relay && await this.confirmOnlineStateOrThrow();
      const r6 = i6.requester.publicKey, n6 = await this.client.core.crypto.generateKeyPair(), a5 = vr(r6), c7 = { type: D4, receiverPublicKey: r6, senderPublicKey: n6 };
      await this.sendError({ id: t3, topic: a5, error: s5, encodeOpts: c7, rpcOpts: v7.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i6.requester.metadata, i6.transportType) }), await this.client.auth.requests.delete(t3, { message: "rejected", code: 0 }), await this.client.proposal.delete(t3, _6("USER_DISCONNECTED"));
    }, this.formatAuthMessage = (e4) => {
      this.isInitialized();
      const { request: t3, iss: s5 } = e4;
      return dn(t3, s5);
    }, this.processRelayMessageCache = () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const e4 = this.relayMessageCache.shift();
          e4 && await this.onRelayMessage(e4);
        } catch (e4) {
          this.client.logger.error(e4);
        }
      }, 50);
    }, this.cleanupDuplicatePairings = async (e4) => {
      if (e4.pairingTopic) try {
        const t3 = this.client.core.pairing.pairings.get(e4.pairingTopic), s5 = this.client.core.pairing.pairings.getAll().filter((i6) => {
          var r6, n6;
          return ((r6 = i6.peerMetadata) == null ? void 0 : r6.url) && ((n6 = i6.peerMetadata) == null ? void 0 : n6.url) === e4.peer.metadata.url && i6.topic && i6.topic !== t3.topic;
        });
        if (s5.length === 0) return;
        this.client.logger.info(`Cleaning up ${s5.length} duplicate pairing(s)`), await Promise.all(s5.map((i6) => this.client.core.pairing.disconnect({ topic: i6.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (t3) {
        this.client.logger.error(t3);
      }
    }, this.deleteSession = async (e4) => {
      var t3;
      const { topic: s5, expirerHasDeleted: i6 = false, emitEvent: r6 = true, id: n6 = 0 } = e4, { self: a5 } = this.client.session.get(s5);
      await this.client.core.relayer.unsubscribe(s5), await this.client.session.delete(s5, _6("USER_DISCONNECTED")), this.addToRecentlyDeleted(s5, "session"), this.client.core.crypto.keychain.has(a5.publicKey) && await this.client.core.crypto.deleteKeyPair(a5.publicKey), this.client.core.crypto.keychain.has(s5) && await this.client.core.crypto.deleteSymKey(s5), i6 || this.client.core.expirer.del(s5), this.client.core.storage.removeItem(De2).catch((c7) => this.client.logger.warn(c7)), this.getPendingSessionRequests().forEach((c7) => {
        c7.topic === s5 && this.deletePendingSessionRequest(c7.id, _6("USER_DISCONNECTED"));
      }), s5 === ((t3 = this.sessionRequestQueue.queue[0]) == null ? void 0 : t3.topic) && (this.sessionRequestQueue.state = x7.idle), r6 && this.client.events.emit("session_delete", { id: n6, topic: s5 });
    }, this.deleteProposal = async (e4, t3) => {
      if (t3) try {
        const s5 = this.client.proposal.get(e4), i6 = this.client.core.eventClient.getEvent({ topic: s5.pairingTopic });
        i6 == null ? void 0 : i6.setError(Os.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(e4, _6("USER_DISCONNECTED")), t3 ? Promise.resolve() : this.client.core.expirer.del(e4)]), this.addToRecentlyDeleted(e4, "proposal");
    }, this.deletePendingSessionRequest = async (e4, t3, s5 = false) => {
      await Promise.all([this.client.pendingRequest.delete(e4, t3), s5 ? Promise.resolve() : this.client.core.expirer.del(e4)]), this.addToRecentlyDeleted(e4, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i6) => i6.id !== e4), s5 && (this.sessionRequestQueue.state = x7.idle, this.client.events.emit("session_request_expire", { id: e4 }));
    }, this.deletePendingAuthRequest = async (e4, t3, s5 = false) => {
      await Promise.all([this.client.auth.requests.delete(e4, t3), s5 ? Promise.resolve() : this.client.core.expirer.del(e4)]);
    }, this.setExpiry = async (e4, t3) => {
      this.client.session.keys.includes(e4) && (this.client.core.expirer.set(e4, t3), await this.client.session.update(e4, { expiry: t3 }));
    }, this.setProposal = async (e4, t3) => {
      this.client.core.expirer.set(e4, Lt(v7.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e4, t3);
    }, this.setAuthRequest = async (e4, t3) => {
      const { request: s5, pairingTopic: i6, transportType: r6 = M5.relay } = t3;
      this.client.core.expirer.set(e4, s5.expiryTimestamp), await this.client.auth.requests.set(e4, { authPayload: s5.authPayload, requester: s5.requester, expiryTimestamp: s5.expiryTimestamp, id: e4, pairingTopic: i6, verifyContext: s5.verifyContext, transportType: r6 });
    }, this.setPendingSessionRequest = async (e4) => {
      const { id: t3, topic: s5, params: i6, verifyContext: r6 } = e4, n6 = i6.request.expiryTimestamp || Lt(v7.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(t3, n6), await this.client.pendingRequest.set(t3, { id: t3, topic: s5, params: i6, verifyContext: r6 });
    }, this.sendRequest = async (e4) => {
      const { topic: t3, method: s5, params: i6, expiry: r6, relayRpcId: n6, clientRpcId: a5, throwOnFailedPublish: c7, appLink: h7 } = e4, p5 = formatJsonRpcRequest(s5, i6, a5);
      let d6;
      const l7 = !!h7;
      try {
        const y7 = l7 ? pr : ge;
        d6 = await this.client.core.crypto.encode(t3, p5, { encoding: y7 });
      } catch (y7) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t3} failed`), y7;
      }
      let w6;
      if (ct2.includes(s5)) {
        const y7 = br(JSON.stringify(p5)), _8 = br(d6);
        w6 = await this.client.core.verify.register({ id: _8, decryptedId: y7 });
      }
      const m4 = v7[s5].req;
      if (m4.attestation = w6, r6 && (m4.ttl = r6), n6 && (m4.id = n6), this.client.core.history.set(t3, p5), l7) {
        const y7 = Kr(h7, t3, d6);
        await global.Linking.openURL(y7, this.client.name);
      } else {
        const y7 = v7[s5].req;
        r6 && (y7.ttl = r6), n6 && (y7.id = n6), c7 ? (y7.internal = D5(I5({}, y7.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t3, d6, y7)) : this.client.core.relayer.publish(t3, d6, y7).catch((_8) => this.client.logger.error(_8));
      }
      return p5.id;
    }, this.sendResult = async (e4) => {
      const { id: t3, topic: s5, result: i6, throwOnFailedPublish: r6, encodeOpts: n6, appLink: a5 } = e4, c7 = formatJsonRpcResult(t3, i6);
      let h7;
      const p5 = a5 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const l7 = p5 ? pr : ge;
        h7 = await this.client.core.crypto.encode(s5, c7, D5(I5({}, n6 || {}), { encoding: l7 }));
      } catch (l7) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s5} failed`), l7;
      }
      let d6;
      try {
        d6 = await this.client.core.history.get(s5, t3);
      } catch (l7) {
        throw this.client.logger.error(`sendResult() -> history.get(${s5}, ${t3}) failed`), l7;
      }
      if (p5) {
        const l7 = Kr(a5, s5, h7);
        await global.Linking.openURL(l7, this.client.name);
      } else {
        const l7 = v7[d6.request.method].res;
        r6 ? (l7.internal = D5(I5({}, l7.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s5, h7, l7)) : this.client.core.relayer.publish(s5, h7, l7).catch((w6) => this.client.logger.error(w6));
      }
      await this.client.core.history.resolve(c7);
    }, this.sendError = async (e4) => {
      const { id: t3, topic: s5, error: i6, encodeOpts: r6, rpcOpts: n6, appLink: a5 } = e4, c7 = formatJsonRpcError(t3, i6);
      let h7;
      const p5 = a5 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const l7 = p5 ? pr : ge;
        h7 = await this.client.core.crypto.encode(s5, c7, D5(I5({}, r6 || {}), { encoding: l7 }));
      } catch (l7) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s5} failed`), l7;
      }
      let d6;
      try {
        d6 = await this.client.core.history.get(s5, t3);
      } catch (l7) {
        throw this.client.logger.error(`sendError() -> history.get(${s5}, ${t3}) failed`), l7;
      }
      if (p5) {
        const l7 = Kr(a5, s5, h7);
        await global.Linking.openURL(l7, this.client.name);
      } else {
        const l7 = n6 || v7[d6.request.method].res;
        this.client.core.relayer.publish(s5, h7, l7);
      }
      await this.client.core.history.resolve(c7);
    }, this.cleanup = async () => {
      const e4 = [], t3 = [];
      this.client.session.getAll().forEach((s5) => {
        let i6 = false;
        Ft(s5.expiry) && (i6 = true), this.client.core.crypto.keychain.has(s5.topic) || (i6 = true), i6 && e4.push(s5.topic);
      }), this.client.proposal.getAll().forEach((s5) => {
        Ft(s5.expiryTimestamp) && t3.push(s5.id);
      }), await Promise.all([...e4.map((s5) => this.deleteSession({ topic: s5 })), ...t3.map((s5) => this.deleteProposal(s5))]);
    }, this.onRelayEventRequest = async (e4) => {
      this.requestQueue.queue.push(e4), await this.processRequestsQueue();
    }, this.processRequestsQueue = async () => {
      if (this.requestQueue.state === x7.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = x7.active;
        const e4 = this.requestQueue.queue.shift();
        if (e4) try {
          await this.processRequest(e4);
        } catch (t3) {
          this.client.logger.warn(t3);
        }
      }
      this.requestQueue.state = x7.idle;
    }, this.processRequest = async (e4) => {
      const { topic: t3, payload: s5, attestation: i6, transportType: r6, encryptedId: n6 } = e4, a5 = s5.method;
      if (!this.shouldIgnorePairingRequest({ topic: t3, requestMethod: a5 })) switch (a5) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: t3, payload: s5, attestation: i6, encryptedId: n6 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(t3, s5);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(t3, s5);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(t3, s5);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(t3, s5);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(t3, s5);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: t3, payload: s5, attestation: i6, encryptedId: n6, transportType: r6 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(t3, s5);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: t3, payload: s5, attestation: i6, encryptedId: n6, transportType: r6 });
        default:
          return this.client.logger.info(`Unsupported request method ${a5}`);
      }
    }, this.onRelayEventResponse = async (e4) => {
      const { topic: t3, payload: s5, transportType: i6 } = e4, r6 = (await this.client.core.history.get(t3, s5.id)).request.method;
      switch (r6) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(t3, s5, i6);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(t3, s5);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(t3, s5);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(t3, s5);
        case "wc_sessionPing":
          return this.onSessionPingResponse(t3, s5);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(t3, s5);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(t3, s5);
        default:
          return this.client.logger.info(`Unsupported response method ${r6}`);
      }
    }, this.onRelayEventUnknownPayload = (e4) => {
      const { topic: t3 } = e4, { message: s5 } = S4("MISSING_OR_INVALID", `Decoded payload on topic ${t3} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s5);
    }, this.shouldIgnorePairingRequest = (e4) => {
      const { topic: t3, requestMethod: s5 } = e4, i6 = this.expectedPairingMethodMap.get(t3);
      return !i6 || i6.includes(s5) ? false : !!(i6.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }, this.onSessionProposeRequest = async (e4) => {
      const { topic: t3, payload: s5, attestation: i6, encryptedId: r6 } = e4, { params: n6, id: a5 } = s5;
      try {
        const c7 = this.client.core.eventClient.getEvent({ topic: t3 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), c7 == null ? void 0 : c7.setError($4.proposal_listener_not_found)), this.isValidConnect(I5({}, s5.params));
        const h7 = n6.expiryTimestamp || Lt(v7.wc_sessionPropose.req.ttl), p5 = I5({ id: a5, pairingTopic: t3, expiryTimestamp: h7 }, n6);
        await this.setProposal(a5, p5);
        const d6 = await this.getVerifyContext({ attestationId: i6, hash: br(JSON.stringify(s5)), encryptedId: r6, metadata: p5.proposer.metadata });
        c7 == null ? void 0 : c7.addTrace(z6.emit_session_proposal), this.client.events.emit("session_proposal", { id: a5, params: p5, verifyContext: d6 });
      } catch (c7) {
        await this.sendError({ id: a5, topic: t3, error: c7, rpcOpts: v7.wc_sessionPropose.autoReject }), this.client.logger.error(c7);
      }
    }, this.onSessionProposeResponse = async (e4, t3, s5) => {
      const { id: i6 } = t3;
      if (isJsonRpcResult(t3)) {
        const { result: r6 } = t3;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r6 });
        const n6 = this.client.proposal.get(i6);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n6 });
        const a5 = n6.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a5 });
        const c7 = r6.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: c7 });
        const h7 = await this.client.core.crypto.generateSharedKey(a5, c7);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", sessionTopic: h7 });
        const p5 = await this.client.core.relayer.subscribe(h7, { transportType: s5 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: p5 }), await this.client.core.pairing.activate({ topic: e4 });
      } else if (isJsonRpcError(t3)) {
        await this.client.proposal.delete(i6, _6("USER_DISCONNECTED"));
        const r6 = qt("session_connect");
        if (this.events.listenerCount(r6) === 0) throw new Error(`emitting ${r6} without any listeners, 954`);
        this.events.emit(qt("session_connect"), { error: t3.error });
      }
    }, this.onSessionSettleRequest = async (e4, t3) => {
      const { id: s5, params: i6 } = t3;
      try {
        this.isValidSessionSettleRequest(i6);
        const { relay: r6, controller: n6, expiry: a5, namespaces: c7, sessionProperties: h7, sessionConfig: p5 } = t3.params, d6 = D5(I5(I5({ topic: e4, relay: r6, expiry: a5, namespaces: c7, acknowledged: true, pairingTopic: "", requiredNamespaces: {}, optionalNamespaces: {}, controller: n6.publicKey, self: { publicKey: "", metadata: this.client.metadata }, peer: { publicKey: n6.publicKey, metadata: n6.metadata } }, h7 && { sessionProperties: h7 }), p5 && { sessionConfig: p5 }), { transportType: M5.relay }), l7 = qt("session_connect");
        if (this.events.listenerCount(l7) === 0) throw new Error(`emitting ${l7} without any listeners 997`);
        this.events.emit(qt("session_connect"), { session: d6 }), await this.sendResult({ id: t3.id, topic: e4, result: true, throwOnFailedPublish: true });
      } catch (r6) {
        await this.sendError({ id: s5, topic: e4, error: r6 }), this.client.logger.error(r6);
      }
    }, this.onSessionSettleResponse = async (e4, t3) => {
      const { id: s5 } = t3;
      isJsonRpcResult(t3) ? (await this.client.session.update(e4, { acknowledged: true }), this.events.emit(qt("session_approve", s5), {})) : isJsonRpcError(t3) && (await this.client.session.delete(e4, _6("USER_DISCONNECTED")), this.events.emit(qt("session_approve", s5), { error: t3.error }));
    }, this.onSessionUpdateRequest = async (e4, t3) => {
      const { params: s5, id: i6 } = t3;
      try {
        const r6 = `${e4}_session_update`, n6 = bo.get(r6);
        if (n6 && this.isRequestOutOfSync(n6, i6)) {
          this.client.logger.warn(`Discarding out of sync request - ${i6}`), this.sendError({ id: i6, topic: e4, error: _6("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(I5({ topic: e4 }, s5));
        try {
          bo.set(r6, i6), await this.client.session.update(e4, { namespaces: s5.namespaces }), await this.sendResult({ id: i6, topic: e4, result: true, throwOnFailedPublish: true });
        } catch (a5) {
          throw bo.delete(r6), a5;
        }
        this.client.events.emit("session_update", { id: i6, topic: e4, params: s5 });
      } catch (r6) {
        await this.sendError({ id: i6, topic: e4, error: r6 }), this.client.logger.error(r6);
      }
    }, this.isRequestOutOfSync = (e4, t3) => t3.toString().slice(0, -3) < e4.toString().slice(0, -3), this.onSessionUpdateResponse = (e4, t3) => {
      const { id: s5 } = t3, i6 = qt("session_update", s5);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t3) ? this.events.emit(qt("session_update", s5), {}) : isJsonRpcError(t3) && this.events.emit(qt("session_update", s5), { error: t3.error });
    }, this.onSessionExtendRequest = async (e4, t3) => {
      const { id: s5 } = t3;
      try {
        this.isValidExtend({ topic: e4 }), await this.setExpiry(e4, Lt(H4)), await this.sendResult({ id: s5, topic: e4, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s5, topic: e4 });
      } catch (i6) {
        await this.sendError({ id: s5, topic: e4, error: i6 }), this.client.logger.error(i6);
      }
    }, this.onSessionExtendResponse = (e4, t3) => {
      const { id: s5 } = t3, i6 = qt("session_extend", s5);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t3) ? this.events.emit(qt("session_extend", s5), {}) : isJsonRpcError(t3) && this.events.emit(qt("session_extend", s5), { error: t3.error });
    }, this.onSessionPingRequest = async (e4, t3) => {
      const { id: s5 } = t3;
      try {
        this.isValidPing({ topic: e4 }), await this.sendResult({ id: s5, topic: e4, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s5, topic: e4 });
      } catch (i6) {
        await this.sendError({ id: s5, topic: e4, error: i6 }), this.client.logger.error(i6);
      }
    }, this.onSessionPingResponse = (e4, t3) => {
      const { id: s5 } = t3, i6 = qt("session_ping", s5);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      setTimeout(() => {
        isJsonRpcResult(t3) ? this.events.emit(qt("session_ping", s5), {}) : isJsonRpcError(t3) && this.events.emit(qt("session_ping", s5), { error: t3.error });
      }, 500);
    }, this.onSessionDeleteRequest = async (e4, t3) => {
      const { id: s5 } = t3;
      try {
        this.isValidDisconnect({ topic: e4, reason: t3.params }), Promise.all([new Promise((i6) => {
          this.client.core.relayer.once(v6.publish, async () => {
            i6(await this.deleteSession({ topic: e4, id: s5 }));
          });
        }), this.sendResult({ id: s5, topic: e4, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e4, error: _6("USER_DISCONNECTED") })]).catch((i6) => this.client.logger.error(i6));
      } catch (i6) {
        this.client.logger.error(i6);
      }
    }, this.onSessionRequest = async (e4) => {
      var t3, s5, i6;
      const { topic: r6, payload: n6, attestation: a5, encryptedId: c7, transportType: h7 } = e4, { id: p5, params: d6 } = n6;
      try {
        await this.isValidRequest(I5({ topic: r6 }, d6));
        const l7 = this.client.session.get(r6), w6 = await this.getVerifyContext({ attestationId: a5, hash: br(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", d6, p5))), encryptedId: c7, metadata: l7.peer.metadata, transportType: h7 }), m4 = { id: p5, topic: r6, params: d6, verifyContext: w6 };
        await this.setPendingSessionRequest(m4), h7 === M5.link_mode && (t3 = l7.peer.metadata.redirect) != null && t3.universal && this.client.core.addLinkModeSupportedApp((s5 = l7.peer.metadata.redirect) == null ? void 0 : s5.universal), (i6 = this.client.signConfig) != null && i6.disableRequestQueue ? this.emitSessionRequest(m4) : (this.addSessionRequestToSessionRequestQueue(m4), this.processSessionRequestQueue());
      } catch (l7) {
        await this.sendError({ id: p5, topic: r6, error: l7 }), this.client.logger.error(l7);
      }
    }, this.onSessionRequestResponse = (e4, t3) => {
      const { id: s5 } = t3, i6 = qt("session_request", s5);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t3) ? this.events.emit(qt("session_request", s5), { result: t3.result }) : isJsonRpcError(t3) && this.events.emit(qt("session_request", s5), { error: t3.error });
    }, this.onSessionEventRequest = async (e4, t3) => {
      const { id: s5, params: i6 } = t3;
      try {
        const r6 = `${e4}_session_event_${i6.event.name}`, n6 = bo.get(r6);
        if (n6 && this.isRequestOutOfSync(n6, s5)) {
          this.client.logger.info(`Discarding out of sync request - ${s5}`);
          return;
        }
        this.isValidEmit(I5({ topic: e4 }, i6)), this.client.events.emit("session_event", { id: s5, topic: e4, params: i6 }), bo.set(r6, s5);
      } catch (r6) {
        await this.sendError({ id: s5, topic: e4, error: r6 }), this.client.logger.error(r6);
      }
    }, this.onSessionAuthenticateResponse = (e4, t3) => {
      const { id: s5 } = t3;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e4, payload: t3 }), isJsonRpcResult(t3) ? this.events.emit(qt("session_request", s5), { result: t3.result }) : isJsonRpcError(t3) && this.events.emit(qt("session_request", s5), { error: t3.error });
    }, this.onSessionAuthenticateRequest = async (e4) => {
      var t3;
      const { topic: s5, payload: i6, attestation: r6, encryptedId: n6, transportType: a5 } = e4;
      try {
        const { requester: c7, authPayload: h7, expiryTimestamp: p5 } = i6.params, d6 = await this.getVerifyContext({ attestationId: r6, hash: br(JSON.stringify(i6)), encryptedId: n6, metadata: c7.metadata, transportType: a5 }), l7 = { requester: c7, pairingTopic: s5, id: i6.id, authPayload: h7, verifyContext: d6, expiryTimestamp: p5 };
        await this.setAuthRequest(i6.id, { request: l7, pairingTopic: s5, transportType: a5 }), a5 === M5.link_mode && (t3 = c7.metadata.redirect) != null && t3.universal && this.client.core.addLinkModeSupportedApp(c7.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s5, params: i6.params, id: i6.id, verifyContext: d6 });
      } catch (c7) {
        this.client.logger.error(c7);
        const h7 = i6.params.requester.publicKey, p5 = await this.client.core.crypto.generateKeyPair(), d6 = this.getAppLinkIfEnabled(i6.params.requester.metadata, a5), l7 = { type: D4, receiverPublicKey: h7, senderPublicKey: p5 };
        await this.sendError({ id: i6.id, topic: s5, error: c7, encodeOpts: l7, rpcOpts: v7.wc_sessionAuthenticate.autoReject, appLink: d6 });
      }
    }, this.addSessionRequestToSessionRequestQueue = (e4) => {
      this.sessionRequestQueue.queue.push(e4);
    }, this.cleanupAfterResponse = (e4) => {
      this.deletePendingSessionRequest(e4.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = x7.idle, this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
    }, this.cleanupPendingSentRequestsForTopic = ({ topic: e4, error: t3 }) => {
      const s5 = this.client.core.history.pending;
      s5.length > 0 && s5.filter((i6) => i6.topic === e4 && i6.request.method === "wc_sessionRequest").forEach((i6) => {
        const r6 = i6.request.id, n6 = qt("session_request", r6);
        if (this.events.listenerCount(n6) === 0) throw new Error(`emitting ${n6} without any listeners`);
        this.events.emit(qt("session_request", i6.request.id), { error: t3 });
      });
    }, this.processSessionRequestQueue = () => {
      if (this.sessionRequestQueue.state === x7.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const e4 = this.sessionRequestQueue.queue[0];
      if (!e4) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = x7.active, this.emitSessionRequest(e4);
      } catch (t3) {
        this.client.logger.error(t3);
      }
    }, this.emitSessionRequest = (e4) => {
      this.client.events.emit("session_request", e4);
    }, this.onPairingCreated = (e4) => {
      if (e4.methods && this.expectedPairingMethodMap.set(e4.topic, e4.methods), e4.active) return;
      const t3 = this.client.proposal.getAll().find((s5) => s5.pairingTopic === e4.topic);
      t3 && this.onSessionProposeRequest({ topic: e4.topic, payload: formatJsonRpcRequest("wc_sessionPropose", { requiredNamespaces: t3.requiredNamespaces, optionalNamespaces: t3.optionalNamespaces, relays: t3.relays, proposer: t3.proposer, sessionProperties: t3.sessionProperties }, t3.id) });
    }, this.isValidConnect = async (e4) => {
      if (!so(e4)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e4)}`);
        throw new Error(a5);
      }
      const { pairingTopic: t3, requiredNamespaces: s5, optionalNamespaces: i6, sessionProperties: r6, relays: n6 } = e4;
      if (P3(t3) || await this.isValidPairingTopic(t3), !ro(n6, true)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `connect() relays: ${n6}`);
        throw new Error(a5);
      }
      !P3(s5) && Z2(s5) !== 0 && this.validateNamespaces(s5, "requiredNamespaces"), !P3(i6) && Z2(i6) !== 0 && this.validateNamespaces(i6, "optionalNamespaces"), P3(r6) || this.validateSessionProps(r6, "sessionProperties");
    }, this.validateNamespaces = (e4, t3) => {
      const s5 = to(e4, "connect()", t3);
      if (s5) throw new Error(s5.message);
    }, this.isValidApprove = async (e4) => {
      if (!so(e4)) throw new Error(S4("MISSING_OR_INVALID", `approve() params: ${e4}`).message);
      const { id: t3, namespaces: s5, relayProtocol: i6, sessionProperties: r6 } = e4;
      this.checkRecentlyDeleted(t3), await this.isValidProposalId(t3);
      const n6 = this.client.proposal.get(t3), a5 = Wn(s5, "approve()");
      if (a5) throw new Error(a5.message);
      const c7 = zn(n6.requiredNamespaces, s5, "approve()");
      if (c7) throw new Error(c7.message);
      if (!b3(i6, true)) {
        const { message: h7 } = S4("MISSING_OR_INVALID", `approve() relayProtocol: ${i6}`);
        throw new Error(h7);
      }
      P3(r6) || this.validateSessionProps(r6, "sessionProperties");
    }, this.isValidReject = async (e4) => {
      if (!so(e4)) {
        const { message: i6 } = S4("MISSING_OR_INVALID", `reject() params: ${e4}`);
        throw new Error(i6);
      }
      const { id: t3, reason: s5 } = e4;
      if (this.checkRecentlyDeleted(t3), await this.isValidProposalId(t3), !io(s5)) {
        const { message: i6 } = S4("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s5)}`);
        throw new Error(i6);
      }
    }, this.isValidSessionSettleRequest = (e4) => {
      if (!so(e4)) {
        const { message: c7 } = S4("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e4}`);
        throw new Error(c7);
      }
      const { relay: t3, controller: s5, namespaces: i6, expiry: r6 } = e4;
      if (!Jn(t3)) {
        const { message: c7 } = S4("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(c7);
      }
      const n6 = no(s5, "onSessionSettleRequest()");
      if (n6) throw new Error(n6.message);
      const a5 = Wn(i6, "onSessionSettleRequest()");
      if (a5) throw new Error(a5.message);
      if (Ft(r6)) {
        const { message: c7 } = S4("EXPIRED", "onSessionSettleRequest()");
        throw new Error(c7);
      }
    }, this.isValidUpdate = async (e4) => {
      if (!so(e4)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `update() params: ${e4}`);
        throw new Error(a5);
      }
      const { topic: t3, namespaces: s5 } = e4;
      this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
      const i6 = this.client.session.get(t3), r6 = Wn(s5, "update()");
      if (r6) throw new Error(r6.message);
      const n6 = zn(i6.requiredNamespaces, s5, "update()");
      if (n6) throw new Error(n6.message);
    }, this.isValidExtend = async (e4) => {
      if (!so(e4)) {
        const { message: s5 } = S4("MISSING_OR_INVALID", `extend() params: ${e4}`);
        throw new Error(s5);
      }
      const { topic: t3 } = e4;
      this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
    }, this.isValidRequest = async (e4) => {
      if (!so(e4)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `request() params: ${e4}`);
        throw new Error(a5);
      }
      const { topic: t3, request: s5, chainId: i6, expiry: r6 } = e4;
      this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
      const { namespaces: n6 } = this.client.session.get(t3);
      if (!lo(n6, i6)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `request() chainId: ${i6}`);
        throw new Error(a5);
      }
      if (!co(s5)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `request() ${JSON.stringify(s5)}`);
        throw new Error(a5);
      }
      if (!fo(n6, i6, s5.method)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `request() method: ${s5.method}`);
        throw new Error(a5);
      }
      if (r6 && !yo(r6, me3)) {
        const { message: a5 } = S4("MISSING_OR_INVALID", `request() expiry: ${r6}. Expiry must be a number (in seconds) between ${me3.min} and ${me3.max}`);
        throw new Error(a5);
      }
    }, this.isValidRespond = async (e4) => {
      var t3;
      if (!so(e4)) {
        const { message: r6 } = S4("MISSING_OR_INVALID", `respond() params: ${e4}`);
        throw new Error(r6);
      }
      const { topic: s5, response: i6 } = e4;
      try {
        await this.isValidSessionTopic(s5);
      } catch (r6) {
        throw (t3 = e4 == null ? void 0 : e4.response) != null && t3.id && this.cleanupAfterResponse(e4), r6;
      }
      if (!ao(i6)) {
        const { message: r6 } = S4("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i6)}`);
        throw new Error(r6);
      }
    }, this.isValidPing = async (e4) => {
      if (!so(e4)) {
        const { message: s5 } = S4("MISSING_OR_INVALID", `ping() params: ${e4}`);
        throw new Error(s5);
      }
      const { topic: t3 } = e4;
      await this.isValidSessionOrPairingTopic(t3);
    }, this.isValidEmit = async (e4) => {
      if (!so(e4)) {
        const { message: n6 } = S4("MISSING_OR_INVALID", `emit() params: ${e4}`);
        throw new Error(n6);
      }
      const { topic: t3, event: s5, chainId: i6 } = e4;
      await this.isValidSessionTopic(t3);
      const { namespaces: r6 } = this.client.session.get(t3);
      if (!lo(r6, i6)) {
        const { message: n6 } = S4("MISSING_OR_INVALID", `emit() chainId: ${i6}`);
        throw new Error(n6);
      }
      if (!uo(s5)) {
        const { message: n6 } = S4("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s5)}`);
        throw new Error(n6);
      }
      if (!po(r6, i6, s5.name)) {
        const { message: n6 } = S4("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s5)}`);
        throw new Error(n6);
      }
    }, this.isValidDisconnect = async (e4) => {
      if (!so(e4)) {
        const { message: s5 } = S4("MISSING_OR_INVALID", `disconnect() params: ${e4}`);
        throw new Error(s5);
      }
      const { topic: t3 } = e4;
      await this.isValidSessionOrPairingTopic(t3);
    }, this.isValidAuthenticate = (e4) => {
      const { chains: t3, uri: s5, domain: i6, nonce: r6 } = e4;
      if (!Array.isArray(t3) || t3.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!b3(s5, false)) throw new Error("uri is required parameter");
      if (!b3(i6, false)) throw new Error("domain is required parameter");
      if (!b3(r6, false)) throw new Error("nonce is required parameter");
      if ([...new Set(t3.map((a5) => re(a5).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n6 } = re(t3[0]);
      if (n6 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }, this.getVerifyContext = async (e4) => {
      const { attestationId: t3, hash: s5, encryptedId: i6, metadata: r6, transportType: n6 } = e4, a5 = { verified: { verifyUrl: r6.verifyUrl || X3, validation: "UNKNOWN", origin: r6.url || "" } };
      try {
        if (n6 === M5.link_mode) {
          const h7 = this.getAppLinkIfEnabled(r6, n6);
          return a5.verified.validation = h7 && new URL(h7).origin === new URL(r6.url).origin ? "VALID" : "INVALID", a5;
        }
        const c7 = await this.client.core.verify.resolve({ attestationId: t3, hash: s5, encryptedId: i6, verifyUrl: r6.verifyUrl });
        c7 && (a5.verified.origin = c7.origin, a5.verified.isScam = c7.isScam, a5.verified.validation = c7.origin === new URL(r6.url).origin ? "VALID" : "INVALID");
      } catch (c7) {
        this.client.logger.warn(c7);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a5)}`), a5;
    }, this.validateSessionProps = (e4, t3) => {
      Object.values(e4).forEach((s5) => {
        if (!b3(s5, false)) {
          const { message: i6 } = S4("MISSING_OR_INVALID", `${t3} must be in Record<string, string> format. Received: ${JSON.stringify(s5)}`);
          throw new Error(i6);
        }
      });
    }, this.getPendingAuthRequest = (e4) => {
      const t3 = this.client.auth.requests.get(e4);
      return typeof t3 == "object" ? t3 : void 0;
    }, this.addToRecentlyDeleted = (e4, t3) => {
      if (this.recentlyDeletedMap.set(e4, t3), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s5 = 0;
        const i6 = this.recentlyDeletedLimit / 2;
        for (const r6 of this.recentlyDeletedMap.keys()) {
          if (s5++ >= i6) break;
          this.recentlyDeletedMap.delete(r6);
        }
      }
    }, this.checkRecentlyDeleted = (e4) => {
      const t3 = this.recentlyDeletedMap.get(e4);
      if (t3) {
        const { message: s5 } = S4("MISSING_OR_INVALID", `Record was recently deleted - ${t3}: ${e4}`);
        throw new Error(s5);
      }
    }, this.isLinkModeEnabled = (e4, t3) => {
      var s5, i6, r6, n6, a5, c7, h7, p5, d6;
      return !e4 || t3 !== M5.link_mode ? false : ((i6 = (s5 = this.client.metadata) == null ? void 0 : s5.redirect) == null ? void 0 : i6.linkMode) === true && ((n6 = (r6 = this.client.metadata) == null ? void 0 : r6.redirect) == null ? void 0 : n6.universal) !== void 0 && ((c7 = (a5 = this.client.metadata) == null ? void 0 : a5.redirect) == null ? void 0 : c7.universal) !== "" && ((h7 = e4 == null ? void 0 : e4.redirect) == null ? void 0 : h7.universal) !== void 0 && ((p5 = e4 == null ? void 0 : e4.redirect) == null ? void 0 : p5.universal) !== "" && ((d6 = e4 == null ? void 0 : e4.redirect) == null ? void 0 : d6.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e4.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }, this.getAppLinkIfEnabled = (e4, t3) => {
      var s5;
      return this.isLinkModeEnabled(e4, t3) ? (s5 = e4 == null ? void 0 : e4.redirect) == null ? void 0 : s5.universal : void 0;
    }, this.handleLinkModeMessage = ({ url: e4 }) => {
      if (!e4 || !e4.includes("wc_ev") || !e4.includes("topic")) return;
      const t3 = Wt(e4, "topic") || "", s5 = decodeURIComponent(Wt(e4, "wc_ev") || ""), i6 = this.client.session.keys.includes(t3);
      i6 && this.client.session.update(t3, { transportType: M5.link_mode }), this.client.core.dispatchEnvelope({ topic: t3, message: s5, sessionExists: i6 });
    }, this.registerLinkModeListeners = async () => {
      var e4;
      if (zt() || $3() && (e4 = this.client.metadata.redirect) != null && e4.linkMode) {
        const t3 = global == null ? void 0 : global.Linking;
        if (typeof t3 < "u") {
          t3.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s5 = await t3.getInitialURL();
          s5 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s5 });
          }, 50);
        }
      }
    };
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o6 } = S4("NOT_INITIALIZED", this.name);
      throw new Error(o6);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(v6.message, (o6) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(o6) : this.onRelayMessage(o6);
    });
  }
  async onRelayMessage(o6) {
    const { topic: e4, message: t3, attestation: s5, transportType: i6 } = o6, { publicKey: r6 } = this.client.auth.authKeys.keys.includes(ae3) ? this.client.auth.authKeys.get(ae3) : { responseTopic: void 0, publicKey: void 0 }, n6 = await this.client.core.crypto.decode(e4, t3, { receiverPublicKey: r6, encoding: i6 === M5.link_mode ? pr : ge });
    try {
      isJsonRpcRequest(n6) ? (this.client.core.history.set(e4, n6), this.onRelayEventRequest({ topic: e4, payload: n6, attestation: s5, transportType: i6, encryptedId: br(t3) })) : isJsonRpcResponse(n6) ? (await this.client.core.history.resolve(n6), await this.onRelayEventResponse({ topic: e4, payload: n6, transportType: i6 }), this.client.core.history.delete(e4, n6.id)) : this.onRelayEventUnknownPayload({ topic: e4, payload: n6, transportType: i6 });
    } catch (a5) {
      this.client.logger.error(a5);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(x6.expired, async (o6) => {
      const { topic: e4, id: t3 } = Kt(o6.target);
      if (t3 && this.client.pendingRequest.keys.includes(t3)) return await this.deletePendingSessionRequest(t3, S4("EXPIRED"), true);
      if (t3 && this.client.auth.requests.keys.includes(t3)) return await this.deletePendingAuthRequest(t3, S4("EXPIRED"), true);
      e4 ? this.client.session.keys.includes(e4) && (await this.deleteSession({ topic: e4, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e4 })) : t3 && (await this.deleteProposal(t3, true), this.client.events.emit("proposal_expire", { id: t3 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(j4.create, (o6) => this.onPairingCreated(o6)), this.client.core.pairing.events.on(j4.delete, (o6) => {
      this.addToRecentlyDeleted(o6.topic, "pairing");
    });
  }
  isValidPairingTopic(o6) {
    if (!b3(o6, false)) {
      const { message: e4 } = S4("MISSING_OR_INVALID", `pairing topic should be a string: ${o6}`);
      throw new Error(e4);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o6)) {
      const { message: e4 } = S4("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o6}`);
      throw new Error(e4);
    }
    if (Ft(this.client.core.pairing.pairings.get(o6).expiry)) {
      const { message: e4 } = S4("EXPIRED", `pairing topic: ${o6}`);
      throw new Error(e4);
    }
  }
  async isValidSessionTopic(o6) {
    if (!b3(o6, false)) {
      const { message: e4 } = S4("MISSING_OR_INVALID", `session topic should be a string: ${o6}`);
      throw new Error(e4);
    }
    if (this.checkRecentlyDeleted(o6), !this.client.session.keys.includes(o6)) {
      const { message: e4 } = S4("NO_MATCHING_KEY", `session topic doesn't exist: ${o6}`);
      throw new Error(e4);
    }
    if (Ft(this.client.session.get(o6).expiry)) {
      await this.deleteSession({ topic: o6 });
      const { message: e4 } = S4("EXPIRED", `session topic: ${o6}`);
      throw new Error(e4);
    }
    if (!this.client.core.crypto.keychain.has(o6)) {
      const { message: e4 } = S4("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o6}`);
      throw await this.deleteSession({ topic: o6 }), new Error(e4);
    }
  }
  async isValidSessionOrPairingTopic(o6) {
    if (this.checkRecentlyDeleted(o6), this.client.session.keys.includes(o6)) await this.isValidSessionTopic(o6);
    else if (this.client.core.pairing.pairings.keys.includes(o6)) this.isValidPairingTopic(o6);
    else if (b3(o6, false)) {
      const { message: e4 } = S4("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o6}`);
      throw new Error(e4);
    } else {
      const { message: e4 } = S4("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o6}`);
      throw new Error(e4);
    }
  }
  async isValidProposalId(o6) {
    if (!oo(o6)) {
      const { message: e4 } = S4("MISSING_OR_INVALID", `proposal id should be a number: ${o6}`);
      throw new Error(e4);
    }
    if (!this.client.proposal.keys.includes(o6)) {
      const { message: e4 } = S4("NO_MATCHING_KEY", `proposal id doesn't exist: ${o6}`);
      throw new Error(e4);
    }
    if (Ft(this.client.proposal.get(o6).expiryTimestamp)) {
      await this.deleteProposal(o6);
      const { message: e4 } = S4("EXPIRED", `proposal id: ${o6}`);
      throw new Error(e4);
    }
  }
};
var Ss2 = class extends li {
  constructor(o6, e4) {
    super(o6, e4, it3, ye3), this.core = o6, this.logger = e4;
  }
};
var wt2 = class extends li {
  constructor(o6, e4) {
    super(o6, e4, nt2, ye3), this.core = o6, this.logger = e4;
  }
};
var Is = class extends li {
  constructor(o6, e4) {
    super(o6, e4, at3, ye3, (t3) => t3.id), this.core = o6, this.logger = e4;
  }
};
var fs = class extends li {
  constructor(o6, e4) {
    super(o6, e4, ht2, oe3, () => ae3), this.core = o6, this.logger = e4;
  }
};
var vs = class extends li {
  constructor(o6, e4) {
    super(o6, e4, dt2, oe3), this.core = o6, this.logger = e4;
  }
};
var qs2 = class extends li {
  constructor(o6, e4) {
    super(o6, e4, ut3, oe3, (t3) => t3.id), this.core = o6, this.logger = e4;
  }
};
var Ts = class {
  constructor(o6, e4) {
    this.core = o6, this.logger = e4, this.authKeys = new fs(this.core, this.logger), this.pairingTopics = new vs(this.core, this.logger), this.requests = new qs2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var _e3 = class __e extends S3 {
  constructor(o6) {
    super(o6), this.protocol = Ce3, this.version = Le2, this.name = we3.name, this.events = new import_events8.EventEmitter(), this.on = (t3, s5) => this.events.on(t3, s5), this.once = (t3, s5) => this.events.once(t3, s5), this.off = (t3, s5) => this.events.off(t3, s5), this.removeListener = (t3, s5) => this.events.removeListener(t3, s5), this.removeAllListeners = (t3) => this.events.removeAllListeners(t3), this.connect = async (t3) => {
      try {
        return await this.engine.connect(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.pair = async (t3) => {
      try {
        return await this.engine.pair(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.approve = async (t3) => {
      try {
        return await this.engine.approve(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.reject = async (t3) => {
      try {
        return await this.engine.reject(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.update = async (t3) => {
      try {
        return await this.engine.update(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.extend = async (t3) => {
      try {
        return await this.engine.extend(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.request = async (t3) => {
      try {
        return await this.engine.request(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.respond = async (t3) => {
      try {
        return await this.engine.respond(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.ping = async (t3) => {
      try {
        return await this.engine.ping(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.emit = async (t3) => {
      try {
        return await this.engine.emit(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.disconnect = async (t3) => {
      try {
        return await this.engine.disconnect(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.find = (t3) => {
      try {
        return this.engine.find(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.getPendingSessionRequests = () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (t3) {
        throw this.logger.error(t3.message), t3;
      }
    }, this.authenticate = async (t3, s5) => {
      try {
        return await this.engine.authenticate(t3, s5);
      } catch (i6) {
        throw this.logger.error(i6.message), i6;
      }
    }, this.formatAuthMessage = (t3) => {
      try {
        return this.engine.formatAuthMessage(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.approveSessionAuthenticate = async (t3) => {
      try {
        return await this.engine.approveSessionAuthenticate(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.rejectSessionAuthenticate = async (t3) => {
      try {
        return await this.engine.rejectSessionAuthenticate(t3);
      } catch (s5) {
        throw this.logger.error(s5.message), s5;
      }
    }, this.name = (o6 == null ? void 0 : o6.name) || we3.name, this.metadata = (o6 == null ? void 0 : o6.metadata) || $t(), this.signConfig = o6 == null ? void 0 : o6.signConfig;
    const e4 = typeof (o6 == null ? void 0 : o6.logger) < "u" && typeof (o6 == null ? void 0 : o6.logger) != "string" ? o6.logger : (0, import_pino2.default)(k4({ level: (o6 == null ? void 0 : o6.logger) || we3.logger }));
    this.core = (o6 == null ? void 0 : o6.core) || new Rn2(o6), this.logger = E5(e4, this.name), this.session = new wt2(this.core, this.logger), this.proposal = new Ss2(this.core, this.logger), this.pendingRequest = new Is(this.core, this.logger), this.engine = new Rs(this), this.auth = new Ts(this.core, this.logger);
  }
  static async init(o6) {
    const e4 = new __e(o6);
    return await e4.initialize(), e4;
  }
  get context() {
    return y4(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
        this.engine.processRelayMessageCache();
      }, (0, import_time5.toMiliseconds)(import_time5.ONE_SECOND));
    } catch (o6) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o6.message), o6;
    }
  }
};

// node_modules/@jnwng/walletconnect-solana/lib/esm/adapter.js
var import_bs58 = __toESM(require_bs58(), 1);

// node_modules/@jnwng/walletconnect-solana/lib/esm/errors.js
var ClientNotInitializedError = class _ClientNotInitializedError extends Error {
  constructor() {
    super();
    Object.setPrototypeOf(this, _ClientNotInitializedError.prototype);
  }
};
var QRCodeModalError = class _QRCodeModalError extends Error {
  constructor() {
    super();
    Object.setPrototypeOf(this, _QRCodeModalError.prototype);
  }
};

// node_modules/@jnwng/walletconnect-solana/lib/esm/adapter.js
var WalletConnectChainID;
(function(WalletConnectChainID2) {
  WalletConnectChainID2["Mainnet"] = "solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ";
  WalletConnectChainID2["Devnet"] = "solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K";
})(WalletConnectChainID || (WalletConnectChainID = {}));
var WalletConnectRPCMethods;
(function(WalletConnectRPCMethods2) {
  WalletConnectRPCMethods2["signTransaction"] = "solana_signTransaction";
  WalletConnectRPCMethods2["signMessage"] = "solana_signMessage";
})(WalletConnectRPCMethods || (WalletConnectRPCMethods = {}));
var getConnectParams = (chainId) => ({
  requiredNamespaces: {
    solana: {
      chains: [chainId],
      methods: [WalletConnectRPCMethods.signTransaction, WalletConnectRPCMethods.signMessage],
      events: []
    }
  }
});
var isVersionedTransaction = (transaction) => "version" in transaction;
var WalletConnectWallet = class {
  constructor(config) {
    this._options = config.options;
    this._network = config.network;
  }
  async connect() {
    const client = this._client ?? await _e3.init(this._options);
    const sessions = client.find(getConnectParams(this._network)).filter((s5) => s5.acknowledged);
    if (sessions.length) {
      this._session = sessions[sessions.length - 1];
      this._client = client;
      return {
        publicKey: this.publicKey
      };
    } else {
      const { uri, approval } = await client.connect(getConnectParams(this._network));
      return new Promise((resolve, reject) => {
        if (uri) {
          import_qrcode_modal.default.open(uri, () => {
            reject(new QRCodeModalError());
          });
        }
        approval().then((session) => {
          this._session = session;
          this._client = client;
          resolve({ publicKey: this.publicKey });
        }).catch(reject).finally(() => {
          import_qrcode_modal.default.close();
        });
      });
    }
  }
  async disconnect() {
    if (this._client && this._session) {
      await this._client.disconnect({
        topic: this._session.topic,
        reason: _6("USER_DISCONNECTED")
      });
      this._session = void 0;
    } else {
      throw new ClientNotInitializedError();
    }
  }
  get client() {
    if (this._client) {
      return Object.assign({}, this._client, { off: this._client.removeListener });
    } else {
      throw new ClientNotInitializedError();
    }
  }
  get publicKey() {
    if (this._client && this._session) {
      const { address } = oe(this._session.namespaces.solana.accounts[0]);
      return new PublicKey(address);
    } else {
      throw new ClientNotInitializedError();
    }
  }
  async signTransaction(transaction) {
    if (this._client && this._session) {
      let rawTransaction;
      let legacyTransaction;
      if (isVersionedTransaction(transaction)) {
        rawTransaction = Buffer.from(transaction.serialize()).toString("base64");
        if (transaction.version === "legacy") {
          legacyTransaction = Transaction.from(transaction.serialize());
        }
      } else {
        rawTransaction = transaction.serialize({
          requireAllSignatures: false,
          verifySignatures: false
        }).toString("base64");
        legacyTransaction = transaction;
      }
      const { signature: signature2 } = await this._client.request({
        chainId: this._network,
        topic: this._session.topic,
        request: {
          method: WalletConnectRPCMethods.signTransaction,
          params: {
            // Passing ...legacyTransaction is deprecated.
            // All new clients should rely on the `transaction` parameter.
            // The future versions will stop passing ...legacyTransaction.
            ...legacyTransaction,
            // New base64-encoded serialized transaction request parameter
            transaction: rawTransaction
          }
        }
      });
      transaction.addSignature(this.publicKey, Buffer.from(import_bs58.default.decode(signature2)));
      return transaction;
    } else {
      throw new ClientNotInitializedError();
    }
  }
  async signMessage(message) {
    if (this._client && this._session) {
      const { signature: signature2 } = await this._client.request({
        // The network does not change the output of message signing, but this is a required parameter for SignClient
        chainId: this._network,
        topic: this._session.topic,
        request: {
          method: WalletConnectRPCMethods.signMessage,
          params: { pubkey: this.publicKey.toString(), message: import_bs58.default.encode(message) }
        }
      });
      return import_bs58.default.decode(signature2);
    } else {
      throw new ClientNotInitializedError();
    }
  }
};
export {
  ClientNotInitializedError,
  QRCodeModalError,
  WalletConnectChainID,
  _e3 as WalletConnectClient,
  WalletConnectRPCMethods,
  WalletConnectWallet
};
/*! Bundled license information:

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)
*/
//# sourceMappingURL=esm-C6J24UMX.js.map
